/*
 * Copyright 2014 Sebastian RODRIGUEZ, Nicolas GAUD, St√©phane GALLAND.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
package io.sarl.core

import java.util.UUID
import io.sarl.lang.core.SpaceID

/**
* Initialization event for an Agent.
* The source of this event is the agent itself.
* This event is only received by the agent's native behavior.
*/
event Initialize {
	var parameters : Object[]
}

/**
* Notifies the Destruction of the agent.
* The source of this event is the agent itself.
* This event is fired after the agent has called the killMe action.
* This event is only received by the agent's internal behaviors, not the member since to call killMe action it must remain any member.
*/
event Destroy

/**
* Informs the creation of a new agent in a given context.
* The context Id can be retrieved via ev.getSource().getSpaceID().getContextID()
*/
event AgentSpawned {
	var agentID : UUID
	var agentType : String
}

/**
* Informs an agent has been killed
* The context Id can be retrieved via ev.getSource().getSpaceID().getContextID()
*/
event AgentKilled {
	var agentID : UUID
}

/**
* Informs the creation of a new space in a given context.
*/
event SpaceCreated {
	var spaceID : SpaceID
}

/**
* Informs the destruction of a space in a given context.
*/
event SpaceDestroyed {
	var spaceID : SpaceID
}

/**  Notifies other members the member with agentID has effectively integrated the holon context.*/
event MemberJoined {
	var parentContextID : UUID
	var agentID : UUID
}

/** Notifies other members the member with agentID was excluded (forced to leave) the holon context parentContextID */
event MemberExcluded {
	var parentContextID : UUID
	var excludeMemberID : UUID
}

/** Notifies other members the member with agentID has left the holon context */
event MemberLeft {
	var agentID : UUID
}

/**
 * Notifies behaviors the agent has joined a new superholon
 */
event ContextJoined {
	var holonContextID : UUID
	var defaultSpaceID : UUID
}

/**
 * Notifies behaviors the agent has left a superholon
 */
event ContextLeft {
	var holonContextID : UUID
}
