/*
* generated by Xtext
*/
package io.sarl.lang.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class SARLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cPackageKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cImportSectionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportSectionXImportSectionParserRuleCall_1_0 = (RuleCall)cImportSectionAssignment_1.eContents().get(0);
		private final Assignment cElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementsAbstractElementParserRuleCall_2_0 = (RuleCall)cElementsAssignment_2.eContents().get(0);
		
		//Model:
		//	("package" name=QualifiedName ";"?)? importSection=XImportSection? elements+=AbstractElement*;
		public ParserRule getRule() { return rule; }

		//("package" name=QualifiedName ";"?)? importSection=XImportSection? elements+=AbstractElement*
		public Group getGroup() { return cGroup; }

		//("package" name=QualifiedName ";"?)?
		public Group getGroup_0() { return cGroup_0; }

		//"package"
		public Keyword getPackageKeyword_0_0() { return cPackageKeyword_0_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_0_1_0() { return cNameQualifiedNameParserRuleCall_0_1_0; }

		//";"?
		public Keyword getSemicolonKeyword_0_2() { return cSemicolonKeyword_0_2; }

		//importSection=XImportSection?
		public Assignment getImportSectionAssignment_1() { return cImportSectionAssignment_1; }

		//XImportSection
		public RuleCall getImportSectionXImportSectionParserRuleCall_1_0() { return cImportSectionXImportSectionParserRuleCall_1_0; }

		//elements+=AbstractElement*
		public Assignment getElementsAssignment_2() { return cElementsAssignment_2; }

		//AbstractElement
		public RuleCall getElementsAbstractElementParserRuleCall_2_0() { return cElementsAbstractElementParserRuleCall_2_0; }
	}

	public class AbstractElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEventParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCapacityParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAgentParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cBehaviorParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cSkillParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//AbstractElement:
		//	Event | Capacity | Agent | Behavior | Skill;
		public ParserRule getRule() { return rule; }

		//Event | Capacity | Agent | Behavior | Skill
		public Alternatives getAlternatives() { return cAlternatives; }

		//Event
		public RuleCall getEventParserRuleCall_0() { return cEventParserRuleCall_0; }

		//Capacity
		public RuleCall getCapacityParserRuleCall_1() { return cCapacityParserRuleCall_1; }

		//Agent
		public RuleCall getAgentParserRuleCall_2() { return cAgentParserRuleCall_2; }

		//Behavior
		public RuleCall getBehaviorParserRuleCall_3() { return cBehaviorParserRuleCall_3; }

		//Skill
		public RuleCall getSkillParserRuleCall_4() { return cSkillParserRuleCall_4; }
	}

	public class EventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Event");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEventKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cExtendsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSuperTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cSuperTypeEventCrossReference_2_1_0 = (CrossReference)cSuperTypeAssignment_2_1.eContents().get(0);
		private final RuleCall cSuperTypeEventQualifiedNameParserRuleCall_2_1_0_1 = (RuleCall)cSuperTypeEventCrossReference_2_1_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cFeaturesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cFeaturesEventFeatureParserRuleCall_3_1_0 = (RuleCall)cFeaturesAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//Event:
		//	"event" name=ValidID ("extends" superType=[Event|QualifiedName])? ("{" features+=EventFeature* "}")?;
		public ParserRule getRule() { return rule; }

		//"event" name=ValidID ("extends" superType=[Event|QualifiedName])? ("{" features+=EventFeature* "}")?
		public Group getGroup() { return cGroup; }

		//"event"
		public Keyword getEventKeyword_0() { return cEventKeyword_0; }

		//name=ValidID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_0() { return cNameValidIDParserRuleCall_1_0; }

		//("extends" superType=[Event|QualifiedName])?
		public Group getGroup_2() { return cGroup_2; }

		//"extends"
		public Keyword getExtendsKeyword_2_0() { return cExtendsKeyword_2_0; }

		//superType=[Event|QualifiedName]
		public Assignment getSuperTypeAssignment_2_1() { return cSuperTypeAssignment_2_1; }

		//[Event|QualifiedName]
		public CrossReference getSuperTypeEventCrossReference_2_1_0() { return cSuperTypeEventCrossReference_2_1_0; }

		//QualifiedName
		public RuleCall getSuperTypeEventQualifiedNameParserRuleCall_2_1_0_1() { return cSuperTypeEventQualifiedNameParserRuleCall_2_1_0_1; }

		//("{" features+=EventFeature* "}")?
		public Group getGroup_3() { return cGroup_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }

		//features+=EventFeature*
		public Assignment getFeaturesAssignment_3_1() { return cFeaturesAssignment_3_1; }

		//EventFeature
		public RuleCall getFeaturesEventFeatureParserRuleCall_3_1_0() { return cFeaturesEventFeatureParserRuleCall_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_2() { return cRightCurlyBracketKeyword_3_2; }
	}

	public class CapacityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Capacity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCapacityKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cExtendsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSuperTypesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cSuperTypesCapacityCrossReference_2_1_0 = (CrossReference)cSuperTypesAssignment_2_1.eContents().get(0);
		private final RuleCall cSuperTypesCapacityQualifiedNameParserRuleCall_2_1_0_1 = (RuleCall)cSuperTypesCapacityCrossReference_2_1_0.eContents().get(1);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cSuperTypesAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final CrossReference cSuperTypesCapacityCrossReference_2_2_1_0 = (CrossReference)cSuperTypesAssignment_2_2_1.eContents().get(0);
		private final RuleCall cSuperTypesCapacityQualifiedNameParserRuleCall_2_2_1_0_1 = (RuleCall)cSuperTypesCapacityCrossReference_2_2_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cActionsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cActionsActionSignatureParserRuleCall_4_0 = (RuleCall)cActionsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Capacity:
		//	"capacity" name=ValidID ("extends" superTypes+=[Capacity|QualifiedName] ("," superTypes+=[Capacity|QualifiedName])*)?
		//	"{" actions+=ActionSignature* "}";
		public ParserRule getRule() { return rule; }

		//"capacity" name=ValidID ("extends" superTypes+=[Capacity|QualifiedName] ("," superTypes+=[Capacity|QualifiedName])*)?
		//"{" actions+=ActionSignature* "}"
		public Group getGroup() { return cGroup; }

		//"capacity"
		public Keyword getCapacityKeyword_0() { return cCapacityKeyword_0; }

		//name=ValidID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_0() { return cNameValidIDParserRuleCall_1_0; }

		//("extends" superTypes+=[Capacity|QualifiedName] ("," superTypes+=[Capacity|QualifiedName])*)?
		public Group getGroup_2() { return cGroup_2; }

		//"extends"
		public Keyword getExtendsKeyword_2_0() { return cExtendsKeyword_2_0; }

		//superTypes+=[Capacity|QualifiedName]
		public Assignment getSuperTypesAssignment_2_1() { return cSuperTypesAssignment_2_1; }

		//[Capacity|QualifiedName]
		public CrossReference getSuperTypesCapacityCrossReference_2_1_0() { return cSuperTypesCapacityCrossReference_2_1_0; }

		//QualifiedName
		public RuleCall getSuperTypesCapacityQualifiedNameParserRuleCall_2_1_0_1() { return cSuperTypesCapacityQualifiedNameParserRuleCall_2_1_0_1; }

		//("," superTypes+=[Capacity|QualifiedName])*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }

		//superTypes+=[Capacity|QualifiedName]
		public Assignment getSuperTypesAssignment_2_2_1() { return cSuperTypesAssignment_2_2_1; }

		//[Capacity|QualifiedName]
		public CrossReference getSuperTypesCapacityCrossReference_2_2_1_0() { return cSuperTypesCapacityCrossReference_2_2_1_0; }

		//QualifiedName
		public RuleCall getSuperTypesCapacityQualifiedNameParserRuleCall_2_2_1_0_1() { return cSuperTypesCapacityQualifiedNameParserRuleCall_2_2_1_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//actions+=ActionSignature*
		public Assignment getActionsAssignment_4() { return cActionsAssignment_4; }

		//ActionSignature
		public RuleCall getActionsActionSignatureParserRuleCall_4_0() { return cActionsActionSignatureParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class AgentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Agent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAgentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cExtendsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSuperTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cSuperTypeAgentCrossReference_2_1_0 = (CrossReference)cSuperTypeAssignment_2_1.eContents().get(0);
		private final RuleCall cSuperTypeAgentQualifiedNameParserRuleCall_2_1_0_1 = (RuleCall)cSuperTypeAgentCrossReference_2_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cFeaturesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFeaturesAgentFeatureParserRuleCall_4_0 = (RuleCall)cFeaturesAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Agent:
		//	"agent" name=ValidID ("extends" superType=[Agent|QualifiedName])? "{" features+=AgentFeature* "}";
		public ParserRule getRule() { return rule; }

		//"agent" name=ValidID ("extends" superType=[Agent|QualifiedName])? "{" features+=AgentFeature* "}"
		public Group getGroup() { return cGroup; }

		//"agent"
		public Keyword getAgentKeyword_0() { return cAgentKeyword_0; }

		//name=ValidID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_0() { return cNameValidIDParserRuleCall_1_0; }

		//("extends" superType=[Agent|QualifiedName])?
		public Group getGroup_2() { return cGroup_2; }

		//"extends"
		public Keyword getExtendsKeyword_2_0() { return cExtendsKeyword_2_0; }

		//superType=[Agent|QualifiedName]
		public Assignment getSuperTypeAssignment_2_1() { return cSuperTypeAssignment_2_1; }

		//[Agent|QualifiedName]
		public CrossReference getSuperTypeAgentCrossReference_2_1_0() { return cSuperTypeAgentCrossReference_2_1_0; }

		//QualifiedName
		public RuleCall getSuperTypeAgentQualifiedNameParserRuleCall_2_1_0_1() { return cSuperTypeAgentQualifiedNameParserRuleCall_2_1_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//features+=AgentFeature*
		public Assignment getFeaturesAssignment_4() { return cFeaturesAssignment_4; }

		//AgentFeature
		public RuleCall getFeaturesAgentFeatureParserRuleCall_4_0() { return cFeaturesAgentFeatureParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class BehaviorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Behavior");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBehaviorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cExtendsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSuperTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cSuperTypeBehaviorCrossReference_2_1_0 = (CrossReference)cSuperTypeAssignment_2_1.eContents().get(0);
		private final RuleCall cSuperTypeBehaviorQualifiedNameParserRuleCall_2_1_0_1 = (RuleCall)cSuperTypeBehaviorCrossReference_2_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cFeaturesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFeaturesBehaviorFeatureParserRuleCall_4_0 = (RuleCall)cFeaturesAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Behavior:
		//	"behavior" name=ValidID ("extends" superType=[Behavior|QualifiedName])? "{" features+=BehaviorFeature* "}";
		public ParserRule getRule() { return rule; }

		//"behavior" name=ValidID ("extends" superType=[Behavior|QualifiedName])? "{" features+=BehaviorFeature* "}"
		public Group getGroup() { return cGroup; }

		//"behavior"
		public Keyword getBehaviorKeyword_0() { return cBehaviorKeyword_0; }

		//name=ValidID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_0() { return cNameValidIDParserRuleCall_1_0; }

		//("extends" superType=[Behavior|QualifiedName])?
		public Group getGroup_2() { return cGroup_2; }

		//"extends"
		public Keyword getExtendsKeyword_2_0() { return cExtendsKeyword_2_0; }

		//superType=[Behavior|QualifiedName]
		public Assignment getSuperTypeAssignment_2_1() { return cSuperTypeAssignment_2_1; }

		//[Behavior|QualifiedName]
		public CrossReference getSuperTypeBehaviorCrossReference_2_1_0() { return cSuperTypeBehaviorCrossReference_2_1_0; }

		//QualifiedName
		public RuleCall getSuperTypeBehaviorQualifiedNameParserRuleCall_2_1_0_1() { return cSuperTypeBehaviorQualifiedNameParserRuleCall_2_1_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//features+=BehaviorFeature*
		public Assignment getFeaturesAssignment_4() { return cFeaturesAssignment_4; }

		//BehaviorFeature
		public RuleCall getFeaturesBehaviorFeatureParserRuleCall_4_0() { return cFeaturesBehaviorFeatureParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class EventFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EventFeature");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAttributeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cConstructorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EventFeature:
		//	Attribute | Constructor;
		public ParserRule getRule() { return rule; }

		//Attribute | Constructor
		public Alternatives getAlternatives() { return cAlternatives; }

		//Attribute
		public RuleCall getAttributeParserRuleCall_0() { return cAttributeParserRuleCall_0; }

		//Constructor
		public RuleCall getConstructorParserRuleCall_1() { return cConstructorParserRuleCall_1; }
	}

	public class AgentFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AgentFeature");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAttributeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBehaviorUnitParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cActionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cCapacityUsesParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cRequiredCapacityParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//AgentFeature:
		//	Attribute | BehaviorUnit | Action | CapacityUses | RequiredCapacity;
		public ParserRule getRule() { return rule; }

		//Attribute | BehaviorUnit | Action | CapacityUses | RequiredCapacity
		public Alternatives getAlternatives() { return cAlternatives; }

		//Attribute
		public RuleCall getAttributeParserRuleCall_0() { return cAttributeParserRuleCall_0; }

		//BehaviorUnit
		public RuleCall getBehaviorUnitParserRuleCall_1() { return cBehaviorUnitParserRuleCall_1; }

		//Action
		public RuleCall getActionParserRuleCall_2() { return cActionParserRuleCall_2; }

		//CapacityUses
		public RuleCall getCapacityUsesParserRuleCall_3() { return cCapacityUsesParserRuleCall_3; }

		//RequiredCapacity
		public RuleCall getRequiredCapacityParserRuleCall_4() { return cRequiredCapacityParserRuleCall_4; }
	}

	public class BehaviorFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BehaviorFeature");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAttributeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBehaviorUnitParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cActionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cCapacityUsesParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cRequiredCapacityParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cConstructorParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//BehaviorFeature:
		//	Attribute | BehaviorUnit | Action | CapacityUses | RequiredCapacity | Constructor;
		public ParserRule getRule() { return rule; }

		//Attribute | BehaviorUnit | Action | CapacityUses | RequiredCapacity | Constructor
		public Alternatives getAlternatives() { return cAlternatives; }

		//Attribute
		public RuleCall getAttributeParserRuleCall_0() { return cAttributeParserRuleCall_0; }

		//BehaviorUnit
		public RuleCall getBehaviorUnitParserRuleCall_1() { return cBehaviorUnitParserRuleCall_1; }

		//Action
		public RuleCall getActionParserRuleCall_2() { return cActionParserRuleCall_2; }

		//CapacityUses
		public RuleCall getCapacityUsesParserRuleCall_3() { return cCapacityUsesParserRuleCall_3; }

		//RequiredCapacity
		public RuleCall getRequiredCapacityParserRuleCall_4() { return cRequiredCapacityParserRuleCall_4; }

		//Constructor
		public RuleCall getConstructorParserRuleCall_5() { return cConstructorParserRuleCall_5; }
	}

	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cWriteableAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final Keyword cWriteableVarKeyword_0_0_0 = (Keyword)cWriteableAssignment_0_0.eContents().get(0);
		private final Keyword cValKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Assignment cNameAssignment_1_0_0_0 = (Assignment)cGroup_1_0_0.eContents().get(0);
		private final RuleCall cNameValidIDParserRuleCall_1_0_0_0_0 = (RuleCall)cNameAssignment_1_0_0_0.eContents().get(0);
		private final Keyword cColonKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Assignment cTypeAssignment_1_0_0_2 = (Assignment)cGroup_1_0_0.eContents().get(2);
		private final RuleCall cTypeJvmTypeReferenceParserRuleCall_1_0_0_2_0 = (RuleCall)cTypeAssignment_1_0_0_2.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cInitialValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cInitialValueXExpressionParserRuleCall_2_1_0 = (RuleCall)cInitialValueAssignment_2_1.eContents().get(0);
		
		//Attribute:
		//	(writeable?="var" | "val") (=> (name=ValidID ":" type=JvmTypeReference) | name=ValidID) ("="
		//	initialValue=XExpression)?;
		public ParserRule getRule() { return rule; }

		//(writeable?="var" | "val") (=> (name=ValidID ":" type=JvmTypeReference) | name=ValidID) ("=" initialValue=XExpression)?
		public Group getGroup() { return cGroup; }

		//writeable?="var" | "val"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//writeable?="var"
		public Assignment getWriteableAssignment_0_0() { return cWriteableAssignment_0_0; }

		//"var"
		public Keyword getWriteableVarKeyword_0_0_0() { return cWriteableVarKeyword_0_0_0; }

		//"val"
		public Keyword getValKeyword_0_1() { return cValKeyword_0_1; }

		//=> (name=ValidID ":" type=JvmTypeReference) | name=ValidID
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//=> (name=ValidID ":" type=JvmTypeReference)
		public Group getGroup_1_0() { return cGroup_1_0; }

		//name=ValidID ":" type=JvmTypeReference
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//name=ValidID
		public Assignment getNameAssignment_1_0_0_0() { return cNameAssignment_1_0_0_0; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_0_0_0_0() { return cNameValidIDParserRuleCall_1_0_0_0_0; }

		//":"
		public Keyword getColonKeyword_1_0_0_1() { return cColonKeyword_1_0_0_1; }

		//type=JvmTypeReference
		public Assignment getTypeAssignment_1_0_0_2() { return cTypeAssignment_1_0_0_2; }

		//JvmTypeReference
		public RuleCall getTypeJvmTypeReferenceParserRuleCall_1_0_0_2_0() { return cTypeJvmTypeReferenceParserRuleCall_1_0_0_2_0; }

		//name=ValidID
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_1_0() { return cNameValidIDParserRuleCall_1_1_0; }

		//("=" initialValue=XExpression)?
		public Group getGroup_2() { return cGroup_2; }

		//"="
		public Keyword getEqualsSignKeyword_2_0() { return cEqualsSignKeyword_2_0; }

		//initialValue=XExpression
		public Assignment getInitialValueAssignment_2_1() { return cInitialValueAssignment_2_1; }

		//XExpression
		public RuleCall getInitialValueXExpressionParserRuleCall_2_1_0() { return cInitialValueXExpressionParserRuleCall_2_1_0; }
	}

	public class CapacityUsesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CapacityUses");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUsesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCapacitiesUsedAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cCapacitiesUsedCapacityCrossReference_1_0 = (CrossReference)cCapacitiesUsedAssignment_1.eContents().get(0);
		private final RuleCall cCapacitiesUsedCapacityQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cCapacitiesUsedCapacityCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cCapacitiesUsedAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cCapacitiesUsedCapacityCrossReference_2_1_0 = (CrossReference)cCapacitiesUsedAssignment_2_1.eContents().get(0);
		private final RuleCall cCapacitiesUsedCapacityQualifiedNameParserRuleCall_2_1_0_1 = (RuleCall)cCapacitiesUsedCapacityCrossReference_2_1_0.eContents().get(1);
		
		//CapacityUses:
		//	"uses" capacitiesUsed+=[Capacity|QualifiedName] ("," capacitiesUsed+=[Capacity|QualifiedName])*;
		public ParserRule getRule() { return rule; }

		//"uses" capacitiesUsed+=[Capacity|QualifiedName] ("," capacitiesUsed+=[Capacity|QualifiedName])*
		public Group getGroup() { return cGroup; }

		//"uses"
		public Keyword getUsesKeyword_0() { return cUsesKeyword_0; }

		//capacitiesUsed+=[Capacity|QualifiedName]
		public Assignment getCapacitiesUsedAssignment_1() { return cCapacitiesUsedAssignment_1; }

		//[Capacity|QualifiedName]
		public CrossReference getCapacitiesUsedCapacityCrossReference_1_0() { return cCapacitiesUsedCapacityCrossReference_1_0; }

		//QualifiedName
		public RuleCall getCapacitiesUsedCapacityQualifiedNameParserRuleCall_1_0_1() { return cCapacitiesUsedCapacityQualifiedNameParserRuleCall_1_0_1; }

		//("," capacitiesUsed+=[Capacity|QualifiedName])*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//capacitiesUsed+=[Capacity|QualifiedName]
		public Assignment getCapacitiesUsedAssignment_2_1() { return cCapacitiesUsedAssignment_2_1; }

		//[Capacity|QualifiedName]
		public CrossReference getCapacitiesUsedCapacityCrossReference_2_1_0() { return cCapacitiesUsedCapacityCrossReference_2_1_0; }

		//QualifiedName
		public RuleCall getCapacitiesUsedCapacityQualifiedNameParserRuleCall_2_1_0_1() { return cCapacitiesUsedCapacityQualifiedNameParserRuleCall_2_1_0_1; }
	}

	public class BehaviorUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BehaviorUnit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEventAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cEventEventCrossReference_1_0 = (CrossReference)cEventAssignment_1.eContents().get(0);
		private final RuleCall cEventEventQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cEventEventCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cGuardAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cGuardXExpressionParserRuleCall_2_1_0 = (RuleCall)cGuardAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cBodyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBodyXBlockExpressionParserRuleCall_3_0 = (RuleCall)cBodyAssignment_3.eContents().get(0);
		
		//BehaviorUnit:
		//	"on" event=[Event|QualifiedName] ("[" guard=XExpression "]")? body=XBlockExpression;
		public ParserRule getRule() { return rule; }

		//"on" event=[Event|QualifiedName] ("[" guard=XExpression "]")? body=XBlockExpression
		public Group getGroup() { return cGroup; }

		//"on"
		public Keyword getOnKeyword_0() { return cOnKeyword_0; }

		//event=[Event|QualifiedName]
		public Assignment getEventAssignment_1() { return cEventAssignment_1; }

		//[Event|QualifiedName]
		public CrossReference getEventEventCrossReference_1_0() { return cEventEventCrossReference_1_0; }

		//QualifiedName
		public RuleCall getEventEventQualifiedNameParserRuleCall_1_0_1() { return cEventEventQualifiedNameParserRuleCall_1_0_1; }

		//("[" guard=XExpression "]")?
		public Group getGroup_2() { return cGroup_2; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2_0() { return cLeftSquareBracketKeyword_2_0; }

		//guard=XExpression
		public Assignment getGuardAssignment_2_1() { return cGuardAssignment_2_1; }

		//XExpression
		public RuleCall getGuardXExpressionParserRuleCall_2_1_0() { return cGuardXExpressionParserRuleCall_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2_2() { return cRightSquareBracketKeyword_2_2; }

		//body=XBlockExpression
		public Assignment getBodyAssignment_3() { return cBodyAssignment_3; }

		//XBlockExpression
		public RuleCall getBodyXBlockExpressionParserRuleCall_3_0() { return cBodyXBlockExpressionParserRuleCall_3_0; }
	}

	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Action");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSignatureAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSignatureActionSignatureParserRuleCall_0_0 = (RuleCall)cSignatureAssignment_0.eContents().get(0);
		private final Assignment cBodyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBodyXBlockExpressionParserRuleCall_1_0 = (RuleCall)cBodyAssignment_1.eContents().get(0);
		
		//Action:
		//	signature=ActionSignature body=XBlockExpression;
		public ParserRule getRule() { return rule; }

		//signature=ActionSignature body=XBlockExpression
		public Group getGroup() { return cGroup; }

		//signature=ActionSignature
		public Assignment getSignatureAssignment_0() { return cSignatureAssignment_0; }

		//ActionSignature
		public RuleCall getSignatureActionSignatureParserRuleCall_0_0() { return cSignatureActionSignatureParserRuleCall_0_0; }

		//body=XBlockExpression
		public Assignment getBodyAssignment_1() { return cBodyAssignment_1; }

		//XBlockExpression
		public RuleCall getBodyXBlockExpressionParserRuleCall_1_0() { return cBodyXBlockExpressionParserRuleCall_1_0; }
	}

	public class ActionSignatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ActionSignature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cParamsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cParamsParameterParserRuleCall_2_1_0 = (RuleCall)cParamsAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cParamsAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cParamsParameterParserRuleCall_2_2_1_0 = (RuleCall)cParamsAssignment_2_2_1.eContents().get(0);
		private final Assignment cVarargsAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final Keyword cVarargsFullStopFullStopFullStopKeyword_2_3_0 = (Keyword)cVarargsAssignment_2_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTypeAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTypeJvmTypeReferenceParserRuleCall_3_1_0 = (RuleCall)cTypeAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cFiresKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cFiredEventsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cFiredEventsEventCrossReference_4_1_0 = (CrossReference)cFiredEventsAssignment_4_1.eContents().get(0);
		private final RuleCall cFiredEventsEventQualifiedNameParserRuleCall_4_1_0_1 = (RuleCall)cFiredEventsEventCrossReference_4_1_0.eContents().get(1);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cFiredEventsAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final CrossReference cFiredEventsEventCrossReference_4_2_1_0 = (CrossReference)cFiredEventsAssignment_4_2_1.eContents().get(0);
		private final RuleCall cFiredEventsEventQualifiedNameParserRuleCall_4_2_1_0_1 = (RuleCall)cFiredEventsEventCrossReference_4_2_1_0.eContents().get(1);
		
		//ActionSignature:
		//	"def" name=ValidID ("(" params+=Parameter ("," params+=Parameter)* varargs?="..."? ")")? (":" type=JvmTypeReference)?
		//	("fires" firedEvents+=[Event|QualifiedName] ("," firedEvents+=[Event|QualifiedName])*)?;
		public ParserRule getRule() { return rule; }

		//"def" name=ValidID ("(" params+=Parameter ("," params+=Parameter)* varargs?="..."? ")")? (":" type=JvmTypeReference)?
		//("fires" firedEvents+=[Event|QualifiedName] ("," firedEvents+=[Event|QualifiedName])*)?
		public Group getGroup() { return cGroup; }

		//"def"
		public Keyword getDefKeyword_0() { return cDefKeyword_0; }

		//name=ValidID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_0() { return cNameValidIDParserRuleCall_1_0; }

		//("(" params+=Parameter ("," params+=Parameter)* varargs?="..."? ")")?
		public Group getGroup_2() { return cGroup_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//params+=Parameter
		public Assignment getParamsAssignment_2_1() { return cParamsAssignment_2_1; }

		//Parameter
		public RuleCall getParamsParameterParserRuleCall_2_1_0() { return cParamsParameterParserRuleCall_2_1_0; }

		//("," params+=Parameter)*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }

		//params+=Parameter
		public Assignment getParamsAssignment_2_2_1() { return cParamsAssignment_2_2_1; }

		//Parameter
		public RuleCall getParamsParameterParserRuleCall_2_2_1_0() { return cParamsParameterParserRuleCall_2_2_1_0; }

		//varargs?="..."?
		public Assignment getVarargsAssignment_2_3() { return cVarargsAssignment_2_3; }

		//"..."
		public Keyword getVarargsFullStopFullStopFullStopKeyword_2_3_0() { return cVarargsFullStopFullStopFullStopKeyword_2_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_4() { return cRightParenthesisKeyword_2_4; }

		//(":" type=JvmTypeReference)?
		public Group getGroup_3() { return cGroup_3; }

		//":"
		public Keyword getColonKeyword_3_0() { return cColonKeyword_3_0; }

		//type=JvmTypeReference
		public Assignment getTypeAssignment_3_1() { return cTypeAssignment_3_1; }

		//JvmTypeReference
		public RuleCall getTypeJvmTypeReferenceParserRuleCall_3_1_0() { return cTypeJvmTypeReferenceParserRuleCall_3_1_0; }

		//("fires" firedEvents+=[Event|QualifiedName] ("," firedEvents+=[Event|QualifiedName])*)?
		public Group getGroup_4() { return cGroup_4; }

		//"fires"
		public Keyword getFiresKeyword_4_0() { return cFiresKeyword_4_0; }

		//firedEvents+=[Event|QualifiedName]
		public Assignment getFiredEventsAssignment_4_1() { return cFiredEventsAssignment_4_1; }

		//[Event|QualifiedName]
		public CrossReference getFiredEventsEventCrossReference_4_1_0() { return cFiredEventsEventCrossReference_4_1_0; }

		//QualifiedName
		public RuleCall getFiredEventsEventQualifiedNameParserRuleCall_4_1_0_1() { return cFiredEventsEventQualifiedNameParserRuleCall_4_1_0_1; }

		//("," firedEvents+=[Event|QualifiedName])*
		public Group getGroup_4_2() { return cGroup_4_2; }

		//","
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }

		//firedEvents+=[Event|QualifiedName]
		public Assignment getFiredEventsAssignment_4_2_1() { return cFiredEventsAssignment_4_2_1; }

		//[Event|QualifiedName]
		public CrossReference getFiredEventsEventCrossReference_4_2_1_0() { return cFiredEventsEventCrossReference_4_2_1_0; }

		//QualifiedName
		public RuleCall getFiredEventsEventQualifiedNameParserRuleCall_4_2_1_0_1() { return cFiredEventsEventQualifiedNameParserRuleCall_4_2_1_0_1; }
	}

	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameValidIDParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cParameterTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParameterTypeJvmTypeReferenceParserRuleCall_2_0 = (RuleCall)cParameterTypeAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cDefaultValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cDefaultValueXLiteralParserRuleCall_3_1_0 = (RuleCall)cDefaultValueAssignment_3_1.eContents().get(0);
		
		//Parameter:
		//	name=ValidID ":" parameterType=JvmTypeReference ("=" defaultValue=XLiteral)?;
		public ParserRule getRule() { return rule; }

		//name=ValidID ":" parameterType=JvmTypeReference ("=" defaultValue=XLiteral)?
		public Group getGroup() { return cGroup; }

		//name=ValidID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_0_0() { return cNameValidIDParserRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//parameterType=JvmTypeReference
		public Assignment getParameterTypeAssignment_2() { return cParameterTypeAssignment_2; }

		//JvmTypeReference
		public RuleCall getParameterTypeJvmTypeReferenceParserRuleCall_2_0() { return cParameterTypeJvmTypeReferenceParserRuleCall_2_0; }

		//("=" defaultValue=XLiteral)?
		public Group getGroup_3() { return cGroup_3; }

		//"="
		public Keyword getEqualsSignKeyword_3_0() { return cEqualsSignKeyword_3_0; }

		//defaultValue=XLiteral
		public Assignment getDefaultValueAssignment_3_1() { return cDefaultValueAssignment_3_1; }

		//XLiteral
		public RuleCall getDefaultValueXLiteralParserRuleCall_3_1_0() { return cDefaultValueXLiteralParserRuleCall_3_1_0; }
	}

	public class RequiredCapacityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RequiredCapacity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRequiresKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRequiredCapacitiesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cRequiredCapacitiesCapacityCrossReference_1_0 = (CrossReference)cRequiredCapacitiesAssignment_1.eContents().get(0);
		private final RuleCall cRequiredCapacitiesCapacityQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cRequiredCapacitiesCapacityCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cRequiredCapacitiesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cRequiredCapacitiesCapacityCrossReference_2_1_0 = (CrossReference)cRequiredCapacitiesAssignment_2_1.eContents().get(0);
		private final RuleCall cRequiredCapacitiesCapacityQualifiedNameParserRuleCall_2_1_0_1 = (RuleCall)cRequiredCapacitiesCapacityCrossReference_2_1_0.eContents().get(1);
		
		//RequiredCapacity:
		//	"requires" requiredCapacities+=[Capacity|QualifiedName] ("," requiredCapacities+=[Capacity|QualifiedName])*;
		public ParserRule getRule() { return rule; }

		//"requires" requiredCapacities+=[Capacity|QualifiedName] ("," requiredCapacities+=[Capacity|QualifiedName])*
		public Group getGroup() { return cGroup; }

		//"requires"
		public Keyword getRequiresKeyword_0() { return cRequiresKeyword_0; }

		//requiredCapacities+=[Capacity|QualifiedName]
		public Assignment getRequiredCapacitiesAssignment_1() { return cRequiredCapacitiesAssignment_1; }

		//[Capacity|QualifiedName]
		public CrossReference getRequiredCapacitiesCapacityCrossReference_1_0() { return cRequiredCapacitiesCapacityCrossReference_1_0; }

		//QualifiedName
		public RuleCall getRequiredCapacitiesCapacityQualifiedNameParserRuleCall_1_0_1() { return cRequiredCapacitiesCapacityQualifiedNameParserRuleCall_1_0_1; }

		//("," requiredCapacities+=[Capacity|QualifiedName])*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//requiredCapacities+=[Capacity|QualifiedName]
		public Assignment getRequiredCapacitiesAssignment_2_1() { return cRequiredCapacitiesAssignment_2_1; }

		//[Capacity|QualifiedName]
		public CrossReference getRequiredCapacitiesCapacityCrossReference_2_1_0() { return cRequiredCapacitiesCapacityCrossReference_2_1_0; }

		//QualifiedName
		public RuleCall getRequiredCapacitiesCapacityQualifiedNameParserRuleCall_2_1_0_1() { return cRequiredCapacitiesCapacityQualifiedNameParserRuleCall_2_1_0_1; }
	}

	public class SkillElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Skill");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSkillKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cImplementsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cImplementedCapacitiesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cImplementedCapacitiesCapacityCrossReference_3_0 = (CrossReference)cImplementedCapacitiesAssignment_3.eContents().get(0);
		private final RuleCall cImplementedCapacitiesCapacityQualifiedNameParserRuleCall_3_0_1 = (RuleCall)cImplementedCapacitiesCapacityCrossReference_3_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cImplementedCapacitiesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cImplementedCapacitiesCapacityCrossReference_4_1_0 = (CrossReference)cImplementedCapacitiesAssignment_4_1.eContents().get(0);
		private final RuleCall cImplementedCapacitiesCapacityQualifiedNameParserRuleCall_4_1_0_1 = (RuleCall)cImplementedCapacitiesCapacityCrossReference_4_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cFeaturesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cFeaturesSkillFeatureParserRuleCall_6_0 = (RuleCall)cFeaturesAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Skill:
		//	"skill" name=ValidID "implements" implementedCapacities+=[Capacity|QualifiedName] (","
		//	implementedCapacities+=[Capacity|QualifiedName])* "{" features+=SkillFeature* "}";
		public ParserRule getRule() { return rule; }

		//"skill" name=ValidID "implements" implementedCapacities+=[Capacity|QualifiedName] (","
		//implementedCapacities+=[Capacity|QualifiedName])* "{" features+=SkillFeature* "}"
		public Group getGroup() { return cGroup; }

		//"skill"
		public Keyword getSkillKeyword_0() { return cSkillKeyword_0; }

		//name=ValidID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_0() { return cNameValidIDParserRuleCall_1_0; }

		//"implements"
		public Keyword getImplementsKeyword_2() { return cImplementsKeyword_2; }

		//implementedCapacities+=[Capacity|QualifiedName]
		public Assignment getImplementedCapacitiesAssignment_3() { return cImplementedCapacitiesAssignment_3; }

		//[Capacity|QualifiedName]
		public CrossReference getImplementedCapacitiesCapacityCrossReference_3_0() { return cImplementedCapacitiesCapacityCrossReference_3_0; }

		//QualifiedName
		public RuleCall getImplementedCapacitiesCapacityQualifiedNameParserRuleCall_3_0_1() { return cImplementedCapacitiesCapacityQualifiedNameParserRuleCall_3_0_1; }

		//("," implementedCapacities+=[Capacity|QualifiedName])*
		public Group getGroup_4() { return cGroup_4; }

		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//implementedCapacities+=[Capacity|QualifiedName]
		public Assignment getImplementedCapacitiesAssignment_4_1() { return cImplementedCapacitiesAssignment_4_1; }

		//[Capacity|QualifiedName]
		public CrossReference getImplementedCapacitiesCapacityCrossReference_4_1_0() { return cImplementedCapacitiesCapacityCrossReference_4_1_0; }

		//QualifiedName
		public RuleCall getImplementedCapacitiesCapacityQualifiedNameParserRuleCall_4_1_0_1() { return cImplementedCapacitiesCapacityQualifiedNameParserRuleCall_4_1_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//features+=SkillFeature*
		public Assignment getFeaturesAssignment_6() { return cFeaturesAssignment_6; }

		//SkillFeature
		public RuleCall getFeaturesSkillFeatureParserRuleCall_6_0() { return cFeaturesSkillFeatureParserRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class SkillFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SkillFeature");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAttributeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cActionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cRequiredCapacityParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cConstructorParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cCapacityUsesParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//SkillFeature:
		//	Attribute | Action | RequiredCapacity | Constructor | CapacityUses;
		public ParserRule getRule() { return rule; }

		//Attribute | Action | RequiredCapacity | Constructor | CapacityUses
		public Alternatives getAlternatives() { return cAlternatives; }

		//Attribute
		public RuleCall getAttributeParserRuleCall_0() { return cAttributeParserRuleCall_0; }

		//Action
		public RuleCall getActionParserRuleCall_1() { return cActionParserRuleCall_1; }

		//RequiredCapacity
		public RuleCall getRequiredCapacityParserRuleCall_2() { return cRequiredCapacityParserRuleCall_2; }

		//Constructor
		public RuleCall getConstructorParserRuleCall_3() { return cConstructorParserRuleCall_3; }

		//CapacityUses
		public RuleCall getCapacityUsesParserRuleCall_4() { return cCapacityUsesParserRuleCall_4; }
	}

	public class ConstructorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Constructor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNewKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cParamsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParamsParameterParserRuleCall_1_1_0 = (RuleCall)cParamsAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cParamsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cParamsParameterParserRuleCall_1_2_1_0 = (RuleCall)cParamsAssignment_1_2_1.eContents().get(0);
		private final Assignment cVarargsAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final Keyword cVarargsFullStopFullStopFullStopKeyword_1_3_0 = (Keyword)cVarargsAssignment_1_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Assignment cBodyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBodyXBlockExpressionParserRuleCall_2_0 = (RuleCall)cBodyAssignment_2.eContents().get(0);
		
		//Constructor:
		//	"new" ("(" params+=Parameter ("," params+=Parameter)* varargs?="..."? ")")? body=XBlockExpression;
		public ParserRule getRule() { return rule; }

		//"new" ("(" params+=Parameter ("," params+=Parameter)* varargs?="..."? ")")? body=XBlockExpression
		public Group getGroup() { return cGroup; }

		//"new"
		public Keyword getNewKeyword_0() { return cNewKeyword_0; }

		//("(" params+=Parameter ("," params+=Parameter)* varargs?="..."? ")")?
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//params+=Parameter
		public Assignment getParamsAssignment_1_1() { return cParamsAssignment_1_1; }

		//Parameter
		public RuleCall getParamsParameterParserRuleCall_1_1_0() { return cParamsParameterParserRuleCall_1_1_0; }

		//("," params+=Parameter)*
		public Group getGroup_1_2() { return cGroup_1_2; }

		//","
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }

		//params+=Parameter
		public Assignment getParamsAssignment_1_2_1() { return cParamsAssignment_1_2_1; }

		//Parameter
		public RuleCall getParamsParameterParserRuleCall_1_2_1_0() { return cParamsParameterParserRuleCall_1_2_1_0; }

		//varargs?="..."?
		public Assignment getVarargsAssignment_1_3() { return cVarargsAssignment_1_3; }

		//"..."
		public Keyword getVarargsFullStopFullStopFullStopKeyword_1_3_0() { return cVarargsFullStopFullStopFullStopKeyword_1_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_4() { return cRightParenthesisKeyword_1_4; }

		//body=XBlockExpression
		public Assignment getBodyAssignment_2() { return cBodyAssignment_2; }

		//XBlockExpression
		public RuleCall getBodyXBlockExpressionParserRuleCall_2_0() { return cBodyXBlockExpressionParserRuleCall_2_0; }
	}

	public class XVariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XVariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXVariableDeclarationAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cWriteableAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final Keyword cWriteableVarKeyword_1_0_0 = (Keyword)cWriteableAssignment_1_0.eContents().get(0);
		private final Keyword cValKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Group cGroup_2_0_0 = (Group)cGroup_2_0.eContents().get(0);
		private final Assignment cNameAssignment_2_0_0_0 = (Assignment)cGroup_2_0_0.eContents().get(0);
		private final RuleCall cNameValidIDParserRuleCall_2_0_0_0_0 = (RuleCall)cNameAssignment_2_0_0_0.eContents().get(0);
		private final Keyword cColonKeyword_2_0_0_1 = (Keyword)cGroup_2_0_0.eContents().get(1);
		private final Assignment cTypeAssignment_2_0_0_2 = (Assignment)cGroup_2_0_0.eContents().get(2);
		private final RuleCall cTypeJvmTypeReferenceParserRuleCall_2_0_0_2_0 = (RuleCall)cTypeAssignment_2_0_0_2.eContents().get(0);
		private final Assignment cNameAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_2_1_0 = (RuleCall)cNameAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cRightAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cRightXExpressionParserRuleCall_3_1_0 = (RuleCall)cRightAssignment_3_1.eContents().get(0);
		
		//XVariableDeclaration returns xbase::XExpression:
		//	{xbase::XVariableDeclaration} (writeable?="var" | "val") (=> (name=ValidID ":" type=JvmTypeReference) | name=ValidID)
		//	("=" right=XExpression)?;
		public ParserRule getRule() { return rule; }

		//{xbase::XVariableDeclaration} (writeable?="var" | "val") (=> (name=ValidID ":" type=JvmTypeReference) | name=ValidID)
		//("=" right=XExpression)?
		public Group getGroup() { return cGroup; }

		//{xbase::XVariableDeclaration}
		public Action getXVariableDeclarationAction_0() { return cXVariableDeclarationAction_0; }

		//writeable?="var" | "val"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//writeable?="var"
		public Assignment getWriteableAssignment_1_0() { return cWriteableAssignment_1_0; }

		//"var"
		public Keyword getWriteableVarKeyword_1_0_0() { return cWriteableVarKeyword_1_0_0; }

		//"val"
		public Keyword getValKeyword_1_1() { return cValKeyword_1_1; }

		//=> (name=ValidID ":" type=JvmTypeReference) | name=ValidID
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//=> (name=ValidID ":" type=JvmTypeReference)
		public Group getGroup_2_0() { return cGroup_2_0; }

		//name=ValidID ":" type=JvmTypeReference
		public Group getGroup_2_0_0() { return cGroup_2_0_0; }

		//name=ValidID
		public Assignment getNameAssignment_2_0_0_0() { return cNameAssignment_2_0_0_0; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_0_0_0_0() { return cNameValidIDParserRuleCall_2_0_0_0_0; }

		//":"
		public Keyword getColonKeyword_2_0_0_1() { return cColonKeyword_2_0_0_1; }

		//type=JvmTypeReference
		public Assignment getTypeAssignment_2_0_0_2() { return cTypeAssignment_2_0_0_2; }

		//JvmTypeReference
		public RuleCall getTypeJvmTypeReferenceParserRuleCall_2_0_0_2_0() { return cTypeJvmTypeReferenceParserRuleCall_2_0_0_2_0; }

		//name=ValidID
		public Assignment getNameAssignment_2_1() { return cNameAssignment_2_1; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_1_0() { return cNameValidIDParserRuleCall_2_1_0; }

		//("=" right=XExpression)?
		public Group getGroup_3() { return cGroup_3; }

		//"="
		public Keyword getEqualsSignKeyword_3_0() { return cEqualsSignKeyword_3_0; }

		//right=XExpression
		public Assignment getRightAssignment_3_1() { return cRightAssignment_3_1; }

		//XExpression
		public RuleCall getRightXExpressionParserRuleCall_3_1_0() { return cRightXExpressionParserRuleCall_3_1_0; }
	}

	public class JvmFormalParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JvmFormalParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cJvmFormalParameterAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cParameterTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cParameterTypeJvmTypeReferenceParserRuleCall_2_1_0 = (RuleCall)cParameterTypeAssignment_2_1.eContents().get(0);
		
		//JvmFormalParameter returns jvm::JvmFormalParameter:
		//	{jvm::JvmFormalParameter} name=ValidID (":" parameterType=JvmTypeReference)?;
		public ParserRule getRule() { return rule; }

		//{jvm::JvmFormalParameter} name=ValidID (":" parameterType=JvmTypeReference)?
		public Group getGroup() { return cGroup; }

		//{jvm::JvmFormalParameter}
		public Action getJvmFormalParameterAction_0() { return cJvmFormalParameterAction_0; }

		//name=ValidID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_0() { return cNameValidIDParserRuleCall_1_0; }

		//(=> ":" parameterType=JvmTypeReference)?
		public Group getGroup_2() { return cGroup_2; }

		//=> ":"
		public Keyword getColonKeyword_2_0() { return cColonKeyword_2_0; }

		//parameterType=JvmTypeReference
		public Assignment getParameterTypeAssignment_2_1() { return cParameterTypeAssignment_2_1; }

		//JvmTypeReference
		public RuleCall getParameterTypeJvmTypeReferenceParserRuleCall_2_1_0() { return cParameterTypeJvmTypeReferenceParserRuleCall_2_1_0; }
	}

	public class FullJvmFormalParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FullJvmFormalParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cJvmFormalParameterAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cParameterTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cParameterTypeJvmTypeReferenceParserRuleCall_3_0 = (RuleCall)cParameterTypeAssignment_3.eContents().get(0);
		
		//FullJvmFormalParameter returns jvm::JvmFormalParameter:
		//	{jvm::JvmFormalParameter} name=ValidID ":" parameterType=JvmTypeReference;
		public ParserRule getRule() { return rule; }

		//{jvm::JvmFormalParameter} name=ValidID ":" parameterType=JvmTypeReference
		public Group getGroup() { return cGroup; }

		//{jvm::JvmFormalParameter}
		public Action getJvmFormalParameterAction_0() { return cJvmFormalParameterAction_0; }

		//name=ValidID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_0() { return cNameValidIDParserRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//parameterType=JvmTypeReference
		public Assignment getParameterTypeAssignment_3() { return cParameterTypeAssignment_3; }

		//JvmTypeReference
		public RuleCall getParameterTypeJvmTypeReferenceParserRuleCall_3_0() { return cParameterTypeJvmTypeReferenceParserRuleCall_3_0; }
	}

	public class ForLoopFormalParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ForLoopFormalParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cJvmFormalParameterAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cAsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cParameterTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cParameterTypeJvmTypeReferenceParserRuleCall_2_1_0 = (RuleCall)cParameterTypeAssignment_2_1.eContents().get(0);
		
		//ForLoopFormalParameter returns jvm::JvmFormalParameter:
		//	{jvm::JvmFormalParameter} name=ValidID ("as" parameterType=JvmTypeReference)?;
		public ParserRule getRule() { return rule; }

		//{jvm::JvmFormalParameter} name=ValidID ("as" parameterType=JvmTypeReference)?
		public Group getGroup() { return cGroup; }

		//{jvm::JvmFormalParameter}
		public Action getJvmFormalParameterAction_0() { return cJvmFormalParameterAction_0; }

		//name=ValidID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_0() { return cNameValidIDParserRuleCall_1_0; }

		//("as" parameterType=JvmTypeReference)?
		public Group getGroup_2() { return cGroup_2; }

		//"as"
		public Keyword getAsKeyword_2_0() { return cAsKeyword_2_0; }

		//parameterType=JvmTypeReference
		public Assignment getParameterTypeAssignment_2_1() { return cParameterTypeAssignment_2_1; }

		//JvmTypeReference
		public RuleCall getParameterTypeJvmTypeReferenceParserRuleCall_2_1_0() { return cParameterTypeJvmTypeReferenceParserRuleCall_2_1_0; }
	}

	public class XForLoopExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XForLoopExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXForLoopExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cForKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDeclaredParamAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDeclaredParamForLoopFormalParameterParserRuleCall_3_0 = (RuleCall)cDeclaredParamAssignment_3.eContents().get(0);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cForExpressionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cForExpressionXExpressionParserRuleCall_5_0 = (RuleCall)cForExpressionAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cEachExpressionAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cEachExpressionXExpressionParserRuleCall_7_0 = (RuleCall)cEachExpressionAssignment_7.eContents().get(0);
		
		//XForLoopExpression returns xbase::XExpression:
		//	{xbase::XForLoopExpression} "for" "(" declaredParam=ForLoopFormalParameter ":" forExpression=XExpression ")"
		//	eachExpression=XExpression;
		public ParserRule getRule() { return rule; }

		//{xbase::XForLoopExpression} "for" "(" declaredParam=ForLoopFormalParameter ":" forExpression=XExpression ")"
		//eachExpression=XExpression
		public Group getGroup() { return cGroup; }

		//{xbase::XForLoopExpression}
		public Action getXForLoopExpressionAction_0() { return cXForLoopExpressionAction_0; }

		//"for"
		public Keyword getForKeyword_1() { return cForKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//declaredParam=ForLoopFormalParameter
		public Assignment getDeclaredParamAssignment_3() { return cDeclaredParamAssignment_3; }

		//ForLoopFormalParameter
		public RuleCall getDeclaredParamForLoopFormalParameterParserRuleCall_3_0() { return cDeclaredParamForLoopFormalParameterParserRuleCall_3_0; }

		//":"
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }

		//forExpression=XExpression
		public Assignment getForExpressionAssignment_5() { return cForExpressionAssignment_5; }

		//XExpression
		public RuleCall getForExpressionXExpressionParserRuleCall_5_0() { return cForExpressionXExpressionParserRuleCall_5_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }

		//eachExpression=XExpression
		public Assignment getEachExpressionAssignment_7() { return cEachExpressionAssignment_7; }

		//XExpression
		public RuleCall getEachExpressionXExpressionParserRuleCall_7_0() { return cEachExpressionXExpressionParserRuleCall_7_0; }
	}
	
	
	private ModelElements pModel;
	private AbstractElementElements pAbstractElement;
	private EventElements pEvent;
	private CapacityElements pCapacity;
	private AgentElements pAgent;
	private BehaviorElements pBehavior;
	private EventFeatureElements pEventFeature;
	private AgentFeatureElements pAgentFeature;
	private BehaviorFeatureElements pBehaviorFeature;
	private AttributeElements pAttribute;
	private CapacityUsesElements pCapacityUses;
	private BehaviorUnitElements pBehaviorUnit;
	private ActionElements pAction;
	private ActionSignatureElements pActionSignature;
	private ParameterElements pParameter;
	private RequiredCapacityElements pRequiredCapacity;
	private SkillElements pSkill;
	private SkillFeatureElements pSkillFeature;
	private ConstructorElements pConstructor;
	private XVariableDeclarationElements pXVariableDeclaration;
	private JvmFormalParameterElements pJvmFormalParameter;
	private FullJvmFormalParameterElements pFullJvmFormalParameter;
	private ForLoopFormalParameterElements pForLoopFormalParameter;
	private XForLoopExpressionElements pXForLoopExpression;
	
	private final Grammar grammar;

	private XbaseGrammarAccess gaXbase;

	@Inject
	public SARLGrammarAccess(GrammarProvider grammarProvider,
		XbaseGrammarAccess gaXbase) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaXbase = gaXbase;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("io.sarl.lang.SARL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public XbaseGrammarAccess getXbaseGrammarAccess() {
		return gaXbase;
	}

	
	//Model:
	//	("package" name=QualifiedName ";"?)? importSection=XImportSection? elements+=AbstractElement*;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//AbstractElement:
	//	Event | Capacity | Agent | Behavior | Skill;
	public AbstractElementElements getAbstractElementAccess() {
		return (pAbstractElement != null) ? pAbstractElement : (pAbstractElement = new AbstractElementElements());
	}
	
	public ParserRule getAbstractElementRule() {
		return getAbstractElementAccess().getRule();
	}

	//Event:
	//	"event" name=ValidID ("extends" superType=[Event|QualifiedName])? ("{" features+=EventFeature* "}")?;
	public EventElements getEventAccess() {
		return (pEvent != null) ? pEvent : (pEvent = new EventElements());
	}
	
	public ParserRule getEventRule() {
		return getEventAccess().getRule();
	}

	//Capacity:
	//	"capacity" name=ValidID ("extends" superTypes+=[Capacity|QualifiedName] ("," superTypes+=[Capacity|QualifiedName])*)?
	//	"{" actions+=ActionSignature* "}";
	public CapacityElements getCapacityAccess() {
		return (pCapacity != null) ? pCapacity : (pCapacity = new CapacityElements());
	}
	
	public ParserRule getCapacityRule() {
		return getCapacityAccess().getRule();
	}

	//Agent:
	//	"agent" name=ValidID ("extends" superType=[Agent|QualifiedName])? "{" features+=AgentFeature* "}";
	public AgentElements getAgentAccess() {
		return (pAgent != null) ? pAgent : (pAgent = new AgentElements());
	}
	
	public ParserRule getAgentRule() {
		return getAgentAccess().getRule();
	}

	//Behavior:
	//	"behavior" name=ValidID ("extends" superType=[Behavior|QualifiedName])? "{" features+=BehaviorFeature* "}";
	public BehaviorElements getBehaviorAccess() {
		return (pBehavior != null) ? pBehavior : (pBehavior = new BehaviorElements());
	}
	
	public ParserRule getBehaviorRule() {
		return getBehaviorAccess().getRule();
	}

	//EventFeature:
	//	Attribute | Constructor;
	public EventFeatureElements getEventFeatureAccess() {
		return (pEventFeature != null) ? pEventFeature : (pEventFeature = new EventFeatureElements());
	}
	
	public ParserRule getEventFeatureRule() {
		return getEventFeatureAccess().getRule();
	}

	//AgentFeature:
	//	Attribute | BehaviorUnit | Action | CapacityUses | RequiredCapacity;
	public AgentFeatureElements getAgentFeatureAccess() {
		return (pAgentFeature != null) ? pAgentFeature : (pAgentFeature = new AgentFeatureElements());
	}
	
	public ParserRule getAgentFeatureRule() {
		return getAgentFeatureAccess().getRule();
	}

	//BehaviorFeature:
	//	Attribute | BehaviorUnit | Action | CapacityUses | RequiredCapacity | Constructor;
	public BehaviorFeatureElements getBehaviorFeatureAccess() {
		return (pBehaviorFeature != null) ? pBehaviorFeature : (pBehaviorFeature = new BehaviorFeatureElements());
	}
	
	public ParserRule getBehaviorFeatureRule() {
		return getBehaviorFeatureAccess().getRule();
	}

	//Attribute:
	//	(writeable?="var" | "val") (=> (name=ValidID ":" type=JvmTypeReference) | name=ValidID) ("="
	//	initialValue=XExpression)?;
	public AttributeElements getAttributeAccess() {
		return (pAttribute != null) ? pAttribute : (pAttribute = new AttributeElements());
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}

	//CapacityUses:
	//	"uses" capacitiesUsed+=[Capacity|QualifiedName] ("," capacitiesUsed+=[Capacity|QualifiedName])*;
	public CapacityUsesElements getCapacityUsesAccess() {
		return (pCapacityUses != null) ? pCapacityUses : (pCapacityUses = new CapacityUsesElements());
	}
	
	public ParserRule getCapacityUsesRule() {
		return getCapacityUsesAccess().getRule();
	}

	//BehaviorUnit:
	//	"on" event=[Event|QualifiedName] ("[" guard=XExpression "]")? body=XBlockExpression;
	public BehaviorUnitElements getBehaviorUnitAccess() {
		return (pBehaviorUnit != null) ? pBehaviorUnit : (pBehaviorUnit = new BehaviorUnitElements());
	}
	
	public ParserRule getBehaviorUnitRule() {
		return getBehaviorUnitAccess().getRule();
	}

	//Action:
	//	signature=ActionSignature body=XBlockExpression;
	public ActionElements getActionAccess() {
		return (pAction != null) ? pAction : (pAction = new ActionElements());
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}

	//ActionSignature:
	//	"def" name=ValidID ("(" params+=Parameter ("," params+=Parameter)* varargs?="..."? ")")? (":" type=JvmTypeReference)?
	//	("fires" firedEvents+=[Event|QualifiedName] ("," firedEvents+=[Event|QualifiedName])*)?;
	public ActionSignatureElements getActionSignatureAccess() {
		return (pActionSignature != null) ? pActionSignature : (pActionSignature = new ActionSignatureElements());
	}
	
	public ParserRule getActionSignatureRule() {
		return getActionSignatureAccess().getRule();
	}

	//Parameter:
	//	name=ValidID ":" parameterType=JvmTypeReference ("=" defaultValue=XLiteral)?;
	public ParameterElements getParameterAccess() {
		return (pParameter != null) ? pParameter : (pParameter = new ParameterElements());
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}

	//RequiredCapacity:
	//	"requires" requiredCapacities+=[Capacity|QualifiedName] ("," requiredCapacities+=[Capacity|QualifiedName])*;
	public RequiredCapacityElements getRequiredCapacityAccess() {
		return (pRequiredCapacity != null) ? pRequiredCapacity : (pRequiredCapacity = new RequiredCapacityElements());
	}
	
	public ParserRule getRequiredCapacityRule() {
		return getRequiredCapacityAccess().getRule();
	}

	//Skill:
	//	"skill" name=ValidID "implements" implementedCapacities+=[Capacity|QualifiedName] (","
	//	implementedCapacities+=[Capacity|QualifiedName])* "{" features+=SkillFeature* "}";
	public SkillElements getSkillAccess() {
		return (pSkill != null) ? pSkill : (pSkill = new SkillElements());
	}
	
	public ParserRule getSkillRule() {
		return getSkillAccess().getRule();
	}

	//SkillFeature:
	//	Attribute | Action | RequiredCapacity | Constructor | CapacityUses;
	public SkillFeatureElements getSkillFeatureAccess() {
		return (pSkillFeature != null) ? pSkillFeature : (pSkillFeature = new SkillFeatureElements());
	}
	
	public ParserRule getSkillFeatureRule() {
		return getSkillFeatureAccess().getRule();
	}

	//Constructor:
	//	"new" ("(" params+=Parameter ("," params+=Parameter)* varargs?="..."? ")")? body=XBlockExpression;
	public ConstructorElements getConstructorAccess() {
		return (pConstructor != null) ? pConstructor : (pConstructor = new ConstructorElements());
	}
	
	public ParserRule getConstructorRule() {
		return getConstructorAccess().getRule();
	}

	//XVariableDeclaration returns xbase::XExpression:
	//	{xbase::XVariableDeclaration} (writeable?="var" | "val") (=> (name=ValidID ":" type=JvmTypeReference) | name=ValidID)
	//	("=" right=XExpression)?;
	public XVariableDeclarationElements getXVariableDeclarationAccess() {
		return (pXVariableDeclaration != null) ? pXVariableDeclaration : (pXVariableDeclaration = new XVariableDeclarationElements());
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}

	//JvmFormalParameter returns jvm::JvmFormalParameter:
	//	{jvm::JvmFormalParameter} name=ValidID (":" parameterType=JvmTypeReference)?;
	public JvmFormalParameterElements getJvmFormalParameterAccess() {
		return (pJvmFormalParameter != null) ? pJvmFormalParameter : (pJvmFormalParameter = new JvmFormalParameterElements());
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}

	//FullJvmFormalParameter returns jvm::JvmFormalParameter:
	//	{jvm::JvmFormalParameter} name=ValidID ":" parameterType=JvmTypeReference;
	public FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return (pFullJvmFormalParameter != null) ? pFullJvmFormalParameter : (pFullJvmFormalParameter = new FullJvmFormalParameterElements());
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}

	//ForLoopFormalParameter returns jvm::JvmFormalParameter:
	//	{jvm::JvmFormalParameter} name=ValidID ("as" parameterType=JvmTypeReference)?;
	public ForLoopFormalParameterElements getForLoopFormalParameterAccess() {
		return (pForLoopFormalParameter != null) ? pForLoopFormalParameter : (pForLoopFormalParameter = new ForLoopFormalParameterElements());
	}
	
	public ParserRule getForLoopFormalParameterRule() {
		return getForLoopFormalParameterAccess().getRule();
	}

	//XForLoopExpression returns xbase::XExpression:
	//	{xbase::XForLoopExpression} "for" "(" declaredParam=ForLoopFormalParameter ":" forExpression=XExpression ")"
	//	eachExpression=XExpression;
	public XForLoopExpressionElements getXForLoopExpressionAccess() {
		return (pXForLoopExpression != null) ? pXForLoopExpression : (pXForLoopExpression = new XForLoopExpressionElements());
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}

	//XExpression:
	//	XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaXbase.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}

	//XAssignment returns XExpression:
	//	{XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment | XOrExpression
	//	(=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign])
	//	rightOperand=XAssignment)?;
	public XbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaXbase.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}

	//OpSingleAssign:
	//	"=";
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaXbase.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}

	//OpMultiAssign:
	//	"+=" | "-=";
	public XbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaXbase.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}

	//XOrExpression returns XExpression:
	//	XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
	//	rightOperand=XAndExpression)*;
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaXbase.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}

	//OpOr:
	//	"||";
	public XbaseGrammarAccess.OpOrElements getOpOrAccess() {
		return gaXbase.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}

	//XAndExpression returns XExpression:
	//	XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
	//	rightOperand=XEqualityExpression)*;
	public XbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaXbase.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}

	//OpAnd:
	//	"&&";
	public XbaseGrammarAccess.OpAndElements getOpAndAccess() {
		return gaXbase.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}

	//XEqualityExpression returns XExpression:
	//	XRelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//	rightOperand=XRelationalExpression)*;
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaXbase.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}

	//OpEquality:
	//	"==" | "!=" | "===" | "!==";
	public XbaseGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaXbase.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}

	//XRelationalExpression returns XExpression:
	//	XOtherOperatorExpression (=> ({XInstanceOfExpression.expression=current} "instanceof") type=JvmTypeReference | =>
	//	({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
	//	rightOperand=XOtherOperatorExpression)*;
	public XbaseGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaXbase.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}

	//OpCompare:
	//	">=" | "<=" | ">" | "<";
	public XbaseGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaXbase.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}

	//XOtherOperatorExpression returns XExpression:
	//	XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//	rightOperand=XAdditiveExpression)*;
	public XbaseGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaXbase.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}

	//OpOther:
	//	"->" | "..<" | ">" ".." | ".." | "=>" | ">" (=> (">" ">") | ">") | "<" (=> ("<" "<") | "<") | "<>" | "?:" | "<=>";
	public XbaseGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaXbase.getOpOtherAccess();
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}

	//XAdditiveExpression returns XExpression:
	//	XMultiplicativeExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//	rightOperand=XMultiplicativeExpression)*;
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaXbase.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}

	//OpAdd:
	//	"+" | "-";
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaXbase.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}

	//XMultiplicativeExpression returns XExpression:
	//	XUnaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti])
	//	rightOperand=XUnaryOperation)*;
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaXbase.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}

	//OpMulti:
	//	"*" | "**" | "/" | "%";
	public XbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaXbase.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}

	//XUnaryOperation returns XExpression:
	//	{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XUnaryOperation | XCastedExpression;
	public XbaseGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaXbase.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}

	//OpUnary:
	//	"!" | "-" | "+";
	public XbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaXbase.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}

	//XCastedExpression returns XExpression:
	//	XMemberFeatureCall (=> ({XCastedExpression.target=current} "as") type=JvmTypeReference)*;
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaXbase.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}

	//XMemberFeatureCall returns XExpression:
	//	XPrimaryExpression (=> ({XAssignment.assignable=current} ("." | explicitStatic?="::")
	//	feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment | =>
	//	({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." | explicitStatic?="::")) ("<"
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//	feature=[types::JvmIdentifiableElement|FeatureCallID] (=> explicitOperationCall?="("
	//	(memberCallArguments+=XShortClosure | memberCallArguments+=XExpression ("," memberCallArguments+=XExpression)*)? ")")?
	//	memberCallArguments+=XClosure?)*;
	public XbaseGrammarAccess.XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return gaXbase.getXMemberFeatureCallAccess();
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}

	//XPrimaryExpression returns XExpression:
	//	XConstructorCall | XBlockExpression | XSwitchExpression | XFeatureCall | XLiteral | XIfExpression | XForLoopExpression
	//	| XWhileExpression | XDoWhileExpression | XThrowExpression | XReturnExpression | XTryCatchFinallyExpression |
	//	XParenthesizedExpression;
	public XbaseGrammarAccess.XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return gaXbase.getXPrimaryExpressionAccess();
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}

	//XLiteral returns XExpression:
	//	XCollectionLiteral | XClosure | XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral | XTypeLiteral;
	public XbaseGrammarAccess.XLiteralElements getXLiteralAccess() {
		return gaXbase.getXLiteralAccess();
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}

	//XCollectionLiteral:
	//	XSetLiteral | XListLiteral;
	public XbaseGrammarAccess.XCollectionLiteralElements getXCollectionLiteralAccess() {
		return gaXbase.getXCollectionLiteralAccess();
	}
	
	public ParserRule getXCollectionLiteralRule() {
		return getXCollectionLiteralAccess().getRule();
	}

	//XSetLiteral:
	//	{XSetLiteral} "#" "{" (elements+=XExpression ("," elements+=XExpression)*)? "}";
	public XbaseGrammarAccess.XSetLiteralElements getXSetLiteralAccess() {
		return gaXbase.getXSetLiteralAccess();
	}
	
	public ParserRule getXSetLiteralRule() {
		return getXSetLiteralAccess().getRule();
	}

	//XListLiteral:
	//	{XListLiteral} "#" "[" (elements+=XExpression ("," elements+=XExpression)*)? "]";
	public XbaseGrammarAccess.XListLiteralElements getXListLiteralAccess() {
		return gaXbase.getXListLiteralAccess();
	}
	
	public ParserRule getXListLiteralRule() {
		return getXListLiteralAccess().getRule();
	}

	//XClosure returns XExpression:
	//	=> ({XClosure} "[") => ((declaredFormalParameters+=JvmFormalParameter (","
	//	declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?="|")? expression=XExpressionInClosure "]";
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaXbase.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}

	//XExpressionInClosure returns XExpression:
	//	{XBlockExpression} (expressions+=XExpressionInsideBlock ";"?)*;
	public XbaseGrammarAccess.XExpressionInClosureElements getXExpressionInClosureAccess() {
		return gaXbase.getXExpressionInClosureAccess();
	}
	
	public ParserRule getXExpressionInClosureRule() {
		return getXExpressionInClosureAccess().getRule();
	}

	//XShortClosure returns XExpression:
	//	=> ({XClosure} (declaredFormalParameters+=JvmFormalParameter ("," declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?="|") expression=XExpression;
	public XbaseGrammarAccess.XShortClosureElements getXShortClosureAccess() {
		return gaXbase.getXShortClosureAccess();
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}

	//XParenthesizedExpression returns XExpression:
	//	"(" XExpression ")";
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaXbase.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}

	//XIfExpression returns XExpression:
	//	{XIfExpression} "if" "(" if=XExpression ")" then=XExpression ("else" else=XExpression)?;
	public XbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaXbase.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}

	//XSwitchExpression returns XExpression:
	//	{XSwitchExpression} "switch" (=> (localVarName=ValidID ":")? switch=XExpression | => ("(" localVarName=ValidID ":")
	//	switch=XExpression ")") "{" cases+=XCasePart+ ("default" ":" default=XExpression)? "}";
	public XbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaXbase.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}

	//XCasePart:
	//	typeGuard=JvmTypeReference? ("case" case=XExpression)? ":" then=XExpression;
	public XbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaXbase.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}

	//XWhileExpression returns XExpression:
	//	{XWhileExpression} "while" "(" predicate=XExpression ")" body=XExpression;
	public XbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaXbase.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}

	//XDoWhileExpression returns XExpression:
	//	{XDoWhileExpression} "do" body=XExpression "while" "(" predicate=XExpression ")";
	public XbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaXbase.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}

	//XBlockExpression returns XExpression:
	//	{XBlockExpression} "{" (expressions+=XExpressionInsideBlock ";"?)* "}";
	public XbaseGrammarAccess.XBlockExpressionElements getXBlockExpressionAccess() {
		return gaXbase.getXBlockExpressionAccess();
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}

	//XExpressionInsideBlock returns XExpression:
	//	XVariableDeclaration | XExpression;
	public XbaseGrammarAccess.XExpressionInsideBlockElements getXExpressionInsideBlockAccess() {
		return gaXbase.getXExpressionInsideBlockAccess();
	}
	
	public ParserRule getXExpressionInsideBlockRule() {
		return getXExpressionInsideBlockAccess().getRule();
	}

	//XFeatureCall returns XExpression:
	//	{XFeatureCall} ("<" typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?="(" (featureCallArguments+=XShortClosure
	//	| featureCallArguments+=XExpression ("," featureCallArguments+=XExpression)*)? ")")? featureCallArguments+=XClosure?;
	public XbaseGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaXbase.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}

	//FeatureCallID:
	//	ValidID | "extends" | "static" | "import" | "extension";
	public XbaseGrammarAccess.FeatureCallIDElements getFeatureCallIDAccess() {
		return gaXbase.getFeatureCallIDAccess();
	}
	
	public ParserRule getFeatureCallIDRule() {
		return getFeatureCallIDAccess().getRule();
	}

	//IdOrSuper:
	//	FeatureCallID | "super";
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaXbase.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}

	//XConstructorCall returns XExpression:
	//	{XConstructorCall} "new" constructor=[types::JvmConstructor|QualifiedName] ("<"
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")? ("("
	//	(arguments+=XShortClosure | arguments+=XExpression ("," arguments+=XExpression)*)? ")")? arguments+=XClosure?;
	public XbaseGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaXbase.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}

	//XBooleanLiteral returns XExpression:
	//	{XBooleanLiteral} ("false" | isTrue?="true");
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaXbase.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}

	//XNullLiteral returns XExpression:
	//	{XNullLiteral} "null";
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaXbase.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}

	//XNumberLiteral returns XExpression:
	//	{XNumberLiteral} value=Number;
	public XbaseGrammarAccess.XNumberLiteralElements getXNumberLiteralAccess() {
		return gaXbase.getXNumberLiteralAccess();
	}
	
	public ParserRule getXNumberLiteralRule() {
		return getXNumberLiteralAccess().getRule();
	}

	//XStringLiteral returns XExpression:
	//	{XStringLiteral} value=STRING;
	public XbaseGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaXbase.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}

	//XTypeLiteral returns XExpression:
	//	{XTypeLiteral} "typeof" "(" type=[types::JvmType|QualifiedName] arrayDimensions+=ArrayBrackets* ")";
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaXbase.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}

	//XThrowExpression returns XExpression:
	//	{XThrowExpression} "throw" expression=XExpression;
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaXbase.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}

	//XReturnExpression returns XExpression:
	//	{XReturnExpression} "return" => expression=XExpression?;
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaXbase.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}

	//XTryCatchFinallyExpression returns XExpression:
	//	{XTryCatchFinallyExpression} "try" expression=XExpression (catchClauses+=XCatchClause+ ("finally"
	//	finallyExpression=XExpression)? | "finally" finallyExpression=XExpression);
	public XbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaXbase.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}

	//XCatchClause:
	//	"catch" "(" declaredParam=FullJvmFormalParameter ")" expression=XExpression;
	public XbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaXbase.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}

	//QualifiedName:
	//	ValidID ("." ValidID)*;
	public XbaseGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaXbase.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//Number hidden():
	//	HEX | (INT | DECIMAL) ("." (INT | DECIMAL))?;
	public XbaseGrammarAccess.NumberElements getNumberAccess() {
		return gaXbase.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}

	/// **
	// * Dummy rule, for "better" downwards compatibility, since GrammarAccess generates non-static inner classes, 
	// * which makes downstream grammars break on classloading, when a rule is removed.
	// * / StaticQualifier:
	//	(ValidID "::")+;
	public XbaseGrammarAccess.StaticQualifierElements getStaticQualifierAccess() {
		return gaXbase.getStaticQualifierAccess();
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}

	//terminal HEX:
	//	("0x" | "0X") ("0".."9" | "a".."f" | "A".."F" | "_")+ ("#" (("b" | "B") ("i" | "I") | ("l" | "L")))?;
	public TerminalRule getHEXRule() {
		return gaXbase.getHEXRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9" ("0".."9" | "_")*;
	public TerminalRule getINTRule() {
		return gaXbase.getINTRule();
	} 

	//terminal DECIMAL:
	//	INT (("e" | "E") ("+" | "-")? INT)? (("b" | "B") ("i" | "I" | "d" | "D") | ("l" | "L" | "d" | "D" | "f" | "F"))?;
	public TerminalRule getDECIMALRule() {
		return gaXbase.getDECIMALRule();
	} 

	//JvmTypeReference:
	//	JvmParameterizedTypeReference => ({JvmGenericArrayTypeReference.componentType=current} ArrayBrackets)* |
	//	XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaXbase.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}

	//ArrayBrackets:
	//	"[" "]";
	public XtypeGrammarAccess.ArrayBracketsElements getArrayBracketsAccess() {
		return gaXbase.getArrayBracketsAccess();
	}
	
	public ParserRule getArrayBracketsRule() {
		return getArrayBracketsAccess().getRule();
	}

	//XFunctionTypeRef:
	//	("(" (paramTypes+=JvmTypeReference ("," paramTypes+=JvmTypeReference)*)? ")")? "=>" returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaXbase.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}

	//JvmParameterizedTypeReference:
	//	type=[JvmType|QualifiedName] ("<" arguments+=JvmArgumentTypeReference ("," arguments+=JvmArgumentTypeReference)*
	//	">")?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaXbase.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}

	//JvmArgumentTypeReference returns JvmTypeReference:
	//	JvmTypeReference | JvmWildcardTypeReference;
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaXbase.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}

	//JvmWildcardTypeReference:
	//	{JvmWildcardTypeReference} "?" (constraints+=JvmUpperBound | constraints+=JvmLowerBound)?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaXbase.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}

	//JvmUpperBound:
	//	"extends" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaXbase.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}

	//JvmUpperBoundAnded returns JvmUpperBound:
	//	"&" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaXbase.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}

	//JvmLowerBound:
	//	"super" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaXbase.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}

	//JvmTypeParameter:
	//	name=ValidID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded*)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaXbase.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}

	//QualifiedNameWithWildcard:
	//	QualifiedName "." "*";
	public XtypeGrammarAccess.QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return gaXbase.getQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}

	//ValidID:
	//	ID;
	public XtypeGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaXbase.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}

	//XImportSection:
	//	importDeclarations+=XImportDeclaration+;
	public XtypeGrammarAccess.XImportSectionElements getXImportSectionAccess() {
		return gaXbase.getXImportSectionAccess();
	}
	
	public ParserRule getXImportSectionRule() {
		return getXImportSectionAccess().getRule();
	}

	//XImportDeclaration:
	//	"import" (static?="static" extension?="extension"? importedType=[JvmDeclaredType|QualifiedName] "." "*" |
	//	importedType=[JvmDeclaredType|QualifiedName] | importedNamespace=QualifiedNameWithWildcard) ";"?;
	public XtypeGrammarAccess.XImportDeclarationElements getXImportDeclarationAccess() {
		return gaXbase.getXImportDeclarationAccess();
	}
	
	public ParserRule getXImportDeclarationRule() {
		return getXImportDeclarationAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "$" | "_") ("a".."z" | "A".."Z" | "$" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaXbase.getIDRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaXbase.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaXbase.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXbase.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaXbase.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaXbase.getANY_OTHERRule();
	} 
}
