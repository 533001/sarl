/*
 * Copyright 2014 Sebastian RODRIGUEZ, Nicolas GAUD, StÃ©phane GALLAND.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
grammar io.sarl.lang.SARL with org.eclipse.xtext.xbase.Xbase

generate sarl "http://www.sarl.io/lang/SARL"
import "http://www.eclipse.org/xtext/xbase/Xbase"

Model:
	('package' name=QualifiedName ';'?)?
	importSection=XImportSection?
	elements+=AbstractElement*
;

AbstractElement:
	Event | Capacity | Agent | Behavior | Skill
;

Event:
	'event' name=ValidID ('extends' superType=[Event|QualifiedName])? 
	('{' features+=EventFeature* '}')?
;

Capacity:
	'capacity' name=ValidID ('extends' superType=[Capacity|QualifiedName])? '{'
	actions+=ActionSignature*
	'}'
;

Agent:
	'agent' name=ValidID ('extends' superType=[Agent|QualifiedName])? '{'
	features+=AgentFeature*
	'}'
;

Behavior:
	'behavior' name=ValidID ('extends' superType=[Behavior|QualifiedName])? '{'
	features+=BehaviorFeature*
	'}'
;

EventFeature:
	Attribute | Constructor
;
	
AgentFeature:
	Attribute | BehaviorUnit | Action | CapacityUses | RequiredCapacity
;

BehaviorFeature:
	Attribute | BehaviorUnit | Action | CapacityUses | RequiredCapacity | Constructor
;

Attribute:		
	(writeable?='var' | 'val') (=>(name=ValidID ':' type=JvmTypeReference) | name=ValidID) 
	('=' initialValue=XExpression)?
;
	
CapacityUses:
	'uses' capacitiesUsed+=[Capacity|QualifiedName]
	(',' capacitiesUsed+=[Capacity|QualifiedName])*
;

BehaviorUnit:
	'on' event=[Event|QualifiedName] ('[' guard=XExpression ']')? body=XBlockExpression
;

Action:
	signature=ActionSignature body=XBlockExpression
;

ActionSignature:
	'def' name=ValidID 
	(	'(' params+=Parameter
		(',' params+=Parameter)* (varargs?='...')? ')'
	)?
	(':' type=JvmTypeReference)?
	('fires' firedEvents+=[Event|QualifiedName] (',' firedEvents+=[Event|QualifiedName])*)?
;
	
Parameter:
	 name=ValidID ':' parameterType=JvmTypeReference
;


RequiredCapacity:
	'requires' requiredCapacities+=[Capacity|QualifiedName]
	(',' requiredCapacities+=[Capacity|QualifiedName])*
;

Skill:
	'skill' name=ValidID 'implements' 
	implementedCapacities+=[Capacity|QualifiedName]
	(',' implementedCapacities+=[Capacity|QualifiedName])*
	'{' features+=SkillFeature* '}'
;

SkillFeature:
	Attribute | Action | RequiredCapacity | Constructor | CapacityUses
;
	
Constructor:
	'new'
	(	'(' params+=Parameter (',' params+=Parameter)* 
		(varargs?='...')? ')'
	)? body=XBlockExpression
;

XVariableDeclaration returns XExpression:
	{XVariableDeclaration}
	(writeable?='var'|'val')
	(=>(name=ValidID ':' type=JvmTypeReference) | name=ValidID)
	('=' right=XExpression)?
;

