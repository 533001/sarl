/*
 * Copyright 2014 Sebastian RODRIGUEZ, Nicolas GAUD, StÃ©phane GALLAND.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
grammar io.sarl.lang.SARL with org.eclipse.xtext.xbase.Xbase

generate sarl "http://www.sarl.io/lang/SARL"
import "http://www.eclipse.org/xtext/common/JavaVMTypes" as jvm
import "http://www.eclipse.org/xtext/xbase/Xbase" as xbase
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

SarlScript:
	('package' name=QualifiedName ';'?)?
	importSection=XImportSection?
	elements+=TopElement*
;

TopElement:
	Event | Capacity | Agent | Behavior | Skill 
;

// Define an interface that is providing the 'name' feature.
// This rule is declared only for generated the Java interface
// with the expected features.
// YOU SHOULD NEVER USE THIS RULE IN THE BODY OF ANTHOER RULE.
NamedElement:
	name=ValidID
;

// Define an interface that is providing the 'features' feature.
// This rule is declared only for generated the Java interface
// with the expected features.
// YOU SHOULD NEVER USE THIS RULE IN THE BODY OF ANTHOER RULE.
FeatureContainer returns NamedElement:
	{FeatureContainer}
	features+=Feature
;

// Define an interface that is a feature.
// This rule is declared only for generated the Java interface
// with the expected features.
// YOU SHOULD NEVER USE THIS RULE IN THE BODY OF ANTHOER RULE.
Feature:
	{Feature}
;

// Define an interface that is providing the 'superTypes' feature.
// This rule is declared only for generated the Java interface
// with the expected features.
// YOU SHOULD NEVER USE THIS RULE IN THE BODY OF ANTHOER RULE.
InheritingElement returns FeatureContainer:
	{InheritingElement}
	superTypes+=[InheritingElement]
;

// Define an interface that is providing the 'implementedTypes' feature.
// This rule is declared only for generated the Java interface
// with the expected features.
// YOU SHOULD NEVER USE THIS RULE IN THE BODY OF ANTHOER RULE.
ImplementingElement returns InheritingElement:
	{ImplementingElement}
	implementedTypes+=[InheritingElement]
;

Event returns InheritingElement:
	{Event}
	'event' name=ValidID ('extends' superTypes+=[Event|QualifiedName])? 
	('{' features+=EventFeature* '}')?
;

Capacity returns InheritingElement:
	{Capacity}
	'capacity' name=ValidID ('extends' superTypes+=[Capacity|QualifiedName]
		( ',' superTypes+=[Capacity|QualifiedName] )* )? 
	'{' actions+=ActionSignature* '}'
;

Agent returns InheritingElement:
	{Agent}
	'agent' name=ValidID ('extends' superTypes+=[Agent|QualifiedName])? '{'
	features+=AgentFeature*
	'}'
;

Behavior returns InheritingElement:
	{Behavior}
	'behavior' name=ValidID ('extends' superTypes+=[Behavior|QualifiedName])? '{'
	features+=BehaviorFeature*
	'}'
;

Skill returns ImplementingElement:
	{Skill}
	'skill' name=ValidID 
	('extends' superTypes+=[Skill|QualifiedName])?
	'implements' implementedTypes+=[Capacity|QualifiedName]
	(',' implementedTypes+=[Capacity|QualifiedName])*
	'{' features+=SkillFeature* '}'
;

EventFeature:
	Attribute | Constructor
;
	
AgentFeature:
	Attribute | BehaviorUnit | Action | CapacityUses | RequiredCapacity
;

BehaviorFeature:
	Attribute | BehaviorUnit | Action | CapacityUses | RequiredCapacity | Constructor
;

SkillFeature:
	Attribute | Action | RequiredCapacity | Constructor | CapacityUses
;

Attribute returns Feature:
	{Attribute}
	(writeable?='var' | 'val') (=>(name=ValidID ':' type=JvmTypeReference) | name=ValidID) 
	('=' initialValue=XExpression)?
;
	
CapacityUses returns Feature:
	{CapacityUses}
	'uses' capacitiesUsed+=[Capacity|QualifiedName]
	(',' capacitiesUsed+=[Capacity|QualifiedName])*
;

BehaviorUnit returns Feature:
	{BehaviorUnit}
	'on' event=[Event|QualifiedName] ('[' guard=XExpression ']')? body=XBlockExpression
;

RequiredCapacity returns Feature:
	{RequiredCapacity}
	'requires' requiredCapacities+=[Capacity|QualifiedName]
	(',' requiredCapacities+=[Capacity|QualifiedName])*
;
	
Constructor returns Feature:
	{Constructor}
	'new'
	(	'(' params+=FormalParameter (',' params+=FormalParameter)* 
		(varargs?='...')? ')'
	)? body=XBlockExpression
;

Action returns Feature:
	{Action}
	signature=ActionSignature body=XBlockExpression
;

ActionSignature returns Feature:
	{ActionSignature}
	'def' name=ValidID 
	(	'(' params+=FormalParameter
		(',' params+=FormalParameter)* (varargs?='...')? ')'
	)?
	(':' type=JvmTypeReference)?
	('fires' firedEvents+=[Event|QualifiedName] (',' firedEvents+=[Event|QualifiedName])*)?
;
	
FormalParameter:
	 name=ValidID ':' parameterType=JvmTypeReference 
	 ('=' defaultValue=XLiteral)?
;

XVariableDeclaration returns xbase::XExpression:
	{xbase::XVariableDeclaration}
	(writeable?='var'|'val')
	(=>(name=ValidID ':' type=JvmTypeReference) | name=ValidID)
	('=' right=XExpression)?
;

JvmFormalParameter returns jvm::JvmFormalParameter:
	{jvm::JvmFormalParameter}
	name=ValidID (=>':' parameterType=JvmTypeReference)? 
;
	
FullJvmFormalParameter returns jvm::JvmFormalParameter:
	{jvm::JvmFormalParameter}
	name=ValidID ':' parameterType=JvmTypeReference
;

LoopFormalParameter returns jvm::JvmFormalParameter:
	{jvm::JvmFormalParameter}
	name=ValidID
	( 'as' parameterType=JvmTypeReference )?
;

XForLoopExpression returns xbase::XExpression:
	{xbase::XForLoopExpression}
	'for' '(' declaredParam=LoopFormalParameter ':' forExpression=XExpression ')'
		eachExpression=XExpression
;

