/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2016 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.core

import io.sarl.core.AgentTask
import io.sarl.lang.core.EventSpace
import io.sarl.lang.core.Address
import io.sarl.lang.core.Agent
import io.sarl.lang.core.AgentContext
import io.sarl.lang.core.Behavior
import io.sarl.lang.core.Event
import io.sarl.lang.core.EventListener
import io.sarl.lang.core.Scope
import io.sarl.lang.core.Space
import io.sarl.lang.core.SpaceID
import io.sarl.lang.util.SynchronizedCollection
import io.sarl.lang.util.SynchronizedSet
import java.util.UUID

capacity ExternalContextAccess {
	/**
	 * Replies all contexts this agent is a member of, including the default context
	 */	 
	def getAllContexts : SynchronizedCollection<AgentContext>

	/**
	 * Replies the AgentContext for the given ID.
	 * The agent must have joined the context before calling this action or use its parentContextID
	 * @see io.sarl.lang.core.Agent#getParentID
	 * @see #join
	 * 
	 * @throws UnknownContextException if the context specified context is not known by the agent.
	 * @param contextID the ID of the context to get.
	 */
	def getContext(contextID : UUID): AgentContext

    /**
	 * Joins a new parent context (a new super holon).
	 * <p>
	 * The agent will be involved in the context with the ID given by <var>contextID</var>.
	 * The parameter <var>expectedDefaultSpaceID</var> is only used to check if
	 * the caller of this function knows the ID of the default space in the context to
	 * be involved in. Note that the context must already exists, and the default space
	 * inside this context must have the sams ID as <var>expectedDefaultSpaceID</var>.
	 * If the given <var>expectedDefaultSpaceID</var> does not match the ID of the
	 * default space in the context <var>contextID</var>, then the access to the context
	 * is forbidden.
	 * <p>
	 * This actions registers the agent in the default Space of the context with the
	 * ID <var>contextID</var>.
	 * . 
	 * @fires ContextJoined in its inner Context default space (Behaviors#wake).
	 * @fires MemberJoined in its parent Context default Space 
	 */
	def join(contextID : UUID, expectedDefaultSpaceID : UUID) fires ContextJoined, MemberJoined

	/**
	 * Leaves the parent's context. 
	 * @fires ContextLeft in its inner Context default space (Behaviors#wake).
	 * @fires MemberLeft in its parent Context default Space 
	 */
	def leave(contextID : UUID) fires ContextLeft, MemberLeft

	/** Replies if the given event was emitted in the given space.
	 *
	 * @param event - the event to test.
	 * @param space - the space in which the event may be.
	 * @return <code>true</code> if the given event was emitted in the
	 * given space. Otherwise <code>false</code>.
	 * @since 0.2
	 */
	def isInSpace(^event : Event, space : Space) : boolean

	/** Replies if the given event was emitted in the space with
	 * the given identifier..
	 *
	 * @param event - the event to test.
	 * @param spaceID - the identifier of the space in which the event may be.
	 * @return <code>true</code> if the given event was emitted in the
	 * space with the given identifier. Otherwise <code>false</code>.
	 * @since 0.2
	 */
	def isInSpace(^event : Event, spaceID : SpaceID) : boolean

	/** Replies if the given event was emitted in the space with
	 * the given identifier..
	 *
	 * @param event - the event to test.
	 * @param spaceID - the identifier of the space in which the event may be.
	 * @return <code>true</code> if the given event was emitted in the
	 * space with the given identifier. Otherwise <code>false</code>.
	 * @since 0.2
	 */
	def isInSpace(^event : Event, spaceID : UUID) : boolean

}

capacity InnerContextAccess {
	/** Replies the inner context.
	 */
	def getInnerContext : AgentContext
	
	/** Replies if the calling agent has other agents
	 * as members of its inner context.
	 * A member agent is an agent which is not the
	 * calling agent, and is a member of at least
	 * one space of the inner context. 
	 */
	def hasMemberAgent : boolean
	
	/** Replies the number of agents that are members
	 * of the inner context of the calling agent.
	 * A member agent is an agent which is not the
	 * calling agent, and is a member of at least
	 * one space of the inner context. 
	 */
	def getMemberAgentCount : int

	/**
	 * Replies all the member agents in the inner context.
	 * A member agent is an agent which is not the
	 * calling agent, and is a member of at least
	 * one space of the inner context. 
	 */	 
	def getMemberAgents : SynchronizedSet<UUID>

	/** Replies if the given space is the default space of the inner context.
	 *
	 * @param space - the space to test.
	 * @return <code>true</code> if the given space is the default space of
	 * the inner context. Otherwise <code>false</code>.
	 * @since 0.2
	 */
	 def isInnerDefaultSpace(space : Space) : boolean

	/** Replies if the given identifier is the identifier of the
	 * default space of the inner context.
	 *
	 * @param spaceID - the identifier to test.
	 * @return <code>true</code> if the given identifier is the identifier
	 * of the default space of the inner context. Otherwise <code>false</code>.
	 * @since 0.2
	 */
	 def isInnerDefaultSpace(spaceID : SpaceID) : boolean

	/** Replies if the given identifier is the identifier of the
	 * default space of the inner context.
	 *
	 * @param spaceID - the identifier to test.
	 * @return <code>true</code> if the given identifier is the identifier
	 * of the default space of the inner context. Otherwise <code>false</code>.
	 * @since 0.2
	 */
	 def isInnerDefaultSpace(spaceID : UUID) : boolean

	/** Replies if the given event was emitted in the default space
	 * of the inner context.
	 *
	 * @param event - the event to test.
	 * @return <code>true</code> if the given event was emitted
	 * in the default space of the inner context. Otherwise <code>false</code>.
	 * @since 0.2
	 */
	 def isInInnerDefaultSpace(^event : Event) : boolean

}

/**
* Agent behaviors management.
*/
capacity Behaviors {
	/**
	 * Register a Behavior for the owner agent.
	 * The new Behavior will react to all declared events received by the agent.
	 */
	def registerBehavior(attitude : Behavior) : Behavior
	
	/**
	 * Unregisters a behavior for the owner agent
	 */
	def unregisterBehavior(attitude : Behavior) : Behavior
	
	/**
	 * Wake the agent's behaviors reacting to the Event evt.
	 */
	def wake(evt : Event)
	
	/**
	 * Replies the interface to dispatch an event to agent's Behaviors
	 */
	def asEventListener : EventListener
}

/**
* Lifecycle related actions.
*/
capacity Lifecycle {
	/**
	 * Spawns a new member agent in the parent's context (parentID)
	 * @fires AgentSpawned inside the default context of the parent. The source of the event is this agent.
	 */
	def spawnInContext(agentClass : Class <? extends Agent>, context : AgentContext, params : Object*) : UUID fires AgentSpawned
	
	/**
	 * Spawns a new member agent in the parent's context (parentID)
	 * @fires AgentSpawned inside the default context of the parent. The source of the event is this agent.
	 */
	def spawnInContextWithID(agentClass : Class <? extends Agent>, agentID : UUID, context : AgentContext, params : Object*) : UUID fires AgentSpawned

    /**
	* Kills this agent. 
	* This action must automatically unregister this agent from the default context 
	* and therefore all its spaces including the DefaultSpace.
	* If this is a composable agent, it must not have any members before calling this action. 
	* Otherwise a RuntimeException will be thrown.  
	* @fires AgentKilled in DefaultSpace of all Contexts to which this agent belongs
	* @fires Destroy inside the agent
	* @throws RuntimeException when the agent has members
	*/
	def killMe fires AgentKilled, Destroy
}




/**
* Schedules actions in time.
*/
capacity Schedules {
	/**
	* Creates an anonymous task to execute the procedure that will be triggered after the specified delay.
	* @param delay time in milliseconds to delay the procedure execution
	* @param procedure the closure to execute.
	* @return the generated task
	*/	
	def in(delay : long, procedure : (Agent) => void ) : AgentTask

	/**
	 * Schedule a given task to be executed after the specified delay.
	 */
	def in(task : AgentTask, delay : long, procedure : (Agent) => void) : AgentTask

	/**
	 * Create a named task that can be retrieved and schedule later.
	 */
	def task(name : String) : AgentTask

	/**
     * Attempts to cancel execution of this task.  This attempt will
     * fail if the task has already completed, has already been cancelled,
     * or could not be cancelled for some other reason. If successful,
     * and this task has not started when <tt>cancel</tt> is called,
     * this task should never run.  If the task has already started,
     * then the <tt>mayInterruptIfRunning</tt> parameter determines
     * whether the thread executing this task should be interrupted in
     * an attempt to stop the task.
     * <p>
     * This function interrupts ongoing tasks. So, it is
     * equivalent to passing <code>true</code> as the
     * value for the parameter <tt>mayInterruptIfRunning</tt>
     * to the function {@link #cancel(AgentTask, boolean)}.
     *
     * @return <tt>false</tt> if the task could not be cancelled,
     * typically because it has already completed normally;
     * <tt>true</tt> otherwise
	 */
	def cancel(task : AgentTask) : boolean

	/**
     * Attempts to cancel execution of this task.  This attempt will
     * fail if the task has already completed, has already been cancelled,
     * or could not be cancelled for some other reason. If successful,
     * and this task has not started when <tt>cancel</tt> is called,
     * this task should never run.  If the task has already started,
     * then the <tt>mayInterruptIfRunning</tt> parameter determines
     * whether the thread executing this task should be interrupted in
     * an attempt to stop the task.
     *
     * @param mayInterruptIfRunning <tt>true</tt> if the thread executing this
     * task should be interrupted; otherwise, in-progress tasks are allowed
     * to complete
     * @return <tt>false</tt> if the task could not be cancelled,
     * typically because it has already completed normally;
     * <tt>true</tt> otherwise
	 */
	def cancel(task : AgentTask, mayInterruptIfRunning : boolean) : boolean

	/**
	 * Create an anonymous task and schedules a periodic execution of its behavior.
	 * <p>
	 * If the duration of the task is greater to the given period length, then
	 * multiple task's instances will be run in parallel.
	 * For example, consider the following code:
	 * <pre><code>
	 * every(500) [ sleep(2000) ]
	 * </code></pre>
	 * At a given time, 4 instances (A, B, C, D) of the task may be run in parallel:
	 * <pre><code>
	 * t=0   0500   1000   1500   2000   2500   3000   3500   4000   4500
	 *   |    |      |      |      |      |      |      |      |      |
	 *   [-A-----------------------]
	 *        [-B-------------------------]
	 *               [-C-------------------------]
	 *                      [-D-------------------------]
	 *                             [-E-------------------------]
	 *                                    [-F-------------------------]
	 * </code></pre>
	 */
	def every(period : long, procedure : (Agent) => void) : AgentTask

	/**
	 * Schedule a periodic execution of the given task.
	 * <p>
	 * If the duration of the task is greater to the given period length, then
	 * multiple task's instances will be run in parallel.
	 * For example, consider the following code:
	 * <pre><code>
	 * every(500) [ sleep(2000) ]
	 * </code></pre>
	 * At a given time, 4 instances (A, B, C, D) of the task may be run in parallel:
	 * <pre><code>
	 * t=0   0500   1000   1500   2000   2500   3000   3500   4000   4500
	 *   |    |      |      |      |      |      |      |      |      |
	 *   [-A-----------------------]
	 *        [-B-------------------------]
	 *               [-C-------------------------]
	 *                      [-D-------------------------]
	 *                             [-E-------------------------]
	 *                                    [-F-------------------------]
	 * </code></pre>
	 */
	def every(task : AgentTask, period : long,procedure : (Agent) => void ) : AgentTask

}


//Utility Capacities

/**
* Gives access to the DefaultContext of the agent and common actions on its default space.
* Defines a set of commonly accessed action performed on the Default Space 
* of the Default Context of the agent.
*
*/
capacity DefaultContextInteractions {
	
	//Communications
	
	/**
	* Returns the Default context fo the agent
	*/
	def getDefaultContext : AgentContext
	
	/**
	* Returns the Default Space of the Default Context.
	* Equivalent to defaultContext.defaultSpace
	*/
	def getDefaultSpace : EventSpace
	
	/**
	* Return the Address of the agent in the Default Space of the Default Context.
	* Equivalent to defaultContext.defaultSpace.address(this.id)
	*/
	def getDefaultAddress : Address

	/**
	* Emits a given event with the provided scope in the DefaultSpace of the DefaultContext.
	* Equivalent to defaultContext.defaultSpace.emit(e,scope)
	*/
	def emit(e : Event, scope : Scope<Address> )
	
	/**
	* Emits a given event with no scope (all registered agent) in the DefaultSpace of the DefaultContext.
	* Equivalent to defaultContext.defaultSpace.emit(e)
	*/
	def emit(e : Event)
	
	/**
	* Inverse signature of send. Useful to send events using the agent's UUID.
	* Example:
	*  If you need to send an event to a newly created agent you should usually do :
	* <code>
	* ...
	* const mySpawnArgs = ...
	* const myAgentAddr = MyAgent.spawn(mySpawnArgs)
	* defaultSpace.emit(new StartWorkingEvent, AddressScope::scope(myAgentAddr)
	* </code> 
	*  The equivalent using receive could be written:
	* <code>
	* ...
	* MyAgent.spawn(mySpawnArgs).receive(new StartWorkingEvent)
	* </code>
	*/
	def receive(receiver : UUID, e : Event)
	
	/** Replies if the given space is the default space of the default context.
	 *
	 * @param space - the space to test.
	 * @return <code>true</code> if the given space is the default space of
	 * the default context. Otherwise <code>false</code>.
	 * @since 0.2
	 */
	def isDefaultSpace(space : Space) : boolean
	
	/** Replies if the given identifier is the identifier of the default space of
	 * the default context.
	 *
	 * @param space - the space to test.
	 * @return <code>true</code> if the given identifier is the identifier
	 * of the default space of the default context. Otherwise <code>false</code>.
	 * @since 0.2
	 */
	def isDefaultSpace(space : SpaceID) : boolean

	/** Replies if the given identifier is the identifier of the default space of
	 * the default context.
	 *
	 * @param space - the space to test.
	 * @return <code>true</code> if the given identifier is the identifier
	 * of the default space of the default context. Otherwise <code>false</code>.
	 * @since 0.2
	 */
	def isDefaultSpace(space : UUID) : boolean

	/** Replies if the given event was emitted in the default space of
	 * the default context.
	 *
	 * @param event - the event to test.
	 * @return <code>true</code> if the given event is emitted in the default
	 * space of the default context. Otherwise <code>false</code>.
	 * @since 0.2
	 */
	def isInDefaultSpace(^event : Event) : boolean

	/** Replies if the given context is the default context.
	 *
	 * @param context - the agent context to test.
	 * @return <code>true</code> if the given context is the default context.
	 * Otherwise <code>false</code>.
	 * @since 0.2
	 */
	def isDefaultContext(context : AgentContext) : boolean
	
	/** Replies if the given identifier is the identifier of the default context.
	 *
	 * @param contextID - the identifier of the context.
	 * @return <code>true</code> if the given identifier is the identifier
	 * of the default context. Otherwise <code>false</code>.
	 * @since 0.2
	 */
	def isDefaultContext(contextID : UUID) : boolean

	//Agent Creation
	/**
	* Spawns a new Agent inside the default context of this agent.
	* This action must automatically register the newly created agent
	* within the default space of the context.
	* @fires AgentSpawned in DefaultSpace
	*/
	def spawn(aAgent : Class<? extends Agent>, params : Object*) : UUID fires AgentSpawned
}

/**
* Gives access to the logging mechanism associated to the agent.
*
*/
capacity Logging {

	/** Change the name used for logging.
	 *
	 * @param name - the name used for logging.
	 */
	def setLoggingName(name : String)

	/** Print the given message at information logging level.
	 * <p>
	 * <strong>This function is deprecated.</strong> Please use
	 * {@link #info(Object)} in place of <code>println</code>.
	 *
	 * @param message - the elements to display.
	 * @deprecated Use {@link #info(Object)}.
	 */
	@Deprecated
	def println(message : Object)
	
	/** Print the given message at error logging level.
	 *
	 * @param message - the elements to display.
	 * @param exception - the exception that is the cause of the error.
	 */
	def error(message : Object, exception : Throwable=null)

	/** Print the given message at warning logging level.
	 *
	 * @param message - the elements to display.
	 * @param exception - the exception that is the cause of the error.
	 */
	def warning(message : Object, exception : Throwable=null)

	/** Print the given message at information logging level.
	 *
	 * @param message - the elements to display.
	 */
	def info(message : Object)

	/** Print the given message at debug logging level.
	 *
	 * @param message - the elements to display.
	 */
	def debug(message : Object)

	/** Replies if the logging system is displaying the errors.
	 *
	 * @return <code>true</code> if the errors are logged,
	 *         <code>false</code> if not.
	 */
	def isErrorLogEnabled : boolean

	/** Replies if the logging system is displaying the warnings.
	 *
	 * @return <code>true</code> if the warnings are logged,
	 *         <code>false</code> if not.
	 */
	def isWarningLogEnabled : boolean

	/** Replies if the logging system is displaying the information messages.
	 *
	 * @return <code>true</code> if the information messages are logged,
	 *         <code>false</code> if not.
	 */
	def isInfoLogEnabled : boolean

	/** Replies if the logging system is displaying the debugging messages.
	 *
	 * @return <code>true</code> if the debugging messages are logged,
	 *         <code>false</code> if not.
	 */
	def isDebugLogEnabled : boolean

	/** Replies the logging level.
	 *
	 * @return <code>0</code> for no logging, <code>1</code> for error,
	 *         <code>2</code> for warning, <code>3</code> for info,
	 *         <code>5</code> for debug.
	 */
	def getLogLevel : int

	/** Set the logging level.
	 *
	 * @param level - <code>0</code> for no logging, <code>1</code> for error,
	 *         <code>2</code> for warning, <code>3</code> for info,
	 *         <code>5</code> for debug.
	 */
	def setLogLevel(level : int)

}
