/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright 2014-2016 the original authors and authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
module io.sarl.lang.GenerateSARL2

import org.eclipse.emf.mwe.utils.*
import org.eclipse.xtext.xtext.generator.*
import org.eclipse.xtext.xtext.generator.model.project.*
import org.eclipse.xtext.generator.*
import org.eclipse.xtext.ui.generator.*
import org.eclipse.xtext.generator.parser.antlr.*
import org.eclipse.xtext.resource.XtextResourceSet 

import io.sarl.lang.mwe2.* 
import io.sarl.lang.mwe2.binding.* 
import io.sarl.lang.mwe2.externalLang.* 
import io.sarl.lang.mwe2.prettify.* 
import io.sarl.lang.mwe2.latex.* 
import io.sarl.lang.mwe2.gtk.* 
import io.sarl.lang.mwe2.codebuilder.* 

var rootRootPath = "../.."
var rootPath = ".."

var baseName = "io.sarl.lang"

var runtimeProjectName = "${baseName}"
var projectPath = "${rootPath}/${runtimeProjectName}"

var uiProjectName = "${baseName}.ui"
var uiProjectPath = "${rootPath}/${uiProjectName}"

var testProjectName = "io.sarl.tests.api"
var testProjectPath = "${rootRootPath}/tests/${testProjectName}"

var prettifyToolPath = "${rootRootPath}/external_tools/prettify"
var latexToolPath = "${rootRootPath}/external_tools/latex"
var gtkToolPath = "${rootRootPath}/external_tools/gtk"
var webjsPath = "${rootRootPath}/maven/io.sarl.maven.docs.generator/src/main/resources/org/jnario/doc/js"

var file.extensions = "sarl"
var fileEncoding = "UTF-8"
var lineDelimiter = "\n"
var fileHeader = "/*
 * $Id$
 *
 * File is automatically generated by the Xtext language generator.
 * Do not change it.
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright 2014-\${year} the original authors and authors.
 *
 * Licensed under the Apache License, Version 2.0 (the \"License\");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an \"AS IS\" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */"
 
Workflow {
  	component = DirectoryCleaner {
		directory = "${projectPath}/emf-gen"
	}
 	component = DirectoryCleaner {
		directory = "${projectPath}/src-gen"
	}
 	component = DirectoryCleaner {
		directory = "${uiProjectPath}/src-gen"
	}
  	component = DirectoryCleaner {
		directory = "${testProjectPath}/src-gen"
	}
   	component = DirectoryCleaner {
		directory = "${prettifyToolPath}"
	}
   	component = DirectoryCleaner {
		directory = "${latexToolPath}"
	}
   	component = DirectoryCleaner {
		directory = "${gtkToolPath}"
	}

 	component = XtextGenerator auto-inject {
 		configuration = SarlGeneratorModule {
			project = StandardProjectConfig auto-inject {
				runtime = auto-inject {
					enabled = true
					name = runtimeProjectName
				}
				eclipsePlugin = auto-inject {
					enabled = true
					name = uiProjectName
				}
				genericIde = auto-inject {
					enabled = true
					name = uiProjectName
				}
				runtimeTest = auto-inject {
					enabled = true
					root = testProjectPath
				}
				eclipsePluginTest = auto-inject {
					enabled = true
					root = testProjectPath
				}
				mavenLayout = false
				createEclipseMetaData = true
				
			}
			code = auto-inject {
				lineDelimiter = lineDelimiter
				encoding = fileEncoding
				fileHeader = fileHeader
				preferXtendStubs = false
			}
			codeBuilder = auto-inject {
				scriptRuleName = "SarlScript"
				topElementRuleName = "Type"
				formalParameterRuleName = "Parameter"
				formalParameterContainerType = "org.eclipse.xtend.core.xtend.XtendExecutable"
				multilineCommentedType = "org.eclipse.xtend.core.xtend.XtendMember"
				constructorFreeRuleName = "Capacity"
				constructorFreeRuleName = "Interface"
				constructorFreeRuleName = "Enum"
				constructorFreeRuleName = "AnnotationType"
				defaultSuper = {
					type = "SarlAgent"
					super = "io.sarl.lang.core.Agent"
				}
				defaultSuper = {
					type = "SarlBehavior"
					super = "io.sarl.lang.core.Behavior"
				}
				defaultSuper = {
					type = "SarlCapacity"
					super = "io.sarl.lang.core.Capacity"
				}
				defaultSuper = {
					type = "SarlEvent"
					super = "io.sarl.lang.core.Event"
				}
				defaultSuper = {
					type = "SarlSkill"
					super = "io.sarl.lang.core.Skill"
				}
				noActionBodyType = "SarlCapacity"
				noActionBodyType = "SarlEvent"
				noActionBodyType = "SarlAnnotationType"
				noActionBodyType = "SarlInterface"
				modifier = {
					type = "SarlAction"
					modifier = "def"
				}
				modifier = {
					type = "SarlField"
					modifier = "var"
					modifier = "val"
				}
			}
			highlighting = auto-inject {
    			// Shared configuration between the generators
    			addNativeTypes = true

    			literal = "true"
    			literal = "false"
    			literal = "null"
    			literal = "this"
    			literal = "it"
    			literal = "occurrence"

    			ignoreKeyword = "create"
				ignoreKeyword = 'AFTER'
				ignoreKeyword = 'BEFORE'
				ignoreKeyword = 'ELSE'
				ignoreKeyword = 'ELSEIF'
				ignoreKeyword = 'ENDFOR'
				ignoreKeyword = 'ENDIF'
				ignoreKeyword = 'FOR'
				ignoreKeyword = 'IF'
				ignoreKeyword = 'SEPARATOR'

    			colors = auto-inject {
    				color = auto-inject {
    					name = "SARLblue"
    					rgb = "43,88,121"
    				}
    				color = auto-inject {
    					name = "SARLlightblue"
    					rgb = "0,123,191"
    				}
    				color = auto-inject {
    					name = "SARLlightestblue"
    					rgb = "223,239,247"
    				}
    				color = auto-inject {
    					name = "SARLmagenta"
    					rgb = "153,30,102"
    				}
    				color = auto-inject {
    					name = "SARLlightmagenta"
    					rgb = "204,122,170"
    				}
    				color = auto-inject {
    					name = "SARLlightestmagenta"
    					rgb = "250,240,246"
    				}
    				color = auto-inject {
    					name = "SARLgreen"
    					rgb = "0,128,0"
    				}
    				color = auto-inject {
    					name = "SARLdarkgray"
    					rgb = "99,104,110"
    				}
    				commentColor = "SARLgreen"
    				stringColor = "SARLmagenta"
    				keywordColor = "SARLblue"
    				identifierColor = "SARLdarkgray"
    			}
			}
		}
		
		language = auto-inject {
			resourceSet = XtextResourceSet : resourceSet {}
			referencedResource = "platform:/resource/org.eclipse.xtend.core/model/Xtend.genmodel"
			name = "io.sarl.lang.SARL"
			grammarUri = "platform:/resource/${runtimeProjectName}/src/io/sarl/lang/SARL.xtext"
			fileExtensions = file.extensions
			guiceModule = SarlLanguageGeneratorModule {}
			generateXtendStubs = false
			
			// Java API to access grammar elements (required by several other fragments)
			fragment = grammarAccess.GrammarAccessFragment2 auto-inject {
			}

			fragment = serializer.SerializerFragment2 auto-inject {
				generateDebugData = false // If true, generates plenty of ".dot" files for analyzing the grammar.
				generateStub = false
			}

			fragment = resourceFactory.ResourceFactoryFragment2 auto-inject {
			}

			fragment = parser.antlr.XtextAntlrGeneratorFragment2 auto-inject {
				removeBacktrackingGuards = true
				lookaheadThreshold = '5'
				partialParsing = true
				debugGrammar = true
				options = auto-inject {
					backtrack = true
				}
			}

			fragment = validation.ValidatorFragment2 auto-inject {
				generateStub = true
				inheritImplementation = true
    			composedCheck = "org.eclipse.xtend.core.validation.AnnotationValidation"
			}

			fragment = formatting.Formatter2Fragment2 auto-inject {
				generateStub = true
			}

			fragment = generator.GeneratorFragment2 auto-inject {
			}

			fragment = scoping.ImportNamespacesScopingFragment2 auto-inject {
				generateStub = true
			}

			fragment = builder.BuilderIntegrationFragment2 auto-inject {
			}

			fragment = ui.quickfix.QuickfixProviderFragment2 auto-inject {
				generateStub = true
				inheritImplementation = true
			}

			fragment = ui.labeling.LabelProviderFragment2 auto-inject {
				generateStub = true
			}

			fragment = ui.outline.OutlineTreeProviderFragment2 auto-inject {
				generateStub = true
			}

			fragment = ui.outline.QuickOutlineFragment2 auto-inject {
			}

			fragment = ui.compare.CompareFragment2 auto-inject {
			}

			fragment = ui.contentAssist.ContentAssistFragment2 auto-inject {
				generateStub = true
				inheritImplementation = false
			}

			fragment = ui.refactoring.RefactorElementNameFragment2 auto-inject {
				useJdtRefactoring = true
			}

			fragment = types.TypesGeneratorFragment2 auto-inject {
			}

    		// generates the required bindings only if the grammar inherits from Xbase
			fragment = xbase.XbaseGeneratorFragment2 auto-inject {
				generateXtendInferrer = false
			}

			fragment = ui.templates.CodetemplatesGeneratorFragment2 auto-inject {
			}

			fragment = junit.Junit4Fragment2 auto-inject {
				generateStub = false
			}
			
			// Generate an helpful creator of Ecore elements.
			fragment = CodeBuilderFragment2 auto-inject {
				generateStub = false
			}

			// generate the Google Prettify style
    		fragment = GooglePrettifyGenerator2 auto-inject {
				output = prettifyToolPath
				output = webjsPath
    		}

			// generate the LaTeX Beamer style
    		fragment = LaTeXBeamerGenerator2 auto-inject {
				output = latexToolPath
    		}

			// generate the LaTeX algorithmic style with colors
    		fragment = LaTeXListingsGenerator2 auto-inject {
				output = latexToolPath
    			basename = "sarl-colorized-listing.sty"
    		}

			// generate the LaTeX algorithmic style without colors
    		fragment = io.sarl.lang.mwe2.latex.LaTeXListingsGenerator2 auto-inject {
				output = latexToolPath
    			enableColors = false
    		}

			// generate the language specification for highlighting in Gedit 	
    		fragment = GtkSourceViewerGenerator2 auto-inject {
				output = gtkToolPath
    		}
    		
    		// SARL specific bindings
    		fragment = InjectionFragment2 auto-inject {
    			comment = "Bindings provided by SARL API"
    			overrideAll = true
    			
    			runtime = {
    				bind = "io.sarl.lang.actionprototype.IActionPrototypeProvider"
    				to = "io.sarl.lang.actionprototype.DefaultActionPrototypeProvider"
    			}
    			runtime = {
    				bind = "org.eclipse.xtext.validation.ConfigurableIssueCodesProvider"
    				to = "io.sarl.lang.validation.SARLConfigurableIssueCodesProvider"
    			}
    			runtime = {
    				bind = "org.eclipse.xtext.xbase.validation.EarlyExitValidator"
    				to = "io.sarl.lang.validation.SARLEarlyExitValidator"
    			}
    			runtime = {
    				bind = "org.eclipse.xtext.xbase.typesystem.util.ExtendedEarlyExitComputer"
    				to = "io.sarl.lang.controlflow.SARLExtendedEarlyExitComputer"
    			}
    			runtime = {
    				bind = "io.sarl.lang.typing.SARLExpressionHelper"
    				to = "io.sarl.lang.typing.SARLExpressionHelper"
    			}
    			runtime = {
    				bind = "io.sarl.lang.validation.FeatureCallValidator"
    				to = "io.sarl.lang.validation.DefaultFeatureCallValidator"
    			}
    			runtime = {
    				bind = "org.eclipse.xtext.xbase.validation.FeatureNameValidator"
    				to = "io.sarl.lang.validation.SARLFeatureNameValidator"
    			}
    			runtime = {
    				bind = "org.eclipse.xtext.formatting2.FormatterPreferenceKeys"
    				to = "io.sarl.lang.formatting2.SARLFormatterPreferenceKeys"
    			}
    			runtime = {
    				bind = "org.eclipse.xtext.xbase.controlflow.IEarlyExitComputer"
    				to = "io.sarl.lang.controlflow.SARLEarlyExitComputer"
    			}
    			runtime = {
    				bind = "org.eclipse.xtext.xbase.jvmmodel.IJvmModelInferrer"
    				to = "io.sarl.lang.jvmmodel.SARLJvmModelInferrer"
    			}
    			runtime = {
    				bind = "org.eclipse.xtext.xbase.scoping.batch.ImplicitlyImportedFeatures"
    				to = "io.sarl.lang.scoping.batch.SARLImplicitlyImportedFeatures"
    			}
    			runtime = {
    				bind = "org.eclipse.xtext.generator.IOutputConfigurationProvider"
    				to = "io.sarl.lang.generator.SarlOutputConfigurationProvider"
    			}
    			runtime = {
    				bind = "org.eclipse.xtext.xbase.jvmmodel.JvmModelAssociator"
    				to = "io.sarl.lang.jvmmodel.SarlJvmModelAssociations$Impl"
    			}
    			runtime = {
    				bind = "io.sarl.lang.sarl.SarlFactory"
    				to = "SarlFactory.eINSTANCE"
    				singleton = true
    				instance = true
    			}
    			runtime = {
    				bind = "org.eclipse.xtext.xbase.util.XExpressionHelper"
    				to = "io.sarl.lang.typing.SARLExpressionHelper"
    			}
    			
    			ui = {
    				bind = "org.eclipse.xtext.ui.validation.AbstractValidatorConfigurationBlock"
    				to = "io.sarl.lang.ui.preferences.SARLValidatorConfigurationBlock"
    			}
    			ui = {
    				bind = "org.eclipse.ui.views.contentoutline.IContentOutlinePage"
    				to = "io.sarl.lang.ui.outline.SARLOutlinePage"
    			}
    			ui = {
    				bind = "org.eclipse.jface.viewers.ILabelProvider"
    				annotatedWith = "org.eclipse.xtext.ui.editor.hyperlinking.HyperlinkLabelProvider"
    				to = "org.eclipse.xtend.ide.hyperlinking.HyperLinkingLabelProvider"
    				functionName = "configureHyperlinkLabelProvider"
   				}
    			ui = {
    				bind = "org.eclipse.xtext.ui.editor.outline.actions.IOutlineContribution"
    				annotatedWithName = "SARLFieldOutlineFilter"
    				to = "io.sarl.lang.ui.outline.SARLFieldOutlineFilter"
   				}
    			ui = {
    				bind = "org.eclipse.xtext.ui.editor.outline.actions.IOutlineContribution"
    				annotatedWithName = "SARLOperationOutlineFilter"
    				to = "io.sarl.lang.ui.outline.SARLOperationOutlineFilter"
   				}
    			ui = {
    				bind = "org.eclipse.xtext.ui.editor.outline.actions.IOutlineContribution"
    				annotatedWithName = "SARLBehaviorUnitOutlineFilter"
    				to = "io.sarl.lang.ui.outline.SARLBehaviorUnitOutlineFilter"
   				}
    			ui = {
    				bind = "org.eclipse.xtext.ui.editor.preferences.IPreferenceStoreInitializer"
    				annotatedWithName = "RefactoringPreferences"
    				to = "io.sarl.lang.ui.preferences.SARLPreferenceStoreInitializer"
    				functionName = "configureIPreferenceStoreInitializer"
    			}
    			ui = {
    				bind = "org.eclipse.xtext.ui.editor.preferences.IPreferenceStoreInitializer"
    				annotatedWithName = "smartCaretPreferenceInitializer"
    				to = "io.sarl.lang.ui.preferences.SARLPreferenceStoreInitializer"
    			}
    			ui = {
    				bind = "org.eclipse.xtext.ide.editor.syntaxcoloring.ISemanticHighlightingCalculator"
    				to = "io.sarl.lang.ui.highlighting.SARLHighlightingCalculator"
    				functionName = "bindIdeSemanticHighlightingCalculator"
    			}
    			ui = {
    				bind = "org.eclipse.xtext.tasks.ITaskTagProvider"
    				to = "io.sarl.lang.ui.tasks.SarlTaskTagProvider"
    			}
    			ui = {
    				bind = "org.eclipse.xtext.ui.editor.outline.impl.OutlineFilterAndSorter$IComparator"
    				to = "io.sarl.lang.ui.outline.SARLOutlineNodeComparator"
    			}
    			ui = {
    				bind = "org.eclipse.xtext.xbase.ui.validation.XbaseUIValidator"
    				to = "io.sarl.lang.ui.validation.SARLUIValidator"
    				singleton = true
    				eager = true
    			}

    			both = {
    				bind = "org.eclipse.xtext.generator.IContextualOutputConfigurationProvider"
    				to = "io.sarl.lang.generator.SarlOutputConfigurationProvider"
    			}
    		}

    		// Xtend-extension bindings
    		fragment = InjectionFragment2 auto-inject {
    			comment = "Bindings required by extended Xtend API"

    			runtime = {
    				bind = "org.eclipse.xtend.core.macro.AbstractFileSystemSupport"
    				to = "org.eclipse.xtend.core.macro.JavaIOFileSystemSupport"
    			}
    			runtime = {
    				bind = "org.eclipse.xtext.xbase.scoping.batch.ConstructorScopes"
    				to = "org.eclipse.xtend.core.scoping.AnonymousClassConstructorScopes"
    			}
    			runtime = {
    				bind = "org.eclipse.xtext.xbase.typesystem.internal.DefaultBatchTypeResolver"
    				to = "org.eclipse.xtend.core.typesystem.TypeDeclarationAwareBatchTypeResolver"
    				override = true
   				}
    			runtime = {
    				bind = "org.eclipse.xtext.xbase.typesystem.internal.DefaultReentrantTypeResolver"
    				to = "org.eclipse.xtend.core.typesystem.XtendReentrantTypeResolver"
    				override = true
   				}
    			runtime = {
    				bind = "org.eclipse.xtext.resource.EObjectAtOffsetHelper"
    				to = "org.eclipse.xtend.core.linking.XtendEObjectAtOffsetHelper"
   				}
    			runtime = {
    				bind = "org.eclipse.xtext.xbase.typesystem.util.HumanReadableTypeNames"
    				to = "org.eclipse.xtend.core.typesystem.LocalClassAwareTypeNames"
   				}
    			runtime = {
    				bind = "org.eclipse.xtext.resource.IDefaultResourceDescriptionStrategy"
    				to = "org.eclipse.xtend.core.resource.XtendResourceDescriptionStrategy"
   				}
    			runtime = {
    				bind = "org.eclipse.xtext.conversion.impl.IDValueConverter"
    				to = "org.eclipse.xtend.core.conversion.JavaIDValueConverter"
   				}
    			runtime = {
    				bind = "org.eclipse.xtext.documentation.IFileHeaderProvider"
    				to = "org.eclipse.xtend.core.documentation.XtendFileHeaderProvider"
   				}
    			runtime = {
    				bind = "org.eclipse.xtext.xbase.imports.IImportsConfiguration"
    				to = "org.eclipse.xtend.core.imports.XtendImportsConfiguration"
   				}
    			runtime = {
    				bind = "org.eclipse.xtext.linking.ILinker"
    				to = "org.eclipse.xtend.core.linking.RuntimeLinker"
   				}
    			runtime = {
    				bind = "org.eclipse.xtext.resource.ILocationInFileProvider"
    				to = "org.eclipse.xtend.core.resource.XtendLocationInFileProvider"
    				override = true
   				}
    			runtime = {
    				bind = "org.eclipse.xtext.xbase.validation.ImplicitReturnFinder"
    				to = "org.eclipse.xtend.core.validation.XtendImplicitReturnFinder"
   				}
    			runtime = {
    				bind = "org.eclipse.xtext.xbase.imports.ImportedTypesCollector"
    				to = "org.eclipse.xtend.core.imports.XtendImportedTypesUsageCollector"
   				}
    			runtime = {
    				bind = "org.eclipse.xtext.xbase.conversion.XbaseValueConverterService$IntUnderscoreValueConverter"
    				to = "org.eclipse.xtend.core.conversion.IntUnderscoreValueConverter"
   				}
    			runtime = {
    				bind = "org.eclipse.xtext.parser.antlr.IPartialParsingHelper"
    				to = "org.eclipse.xtend.core.parser.XtendPartialParsingHelper"
    				functionName = "bindIPartialParserHelper"
   				}
    			runtime = {
    				bind = "org.eclipse.xtext.naming.IQualifiedNameProvider"
    				to = "org.eclipse.xtend.core.naming.XtendQualifiedNameProvider"
    				override = true
   				}
    			runtime = {
    				bind = "org.eclipse.xtend.core.macro.declaration.IResourceChangeRegistry"
    				to = "org.eclipse.xtend.core.macro.declaration.NopResourceChangeRegistry"
 				}
    			runtime = {
    				bind = "org.eclipse.xtext.resource.IResourceDescriptions"
    				to = "org.eclipse.xtext.resource.impl.EagerResourceSetBasedResourceDescriptions"
    				functionName = "configureIResourceDescriptions"
    				override = true
   				}
    			runtime = {
    				bind = "org.eclipse.xtext.resource.persistence.IResourceStorageFacade"
    				to = "org.eclipse.xtext.xbase.resource.BatchLinkableResourceStorageFacade"
   				}
    			runtime = {
    				bind = "org.eclipse.xtext.validation.IResourceValidator"
    				to = "org.eclipse.xtend.core.validation.CachingResourceValidatorImpl"
    				override = true
   				}
    			runtime = {
    				bind = "org.eclipse.xtext.scoping.IScopeProvider"
    				annotatedWith = "org.eclipse.xtext.serializer.tokens.SerializerScopeProviderBinding"
    				to = "org.eclipse.xtend.core.serializer.XtendSerializerScopeProvider"
    				functionName = "configureSerializerIScopeProvider"
   				}
    			runtime = {
    				bind = "org.eclipse.xtext.generator.IShouldGenerate"
    				to = "org.eclipse.xtext.generator.IShouldGenerate$Always"
 				}
    			runtime = {
    				bind = "org.eclipse.xtext.xbase.typesystem.computation.ITypeComputer"
    				to = "org.eclipse.xtend.core.typesystem.XtendTypeComputer"
 				}
    			runtime = {
    				bind = "org.eclipse.xtext.conversion.IValueConverterService"
    				to = "org.eclipse.xtend.core.conversion.XtendValueConverterService"
 				}
    			runtime = {
    				bind = "org.eclipse.xtext.xbase.compiler.JvmModelGenerator"
    				to = "org.eclipse.xtend.core.compiler.XtendGenerator"
   				}
    			runtime = {
    				bind = "org.eclipse.xtext.resource.IResourceDescription$Manager"
    				to = "org.eclipse.xtend.core.resource.XtendResourceDescriptionManager"
   				}
    			runtime = {
    				bind = "org.eclipse.xtend.lib.macro.file.MutableFileSystemSupport"
    				to = "org.eclipse.xtend.core.macro.JavaIOFileSystemSupport"
    			}
    			runtime = {
    				bind = "org.eclipse.xtext.conversion.impl.STRINGValueConverter"
    				to = "org.eclipse.xtend.core.conversion.StringValueConverter"
   				}
    			runtime = {
    				bind = "org.eclipse.xtext.findReferences.TargetURICollector"
    				to = "org.eclipse.xtext.xbase.jvmmodel.JvmModelTargetURICollector"
   				}
    			runtime = {
    				bind = "org.eclipse.xtext.xbase.compiler.output.TraceAwarePostProcessor"
    				to = "org.eclipse.xtend.core.compiler.UnicodeAwarePostProcessor"
   				}
    			runtime = {
    				bind = "org.eclipse.xtext.xbase.imports.TypeUsageCollector"
    				to = "org.eclipse.xtend.core.imports.XtendTypeUsageCollector"
   				}
    			runtime = {
    				bind = "org.eclipse.xtext.xbase.compiler.XbaseCompiler"
    				to = "org.eclipse.xtend.core.compiler.XtendCompiler"
   				}
    			runtime = {
    				bind = "org.eclipse.xtext.xbase.XbaseFactory"
    				to = "XbaseFactory.eINSTANCE"
    				singleton = true
    				instance = true
    			}
    			runtime = {
    				bind = "org.eclipse.xtend.core.xtend.XtendFactory"
    				to = "XtendFactory.eINSTANCE"
    				singleton = true
    				instance = true
    			}
    			
    			ui = {
    				bind = "org.eclipse.xtext.ui.editor.autoedit.AbstractEditStrategyProvider"
    				to = "org.eclipse.xtend.ide.autoedit.AutoEditStrategyProvider"
   				}
    			ui = {
    				bind = "org.eclipse.xtext.generator.AbstractFileSystemAccess2"
    				to = "io.sarl.lang.ui.builder.ProjectRelativeFileSystemAccess"
   				}
    			ui = {
    				bind = "org.eclipse.xtend.core.macro.AbstractFileSystemSupport"
    				to = "org.eclipse.xtend.ide.macro.EclipseFileSystemSupportImpl"
    			}
    			ui = {
    				bind = "org.eclipse.xtext.ui.editor.contentassist.PrefixMatcher$CamelCase"
    				to = "org.eclipse.xtend.ide.contentassist.EscapeSequenceAwarePrefixMatcher"
   				}
    			ui = {
    				bind = "org.eclipse.xtext.ui.editor.doubleClicking.DoubleClickStrategyProvider"
    				to = "org.eclipse.xtend.ide.editor.XtendDoubleClickStrategyProvider"
   				}
    			ui = {
    				bind = "org.eclipse.xtext.ui.editor.XtextSourceViewer$Factory"
    				to = "org.eclipse.xtend.ide.editor.RichStringAwareSourceViewer$Factory"
   				}
    			ui = {
    				bind = "org.eclipse.xtext.ui.editor.actions.IActionContributor"
    				annotatedWithName = "OverrideIndicatorRulerAction"
    				to = "org.eclipse.xtend.ide.editor.OverrideIndicatorRulerAction"
   				}
    			ui = {
    				bind = "org.eclipse.jface.text.source.IAnnotationHover"
    				to = "org.eclipse.xtend.ide.hover.XtendAnnotationHover"
   				}
    			ui = {
    				bind = "org.eclipse.xtext.ide.editor.bracketmatching.IBracePairProvider"
    				to = "org.eclipse.xtend.ide.common.editor.bracketmatching.XtendBracePairProvider"
    				singleton = true
   				}
    			ui = {
    				bind = "org.eclipse.xtext.ui.editor.hover.IEObjectHoverProvider"
    				to = "org.eclipse.xtend.ide.hover.XtendHoverProvider"
   				}
    			ui = {
    				bind = "org.eclipse.xtext.ui.editor.syntaxcoloring.IHighlightingConfiguration"
    				to = "org.eclipse.xtend.ide.highlighting.XtendHighlightingConfiguration"
   				}
    			ui = {
    				bind = "org.eclipse.xtext.ui.editor.hyperlinking.IHyperlinkHelper"
    				to = "org.eclipse.xtend.ide.hyperlinking.XtendHyperlinkHelper"
   				}
    			ui = {
    				bind = "org.eclipse.xtext.ui.editor.occurrences.IOccurrenceComputer"
    				to = "org.eclipse.xtend.ide.editor.OccurrenceComputer"
   				}
    			ui = {
    				bind = "org.eclipse.xtext.ui.refactoring.IRenameStrategy"
    				to = "org.eclipse.xtend.ide.refactoring.XtendRenameStrategy"
    				override = true
   				}
    			ui = {
    				bind = "org.eclipse.xtend.core.macro.declaration.IResourceChangeRegistry"
    				to = "org.eclipse.xtend.ide.builder.UIResourceChangeRegistry"
 				}
    			ui = {
    				bind = "org.eclipse.xtext.ui.resource.IResourceUIServiceProvider"
    				to = "org.eclipse.xtend.ide.XtendResourceUiServiceProvider"
   				}
    			ui = {
    				bind = "org.eclipse.xtext.ui.editor.toggleComments.ISingleLineCommentHelper"
    				to = "org.eclipse.xtend.ide.editor.SingleLineCommentHelper"
   				}
    			ui = {
    				bind = "org.eclipse.xtext.ui.generator.trace.ITraceForStorageProvider"
    				to = "org.eclipse.xtext.ui.generator.trace.TraceForStorageProvider"
   				}
    			ui = {
    				bind = "org.eclipse.xtext.ui.editor.IXtextEditorCallback"
    				annotatedWithName = "OverrideIndicatorModelListener"
    				to = "org.eclipse.xtend.ide.editor.OverrideIndicatorModelListener"
   				}
    			ui = {
    				bind = "org.eclipse.xtend.lib.macro.file.MutableFileSystemSupport"
    				to = "org.eclipse.xtend.ide.macro.EclipseFileSystemSupportImpl"
    			}
    			ui = {
    				bind = "org.eclipse.xtext.ui.editor.toggleComments.ToggleSLCommentAction$Factory"
    				to = "org.eclipse.xtend.ide.editor.RichStringAwareToggleCommentAction$Factory"
   				}
    		}

	    	// Injection recommender
    		fragment = InjectionRecommender2 auto-inject {
    			enable = false
    		}
		}
 	}
 
	component = org.eclipse.emf.mwe2.ecore.EcoreGenerator auto-inject {
		resourceSet = resourceSet
		genModel = "platform:/resource/${runtimeProjectName}/model/SARL.genmodel"
		srcPath ="platform:/resource/${runtimeProjectName}/src"
		srcPath ="platform:/resource/org.eclipse.xtext.common.types/src"
		srcPath ="platform:/resource/org.eclipse.xtext.xbase/src"
		srcPath ="platform:/resource/org.eclipse.xtend.core/src"
		srcPath ="platform:/resource/org.eclipse.xtend.ide/src"
		lineDelimiter = lineDelimiter
	}

 }