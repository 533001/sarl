/*
 * $Id$
 *
 * File is automatically generated by the Xtext language generator.
 * Do not change it.
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright 2014-2016 the original authors and authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.lang.codebuilder;

import com.google.inject.AbstractModule;
import com.google.inject.Guice;
import com.google.inject.Injector;
import com.google.inject.Module;
import io.sarl.lang.SARLRuntimeModule;
import io.sarl.lang.codebuilder.appenders.ActionSourceAppender;
import io.sarl.lang.codebuilder.appenders.AgentSourceAppender;
import io.sarl.lang.codebuilder.appenders.AnnotationFieldSourceAppender;
import io.sarl.lang.codebuilder.appenders.AnnotationTypeSourceAppender;
import io.sarl.lang.codebuilder.appenders.BehaviorSourceAppender;
import io.sarl.lang.codebuilder.appenders.BehaviorUnitSourceAppender;
import io.sarl.lang.codebuilder.appenders.BlockExpressionSourceAppender;
import io.sarl.lang.codebuilder.appenders.CapacitySourceAppender;
import io.sarl.lang.codebuilder.appenders.ClassSourceAppender;
import io.sarl.lang.codebuilder.appenders.ConstructorSourceAppender;
import io.sarl.lang.codebuilder.appenders.EnumSourceAppender;
import io.sarl.lang.codebuilder.appenders.EventSourceAppender;
import io.sarl.lang.codebuilder.appenders.ExpressionSourceAppender;
import io.sarl.lang.codebuilder.appenders.FieldSourceAppender;
import io.sarl.lang.codebuilder.appenders.FormalParameterSourceAppender;
import io.sarl.lang.codebuilder.appenders.InterfaceSourceAppender;
import io.sarl.lang.codebuilder.appenders.SkillSourceAppender;
import io.sarl.lang.codebuilder.appenders.XtendEnumLiteralSourceAppender;
import io.sarl.lang.codebuilder.builders.IActionBuilder;
import io.sarl.lang.codebuilder.builders.IAgentBuilder;
import io.sarl.lang.codebuilder.builders.IAnnotationFieldBuilder;
import io.sarl.lang.codebuilder.builders.IAnnotationTypeBuilder;
import io.sarl.lang.codebuilder.builders.IBehaviorBuilder;
import io.sarl.lang.codebuilder.builders.IBehaviorUnitBuilder;
import io.sarl.lang.codebuilder.builders.IBlockExpressionBuilder;
import io.sarl.lang.codebuilder.builders.ICapacityBuilder;
import io.sarl.lang.codebuilder.builders.IClassBuilder;
import io.sarl.lang.codebuilder.builders.IConstructorBuilder;
import io.sarl.lang.codebuilder.builders.IEnumBuilder;
import io.sarl.lang.codebuilder.builders.IEventBuilder;
import io.sarl.lang.codebuilder.builders.IExpressionBuilder;
import io.sarl.lang.codebuilder.builders.IFieldBuilder;
import io.sarl.lang.codebuilder.builders.IFormalParameterBuilder;
import io.sarl.lang.codebuilder.builders.IInterfaceBuilder;
import io.sarl.lang.codebuilder.builders.IScriptBuilder;
import io.sarl.lang.codebuilder.builders.ISkillBuilder;
import io.sarl.lang.codebuilder.builders.IXtendEnumLiteralBuilder;
import javax.inject.Inject;
import javax.inject.Named;
import javax.inject.Provider;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.xtext.Constants;
import org.eclipse.xtext.resource.IResourceFactory;
import org.eclipse.xtext.util.Modules2;
import org.eclipse.xtext.xbase.compiler.ImportManager;
import org.eclipse.xtext.xbase.lib.Pure;

/** * Creates {@link ICodeBuilder}s to insert SARL code snippets. */
@SuppressWarnings("all")
public class CodeBuilderFactory {

	@Inject
	private IResourceFactory resourceFactory;

	private String fileExtension;

	@Inject
	private Provider<ImportManager> importManagerProvider;

	@Inject
	public void setFileExtensions(@Named(Constants.FILE_EXTENSIONS) String fileExtensions) {
		this.fileExtension = fileExtensions.split("[:;,]+")[0];
	}

	/** Compute a unused URI for a synthetic resource.
	 * @param resourceSet - the resource set in which the resource should be located.
	 * @return the uri.
	 */
	@Pure
	protected URI computeUnusedUri(ResourceSet resourceSet) {
		String name = "__synthetic";
		for (int i = 0; i < Integer.MAX_VALUE; ++i) {
			URI syntheticUri = URI.createURI(name + i + "." + getScriptFileExtension());
			if (resourceSet.getResource(syntheticUri, false) == null) {
				return syntheticUri;
			}
		}
		throw new IllegalStateException();
	}

	/** Replies the script's file extension.
	 */
	@Pure
	public String getScriptFileExtension() {
		return this.fileExtension;
	}

	/** Replies the resource factory.
	 *
	 * @return the resource factory.
	 */
	@Pure
	protected IResourceFactory getResourceFactory() {
		return this.resourceFactory;
	}

	/** Replies the name of the foo package.
	 *
	 * @return the name of the foo package.
	 */
	@Pure
	protected String getFooPackageName() {
		return "io.sarl.lang.foo";
	}

	/** Create a synthetic resource.
	 *
	 * @param resourceSet the resourceSet.
	 * @return the resource.
	 */
	@Pure
	protected Resource createResource(ResourceSet  resourceSet) {
		URI uri = computeUnusedUri(resourceSet);
		Resource resource = getResourceFactory().createResource(uri);
		resourceSet.getResources().add(resource);
		return resource;
	}

	/** Replies a provider for the given type.
	 * <p>The provider uses a local context singleton of the import manager.
	 * @param type the type of the object to provide.
	 * @return the provider.
	 */
	@Pure
	protected <T> Provider<T> getProvider(Class<T> type) {
		SARLRuntimeModule runtimeModule = new SARLRuntimeModule();
		ImportManager importManager = this.importManagerProvider.get();
		Module mergedModule = Modules2.mixin(runtimeModule, new CodeBuilderModule(importManager));
		Injector injector = Guice.createInjector(mergedModule);
		return injector.getProvider(type);
	}

	private static class CodeBuilderModule extends AbstractModule {

		private final ImportManager importManager;

		public CodeBuilderModule(ImportManager importManager) {
			this.importManager = importManager;
		}

		@Override
		protected void configure() {
			bind(ImportManager.class).toInstance(this.importManager);
		}

	}

	/** Create the factory for a Sarl script.
	 * @param packageName the name of the package of the script.
	 * @param resourceSet the resource set in which the script is created.
	 * @return the factory.
	 */
	@Pure
	public IScriptBuilder createScript(String packageName, ResourceSet resourceSet) {
		return createScript(packageName, createResource(resourceSet));
	}

	/** Create the factory for a Sarl script.
	 * @param packageName the name of the package of the script.
	 * @param resource the resource in which the script is created.
	 * @return the factory.
	 */
	@Pure
	public IScriptBuilder createScript(String packageName, Resource resource) {
		IScriptBuilder builder = getProvider(IScriptBuilder.class).get();
		builder.eInit(resource, packageName);
		return builder;
	}

	/** Create the factory for a Sarl XExpression.
	 * @param resourceSet the set of the resources that must be used for
	 *    containing the generated resource, and resolving types from names.
	 * @return the factory.
	 */
	public IExpressionBuilder createXExpression(ResourceSet resourceSet) {
		return createXExpression(createResource(resourceSet));	}

	/** Create the factory for a Sarl XExpression.
	 * @param resource the resource that must be used for
	 *    containing the generated resource, and resolving types from names.
	 * @return the factory.
	 */
	public IExpressionBuilder createXExpression(Resource resource) {
		return createScript(getFooPackageName(), resource).addEvent("Foo").addField("foo").getInitialValue();
	}

	/** Create the appender for a Sarl XExpression.
	 * @param resourceSet the set of the resources that must be used for
	 *    containing the generated resource, and resolving types from names.
	 * @return the appender.
	 */
	public ExpressionSourceAppender buildXExpression(ResourceSet resourceSet) {
		return new ExpressionSourceAppender(createXExpression(resourceSet));
	}

	/** Create the appender for a Sarl XExpression.
	 * @param resource the resource that must be used for
	 *    containing the generated resource, and resolving types from names.
	 * @return the appender.
	 */
	public ExpressionSourceAppender buildXExpression(Resource resource) {
		return new ExpressionSourceAppender(createXExpression(resource));
	}

	/** Create the factory for a Sarl block expression.
	 * @param resourceSet the set of the resources that must be used for
	 *    containing the generated resource, and resolving types from names.
	 * @return the factory.
	 */
	@Pure
	public IBlockExpressionBuilder createXBlockExpression(ResourceSet resourceSet) {
		return createConstructor(resourceSet).getExpression();
	}

	/** Create the factory for a Sarl block expression.
	 * @param resource the resource that must be used for
	 *    containing the generated resource, and resolving types from names.
	 * @return the factory.
	 */
	@Pure
	public IBlockExpressionBuilder createXBlockExpression(Resource resource) {
		return createConstructor(resource).getExpression();
	}

	/** Create the appender for a Sarl block expression.
	 * @param resourceSet the set of the resources that must be used for
	 *    containing the generated resource, and resolving types from names.
	 * @return the appender.
	 */
	@Pure
	public BlockExpressionSourceAppender buildXBlockExpression(ResourceSet resourceSet) {
		return new BlockExpressionSourceAppender(createXBlockExpression(resourceSet));
	}

	/** Create the appender for a Sarl block expression.
	 * @param resource the resource that must be used for
	 *    containing the generated resource, and resolving types from names.
	 * @return the appender.
	 */
	@Pure
	public BlockExpressionSourceAppender buildXBlockExpression(Resource resource) {
		return new BlockExpressionSourceAppender(createXBlockExpression(resource));
	}

	/** Create the factory for a Sarl formal parameter.
	 * @param name the name of the parameter.
	 * @param resourceSet the set of the resources that must be used for
	 *    containing the generated resource, and resolving types from names.
	 * @return the factory.
	 */
	public IFormalParameterBuilder createParameter(String name, ResourceSet resourceSet) {
		return createParameter(name, createResource(resourceSet));
	}

	/** Create the factory for a Sarl formal parameter.
	 * @param name the name of the parameter.
	 * @param resource the resource that must be used for
	 *    containing the generated resource, and resolving types from names.
	 * @return the factory.
	 */
	public IFormalParameterBuilder createParameter(String name, Resource resource) {
		return createConstructor(resource).addParameter(name);
	}

	/** Create the appender for a Sarl formal parameter.
	 * @param name the name of the parameter.
	 * @param resourceSet the set of the resources that must be used for
	 *    containing the generated resource, and resolving types from names.
	 * @return the appender.
	 */
	public FormalParameterSourceAppender buildParameter(String name, ResourceSet resourceSet) {
		return new FormalParameterSourceAppender(createParameter(name, resourceSet));
	}

	/** Create the appender for a Sarl formal parameter.
	 * @param name the name of the parameter.
	 * @param resource the resource that must be used for
	 *    containing the generated resource, and resolving types from names.
	 * @return the appender.
	 */
	public FormalParameterSourceAppender buildParameter(String name, Resource resource) {
		return new FormalParameterSourceAppender(createParameter(name, resource));
	}

	/** Create the factory for a Sarl SarlEvent.
	 * @param name the name of the Event
	 * @param resourceSet the set of the resources that must be used for
	 *    containing the generated resource, and resolving types from names.
	 * @return the factory.
	 */
	@Pure
	public IEventBuilder createEvent(String name, ResourceSet resourceSet) {
		 return createEvent(name, createResource(resourceSet));
	}

	/** Create the factory for a Sarl SarlEvent.
	 * @param name the name of the Event
	 * @param resource the resource that must be used for
	 *    containing the generated element, and resolving types from names.
	 * @return the factory.
	 */
	@Pure
	public IEventBuilder createEvent(String name, Resource resource) {
		IScriptBuilder scriptBuilder = createScript(getFooPackageName(), resource);
		return scriptBuilder.addEvent(name);
	}

	/** Create the appender for a Sarl SarlEvent.
	 * @param name the name of the Event
	 * @param resourceSet the set of the resources that must be used for
	 *    containing the generated resource, and resolving types from names.
	 * @return the appender.
	 */
	@Pure
	public EventSourceAppender buildEvent(String name, ResourceSet resourceSet) {
		return new EventSourceAppender(buildEvent(name, resourceSet));
	}

	/** Create the appender for a Sarl SarlEvent.
	 * @param name the name of the Event
	 * @param resource the resource that must be used for
	 *    containing the generated resource, and resolving types from names.
	 * @return the appender.
	 */
	@Pure
	public EventSourceAppender buildEvent(String name, Resource resource) {
		return new EventSourceAppender(buildEvent(name, resource));
	}

	/** Create the factory for a Sarl SarlCapacity.
	 * @param name the name of the Capacity
	 * @param resourceSet the set of the resources that must be used for
	 *    containing the generated resource, and resolving types from names.
	 * @return the factory.
	 */
	@Pure
	public ICapacityBuilder createCapacity(String name, ResourceSet resourceSet) {
		 return createCapacity(name, createResource(resourceSet));
	}

	/** Create the factory for a Sarl SarlCapacity.
	 * @param name the name of the Capacity
	 * @param resource the resource that must be used for
	 *    containing the generated element, and resolving types from names.
	 * @return the factory.
	 */
	@Pure
	public ICapacityBuilder createCapacity(String name, Resource resource) {
		IScriptBuilder scriptBuilder = createScript(getFooPackageName(), resource);
		return scriptBuilder.addCapacity(name);
	}

	/** Create the appender for a Sarl SarlCapacity.
	 * @param name the name of the Capacity
	 * @param resourceSet the set of the resources that must be used for
	 *    containing the generated resource, and resolving types from names.
	 * @return the appender.
	 */
	@Pure
	public CapacitySourceAppender buildCapacity(String name, ResourceSet resourceSet) {
		return new CapacitySourceAppender(buildCapacity(name, resourceSet));
	}

	/** Create the appender for a Sarl SarlCapacity.
	 * @param name the name of the Capacity
	 * @param resource the resource that must be used for
	 *    containing the generated resource, and resolving types from names.
	 * @return the appender.
	 */
	@Pure
	public CapacitySourceAppender buildCapacity(String name, Resource resource) {
		return new CapacitySourceAppender(buildCapacity(name, resource));
	}

	/** Create the factory for a Sarl SarlAgent.
	 * @param name the name of the Agent
	 * @param resourceSet the set of the resources that must be used for
	 *    containing the generated resource, and resolving types from names.
	 * @return the factory.
	 */
	@Pure
	public IAgentBuilder createAgent(String name, ResourceSet resourceSet) {
		 return createAgent(name, createResource(resourceSet));
	}

	/** Create the factory for a Sarl SarlAgent.
	 * @param name the name of the Agent
	 * @param resource the resource that must be used for
	 *    containing the generated element, and resolving types from names.
	 * @return the factory.
	 */
	@Pure
	public IAgentBuilder createAgent(String name, Resource resource) {
		IScriptBuilder scriptBuilder = createScript(getFooPackageName(), resource);
		return scriptBuilder.addAgent(name);
	}

	/** Create the appender for a Sarl SarlAgent.
	 * @param name the name of the Agent
	 * @param resourceSet the set of the resources that must be used for
	 *    containing the generated resource, and resolving types from names.
	 * @return the appender.
	 */
	@Pure
	public AgentSourceAppender buildAgent(String name, ResourceSet resourceSet) {
		return new AgentSourceAppender(buildAgent(name, resourceSet));
	}

	/** Create the appender for a Sarl SarlAgent.
	 * @param name the name of the Agent
	 * @param resource the resource that must be used for
	 *    containing the generated resource, and resolving types from names.
	 * @return the appender.
	 */
	@Pure
	public AgentSourceAppender buildAgent(String name, Resource resource) {
		return new AgentSourceAppender(buildAgent(name, resource));
	}

	/** Create the factory for a Sarl SarlBehavior.
	 * @param name the name of the Behavior
	 * @param resourceSet the set of the resources that must be used for
	 *    containing the generated resource, and resolving types from names.
	 * @return the factory.
	 */
	@Pure
	public IBehaviorBuilder createBehavior(String name, ResourceSet resourceSet) {
		 return createBehavior(name, createResource(resourceSet));
	}

	/** Create the factory for a Sarl SarlBehavior.
	 * @param name the name of the Behavior
	 * @param resource the resource that must be used for
	 *    containing the generated element, and resolving types from names.
	 * @return the factory.
	 */
	@Pure
	public IBehaviorBuilder createBehavior(String name, Resource resource) {
		IScriptBuilder scriptBuilder = createScript(getFooPackageName(), resource);
		return scriptBuilder.addBehavior(name);
	}

	/** Create the appender for a Sarl SarlBehavior.
	 * @param name the name of the Behavior
	 * @param resourceSet the set of the resources that must be used for
	 *    containing the generated resource, and resolving types from names.
	 * @return the appender.
	 */
	@Pure
	public BehaviorSourceAppender buildBehavior(String name, ResourceSet resourceSet) {
		return new BehaviorSourceAppender(buildBehavior(name, resourceSet));
	}

	/** Create the appender for a Sarl SarlBehavior.
	 * @param name the name of the Behavior
	 * @param resource the resource that must be used for
	 *    containing the generated resource, and resolving types from names.
	 * @return the appender.
	 */
	@Pure
	public BehaviorSourceAppender buildBehavior(String name, Resource resource) {
		return new BehaviorSourceAppender(buildBehavior(name, resource));
	}

	/** Create the factory for a Sarl SarlSkill.
	 * @param name the name of the Skill
	 * @param resourceSet the set of the resources that must be used for
	 *    containing the generated resource, and resolving types from names.
	 * @return the factory.
	 */
	@Pure
	public ISkillBuilder createSkill(String name, ResourceSet resourceSet) {
		 return createSkill(name, createResource(resourceSet));
	}

	/** Create the factory for a Sarl SarlSkill.
	 * @param name the name of the Skill
	 * @param resource the resource that must be used for
	 *    containing the generated element, and resolving types from names.
	 * @return the factory.
	 */
	@Pure
	public ISkillBuilder createSkill(String name, Resource resource) {
		IScriptBuilder scriptBuilder = createScript(getFooPackageName(), resource);
		return scriptBuilder.addSkill(name);
	}

	/** Create the appender for a Sarl SarlSkill.
	 * @param name the name of the Skill
	 * @param resourceSet the set of the resources that must be used for
	 *    containing the generated resource, and resolving types from names.
	 * @return the appender.
	 */
	@Pure
	public SkillSourceAppender buildSkill(String name, ResourceSet resourceSet) {
		return new SkillSourceAppender(buildSkill(name, resourceSet));
	}

	/** Create the appender for a Sarl SarlSkill.
	 * @param name the name of the Skill
	 * @param resource the resource that must be used for
	 *    containing the generated resource, and resolving types from names.
	 * @return the appender.
	 */
	@Pure
	public SkillSourceAppender buildSkill(String name, Resource resource) {
		return new SkillSourceAppender(buildSkill(name, resource));
	}

	/** Create the factory for a Sarl SarlClass.
	 * @param name the name of the Class
	 * @param resourceSet the set of the resources that must be used for
	 *    containing the generated resource, and resolving types from names.
	 * @return the factory.
	 */
	@Pure
	public IClassBuilder createClass(String name, ResourceSet resourceSet) {
		 return createClass(name, createResource(resourceSet));
	}

	/** Create the factory for a Sarl SarlClass.
	 * @param name the name of the Class
	 * @param resource the resource that must be used for
	 *    containing the generated element, and resolving types from names.
	 * @return the factory.
	 */
	@Pure
	public IClassBuilder createClass(String name, Resource resource) {
		IScriptBuilder scriptBuilder = createScript(getFooPackageName(), resource);
		return scriptBuilder.addClass(name);
	}

	/** Create the appender for a Sarl SarlClass.
	 * @param name the name of the Class
	 * @param resourceSet the set of the resources that must be used for
	 *    containing the generated resource, and resolving types from names.
	 * @return the appender.
	 */
	@Pure
	public ClassSourceAppender buildClass(String name, ResourceSet resourceSet) {
		return new ClassSourceAppender(buildClass(name, resourceSet));
	}

	/** Create the appender for a Sarl SarlClass.
	 * @param name the name of the Class
	 * @param resource the resource that must be used for
	 *    containing the generated resource, and resolving types from names.
	 * @return the appender.
	 */
	@Pure
	public ClassSourceAppender buildClass(String name, Resource resource) {
		return new ClassSourceAppender(buildClass(name, resource));
	}

	/** Create the factory for a Sarl SarlInterface.
	 * @param name the name of the Interface
	 * @param resourceSet the set of the resources that must be used for
	 *    containing the generated resource, and resolving types from names.
	 * @return the factory.
	 */
	@Pure
	public IInterfaceBuilder createInterface(String name, ResourceSet resourceSet) {
		 return createInterface(name, createResource(resourceSet));
	}

	/** Create the factory for a Sarl SarlInterface.
	 * @param name the name of the Interface
	 * @param resource the resource that must be used for
	 *    containing the generated element, and resolving types from names.
	 * @return the factory.
	 */
	@Pure
	public IInterfaceBuilder createInterface(String name, Resource resource) {
		IScriptBuilder scriptBuilder = createScript(getFooPackageName(), resource);
		return scriptBuilder.addInterface(name);
	}

	/** Create the appender for a Sarl SarlInterface.
	 * @param name the name of the Interface
	 * @param resourceSet the set of the resources that must be used for
	 *    containing the generated resource, and resolving types from names.
	 * @return the appender.
	 */
	@Pure
	public InterfaceSourceAppender buildInterface(String name, ResourceSet resourceSet) {
		return new InterfaceSourceAppender(buildInterface(name, resourceSet));
	}

	/** Create the appender for a Sarl SarlInterface.
	 * @param name the name of the Interface
	 * @param resource the resource that must be used for
	 *    containing the generated resource, and resolving types from names.
	 * @return the appender.
	 */
	@Pure
	public InterfaceSourceAppender buildInterface(String name, Resource resource) {
		return new InterfaceSourceAppender(buildInterface(name, resource));
	}

	/** Create the factory for a Sarl SarlEnumeration.
	 * @param name the name of the Enum
	 * @param resourceSet the set of the resources that must be used for
	 *    containing the generated resource, and resolving types from names.
	 * @return the factory.
	 */
	@Pure
	public IEnumBuilder createEnum(String name, ResourceSet resourceSet) {
		 return createEnum(name, createResource(resourceSet));
	}

	/** Create the factory for a Sarl SarlEnumeration.
	 * @param name the name of the Enum
	 * @param resource the resource that must be used for
	 *    containing the generated element, and resolving types from names.
	 * @return the factory.
	 */
	@Pure
	public IEnumBuilder createEnum(String name, Resource resource) {
		IScriptBuilder scriptBuilder = createScript(getFooPackageName(), resource);
		return scriptBuilder.addEnum(name);
	}

	/** Create the appender for a Sarl SarlEnumeration.
	 * @param name the name of the Enum
	 * @param resourceSet the set of the resources that must be used for
	 *    containing the generated resource, and resolving types from names.
	 * @return the appender.
	 */
	@Pure
	public EnumSourceAppender buildEnum(String name, ResourceSet resourceSet) {
		return new EnumSourceAppender(buildEnum(name, resourceSet));
	}

	/** Create the appender for a Sarl SarlEnumeration.
	 * @param name the name of the Enum
	 * @param resource the resource that must be used for
	 *    containing the generated resource, and resolving types from names.
	 * @return the appender.
	 */
	@Pure
	public EnumSourceAppender buildEnum(String name, Resource resource) {
		return new EnumSourceAppender(buildEnum(name, resource));
	}

	/** Create the factory for a Sarl SarlAnnotationType.
	 * @param name the name of the AnnotationType
	 * @param resourceSet the set of the resources that must be used for
	 *    containing the generated resource, and resolving types from names.
	 * @return the factory.
	 */
	@Pure
	public IAnnotationTypeBuilder createAnnotationType(String name, ResourceSet resourceSet) {
		 return createAnnotationType(name, createResource(resourceSet));
	}

	/** Create the factory for a Sarl SarlAnnotationType.
	 * @param name the name of the AnnotationType
	 * @param resource the resource that must be used for
	 *    containing the generated element, and resolving types from names.
	 * @return the factory.
	 */
	@Pure
	public IAnnotationTypeBuilder createAnnotationType(String name, Resource resource) {
		IScriptBuilder scriptBuilder = createScript(getFooPackageName(), resource);
		return scriptBuilder.addAnnotationType(name);
	}

	/** Create the appender for a Sarl SarlAnnotationType.
	 * @param name the name of the AnnotationType
	 * @param resourceSet the set of the resources that must be used for
	 *    containing the generated resource, and resolving types from names.
	 * @return the appender.
	 */
	@Pure
	public AnnotationTypeSourceAppender buildAnnotationType(String name, ResourceSet resourceSet) {
		return new AnnotationTypeSourceAppender(buildAnnotationType(name, resourceSet));
	}

	/** Create the appender for a Sarl SarlAnnotationType.
	 * @param name the name of the AnnotationType
	 * @param resource the resource that must be used for
	 *    containing the generated resource, and resolving types from names.
	 * @return the appender.
	 */
	@Pure
	public AnnotationTypeSourceAppender buildAnnotationType(String name, Resource resource) {
		return new AnnotationTypeSourceAppender(buildAnnotationType(name, resource));
	}

	/** Create the factory for a Sarl constructor.
	 * @param resourceSet the set of the resources that must be used for
	 *    containing the generated resource, and resolving types from names.
	 * @return the factory.
	 */
	@Pure
	public IConstructorBuilder createConstructor(ResourceSet resourceSet) {
		return createConstructor(createResource(resourceSet));
	}

	/** Create the factory for a Sarl constructor.
	 * @param resource the resource that must be used for
	 *    containing the generated resource, and resolving types from names.
	 * @return the factory.
	 */
	@Pure
	public IConstructorBuilder createConstructor(Resource resource) {
		IScriptBuilder scriptBuilder = createScript(getFooPackageName(), resource);
		IEventBuilder containerBuilder = scriptBuilder.addEvent("FooType");
		return containerBuilder.addConstructor();
	}

	/** Create the appender for a Sarl constructor.
	 * @param resourceSet the set of the resources that must be used for
	 *    containing the generated resource, and resolving types from names.
	 * @return the appender.
	 */
	@Pure
	public ConstructorSourceAppender buildConstructor(ResourceSet resourceSet) {
		return new ConstructorSourceAppender(createConstructor(resourceSet));
	}

	/** Create the appender for a Sarl constructor.
	 * @param resource the resource that must be used for
	 *    containing the generated resource, and resolving types from names.
	 * @return the appender.
	 */
	@Pure
	public ConstructorSourceAppender buildConstructor(Resource resource) {
		return new ConstructorSourceAppender(createConstructor(resource));
	}

	/** Create the factory for a Sarl SarlField.
	 * @param name the name of the Field
	 * @param resourceSet the set of the resources that must be used for
	 *    containing the generated resource, and resolving types from names.
	 * @return the factory.
	 */
	@Pure
	public IFieldBuilder createVarField(String name, ResourceSet resourceSet) {
		return createVarField(name, createResource(resourceSet));
	}

	/** Create the factory for a Sarl SarlField.
	 * @param name the name of the Field
	 * @param resource the resource that must be used for
	 *    containing the generated resource, and resolving types from names.
	 * @return the factory.
	 */
	@Pure
	public IFieldBuilder createVarField(String name, Resource resource) {
		IScriptBuilder scriptBuilder = createScript(getFooPackageName(), resource);
		IAgentBuilder containerBuilder = scriptBuilder.addAgent("FooType");
		return containerBuilder.addVarField(name);
	}

	/** Create the appender for a Sarl SarlField.
	 * @param name the name of the Field
	 * @param resourceSet the set of the resources that must be used for
	 *    containing the generated resource, and resolving types from names.
	 * @return the appender.
	 */
	@Pure
	public FieldSourceAppender buildVarField(String name, ResourceSet resourceSet) {
		return new FieldSourceAppender(createVarField(name, resourceSet));
	}

	/** Create the appender for a Sarl SarlField.
	 * @param name the name of the Field
	 * @param resource the resource that must be used for
	 *    containing the generated resource, and resolving types from names.
	 * @return the appender.
	 */
	@Pure
	public FieldSourceAppender buildVarField(String name, Resource resource) {
		return new FieldSourceAppender(createVarField(name, resource));
	}

	/** Create the factory for a Sarl SarlField.
	 * @param name the name of the Field
	 * @param resourceSet the set of the resources that must be used for
	 *    containing the generated resource, and resolving types from names.
	 * @return the factory.
	 */
	@Pure
	public IFieldBuilder createValField(String name, ResourceSet resourceSet) {
		return createValField(name, createResource(resourceSet));
	}

	/** Create the factory for a Sarl SarlField.
	 * @param name the name of the Field
	 * @param resource the resource that must be used for
	 *    containing the generated resource, and resolving types from names.
	 * @return the factory.
	 */
	@Pure
	public IFieldBuilder createValField(String name, Resource resource) {
		IScriptBuilder scriptBuilder = createScript(getFooPackageName(), resource);
		IAgentBuilder containerBuilder = scriptBuilder.addAgent("FooType");
		return containerBuilder.addValField(name);
	}

	/** Create the appender for a Sarl SarlField.
	 * @param name the name of the Field
	 * @param resourceSet the set of the resources that must be used for
	 *    containing the generated resource, and resolving types from names.
	 * @return the appender.
	 */
	@Pure
	public FieldSourceAppender buildValField(String name, ResourceSet resourceSet) {
		return new FieldSourceAppender(createValField(name, resourceSet));
	}

	/** Create the appender for a Sarl SarlField.
	 * @param name the name of the Field
	 * @param resource the resource that must be used for
	 *    containing the generated resource, and resolving types from names.
	 * @return the appender.
	 */
	@Pure
	public FieldSourceAppender buildValField(String name, Resource resource) {
		return new FieldSourceAppender(createValField(name, resource));
	}

	/** Create the factory for a Sarl SarlAction.
	 * @param name the name of the Action
	 * @param resourceSet the set of the resources that must be used for
	 *    containing the generated resource, and resolving types from names.
	 * @return the factory.
	 */
	@Pure
	public IActionBuilder createAction(String name, ResourceSet resourceSet) {
		return createAction(name, createResource(resourceSet));
	}

	/** Create the factory for a Sarl SarlAction.
	 * @param name the name of the Action
	 * @param resource the resource that must be used for
	 *    containing the generated resource, and resolving types from names.
	 * @return the factory.
	 */
	@Pure
	public IActionBuilder createAction(String name, Resource resource) {
		IScriptBuilder scriptBuilder = createScript(getFooPackageName(), resource);
		IAgentBuilder containerBuilder = scriptBuilder.addAgent("FooType");
		return containerBuilder.addAction(name);
	}

	/** Create the appender for a Sarl SarlAction.
	 * @param name the name of the Action
	 * @param resourceSet the set of the resources that must be used for
	 *    containing the generated resource, and resolving types from names.
	 * @return the appender.
	 */
	@Pure
	public ActionSourceAppender buildAction(String name, ResourceSet resourceSet) {
		return new ActionSourceAppender(createAction(name, resourceSet));
	}

	/** Create the appender for a Sarl SarlAction.
	 * @param name the name of the Action
	 * @param resource the resource that must be used for
	 *    containing the generated resource, and resolving types from names.
	 * @return the appender.
	 */
	@Pure
	public ActionSourceAppender buildAction(String name, Resource resource) {
		return new ActionSourceAppender(createAction(name, resource));
	}

	/** Create the factory for a Sarl SarlField.
	 * @param name the name of the AnnotationField
	 * @param resourceSet the set of the resources that must be used for
	 *    containing the generated resource, and resolving types from names.
	 * @return the factory.
	 */
	@Pure
	public IAnnotationFieldBuilder createVarAnnotationField(String name, ResourceSet resourceSet) {
		return createVarAnnotationField(name, createResource(resourceSet));
	}

	/** Create the factory for a Sarl SarlField.
	 * @param name the name of the AnnotationField
	 * @param resource the resource that must be used for
	 *    containing the generated resource, and resolving types from names.
	 * @return the factory.
	 */
	@Pure
	public IAnnotationFieldBuilder createVarAnnotationField(String name, Resource resource) {
		IScriptBuilder scriptBuilder = createScript(getFooPackageName(), resource);
		IAnnotationTypeBuilder containerBuilder = scriptBuilder.addAnnotationType("FooType");
		return containerBuilder.addVarAnnotationField(name);
	}

	/** Create the appender for a Sarl SarlField.
	 * @param name the name of the AnnotationField
	 * @param resourceSet the set of the resources that must be used for
	 *    containing the generated resource, and resolving types from names.
	 * @return the appender.
	 */
	@Pure
	public AnnotationFieldSourceAppender buildVarAnnotationField(String name, ResourceSet resourceSet) {
		return new AnnotationFieldSourceAppender(createVarAnnotationField(name, resourceSet));
	}

	/** Create the appender for a Sarl SarlField.
	 * @param name the name of the AnnotationField
	 * @param resource the resource that must be used for
	 *    containing the generated resource, and resolving types from names.
	 * @return the appender.
	 */
	@Pure
	public AnnotationFieldSourceAppender buildVarAnnotationField(String name, Resource resource) {
		return new AnnotationFieldSourceAppender(createVarAnnotationField(name, resource));
	}

	/** Create the factory for a Sarl SarlField.
	 * @param name the name of the AnnotationField
	 * @param resourceSet the set of the resources that must be used for
	 *    containing the generated resource, and resolving types from names.
	 * @return the factory.
	 */
	@Pure
	public IAnnotationFieldBuilder createValAnnotationField(String name, ResourceSet resourceSet) {
		return createValAnnotationField(name, createResource(resourceSet));
	}

	/** Create the factory for a Sarl SarlField.
	 * @param name the name of the AnnotationField
	 * @param resource the resource that must be used for
	 *    containing the generated resource, and resolving types from names.
	 * @return the factory.
	 */
	@Pure
	public IAnnotationFieldBuilder createValAnnotationField(String name, Resource resource) {
		IScriptBuilder scriptBuilder = createScript(getFooPackageName(), resource);
		IAnnotationTypeBuilder containerBuilder = scriptBuilder.addAnnotationType("FooType");
		return containerBuilder.addValAnnotationField(name);
	}

	/** Create the appender for a Sarl SarlField.
	 * @param name the name of the AnnotationField
	 * @param resourceSet the set of the resources that must be used for
	 *    containing the generated resource, and resolving types from names.
	 * @return the appender.
	 */
	@Pure
	public AnnotationFieldSourceAppender buildValAnnotationField(String name, ResourceSet resourceSet) {
		return new AnnotationFieldSourceAppender(createValAnnotationField(name, resourceSet));
	}

	/** Create the appender for a Sarl SarlField.
	 * @param name the name of the AnnotationField
	 * @param resource the resource that must be used for
	 *    containing the generated resource, and resolving types from names.
	 * @return the appender.
	 */
	@Pure
	public AnnotationFieldSourceAppender buildValAnnotationField(String name, Resource resource) {
		return new AnnotationFieldSourceAppender(createValAnnotationField(name, resource));
	}

	/** Create the factory for a Sarl SarlBehaviorUnit.
	 * @param name the name of the BehaviorUnit
	 * @param resourceSet the set of the resources that must be used for
	 *    containing the generated resource, and resolving types from names.
	 * @return the factory.
	 */
	@Pure
	public IBehaviorUnitBuilder createBehaviorUnit(String name, ResourceSet resourceSet) {
		return createBehaviorUnit(name, createResource(resourceSet));
	}

	/** Create the factory for a Sarl SarlBehaviorUnit.
	 * @param name the name of the BehaviorUnit
	 * @param resource the resource that must be used for
	 *    containing the generated resource, and resolving types from names.
	 * @return the factory.
	 */
	@Pure
	public IBehaviorUnitBuilder createBehaviorUnit(String name, Resource resource) {
		IScriptBuilder scriptBuilder = createScript(getFooPackageName(), resource);
		IAgentBuilder containerBuilder = scriptBuilder.addAgent("FooType");
		return containerBuilder.addBehaviorUnit(name);
	}

	/** Create the appender for a Sarl SarlBehaviorUnit.
	 * @param name the name of the BehaviorUnit
	 * @param resourceSet the set of the resources that must be used for
	 *    containing the generated resource, and resolving types from names.
	 * @return the appender.
	 */
	@Pure
	public BehaviorUnitSourceAppender buildBehaviorUnit(String name, ResourceSet resourceSet) {
		return new BehaviorUnitSourceAppender(createBehaviorUnit(name, resourceSet));
	}

	/** Create the appender for a Sarl SarlBehaviorUnit.
	 * @param name the name of the BehaviorUnit
	 * @param resource the resource that must be used for
	 *    containing the generated resource, and resolving types from names.
	 * @return the appender.
	 */
	@Pure
	public BehaviorUnitSourceAppender buildBehaviorUnit(String name, Resource resource) {
		return new BehaviorUnitSourceAppender(createBehaviorUnit(name, resource));
	}

	/** Create the factory for a Sarl XtendEnumLiteral.
	 * @param name the name of the XtendEnumLiteral
	 * @param resourceSet the set of the resources that must be used for
	 *    containing the generated resource, and resolving types from names.
	 * @return the factory.
	 */
	@Pure
	public IXtendEnumLiteralBuilder createXtendEnumLiteral(String name, ResourceSet resourceSet) {
		return createXtendEnumLiteral(name, createResource(resourceSet));
	}

	/** Create the factory for a Sarl XtendEnumLiteral.
	 * @param name the name of the XtendEnumLiteral
	 * @param resource the resource that must be used for
	 *    containing the generated resource, and resolving types from names.
	 * @return the factory.
	 */
	@Pure
	public IXtendEnumLiteralBuilder createXtendEnumLiteral(String name, Resource resource) {
		IScriptBuilder scriptBuilder = createScript(getFooPackageName(), resource);
		IEnumBuilder containerBuilder = scriptBuilder.addEnum("FooType");
		return containerBuilder.addXtendEnumLiteral(name);
	}

	/** Create the appender for a Sarl XtendEnumLiteral.
	 * @param name the name of the XtendEnumLiteral
	 * @param resourceSet the set of the resources that must be used for
	 *    containing the generated resource, and resolving types from names.
	 * @return the appender.
	 */
	@Pure
	public XtendEnumLiteralSourceAppender buildXtendEnumLiteral(String name, ResourceSet resourceSet) {
		return new XtendEnumLiteralSourceAppender(createXtendEnumLiteral(name, resourceSet));
	}

	/** Create the appender for a Sarl XtendEnumLiteral.
	 * @param name the name of the XtendEnumLiteral
	 * @param resource the resource that must be used for
	 *    containing the generated resource, and resolving types from names.
	 * @return the appender.
	 */
	@Pure
	public XtendEnumLiteralSourceAppender buildXtendEnumLiteral(String name, Resource resource) {
		return new XtendEnumLiteralSourceAppender(createXtendEnumLiteral(name, resource));
	}

}

