/*
 * $Id$
 *
 * File is automatically generated by the Xtext language generator.
 * Do not change it.
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright 2014-2016 the original authors and authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.lang.codebuilder.appenders;

import java.io.IOException;
import javax.inject.Inject;
import javax.inject.Singleton;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting.impl.AbstractTokenStream;
import org.eclipse.xtext.resource.SaveOptions;
import org.eclipse.xtext.serializer.impl.Serializer;
import org.eclipse.xtext.util.Strings;
import org.eclipse.xtext.xbase.compiler.ISourceAppender;

/** Abstract implementation of an appender for the Sarl language.
 */
@SuppressWarnings("all")
public abstract class AbstractSourceAppender {

	@Inject
	private AppenderSerializer serializer;

	/** Build the source code and put it into the given appender.
	 * @param appender the object that permits to create the source code.
	 */
	public abstract void build(ISourceAppender appender) throws IOException;

	/** Build the source code and put it into the given appender.
	 * @param the object to serialize
	 * @param appender the object that permits to create the source code.
	 */
	protected void build(EObject object, ISourceAppender appender) throws IOException {
		this.serializer.serialize(object, appender);
	}

	@Singleton
	public static class AppenderSerializer extends Serializer {

		public void serialize(EObject object, ISourceAppender appender) throws IOException {
			serialize(object, new TokenStream(appender), SaveOptions.defaultOptions());
		}

	}

	private static class TokenStream extends AbstractTokenStream {

		private final ISourceAppender appender;

		public TokenStream(ISourceAppender appender) {
			this.appender = appender;
		}

		public String toString() {
			return this.appender.toString();
		}

		public void writeHidden(EObject grammarElement, String value) throws IOException {
			if (!Strings.isEmpty(value)) {
				System.out.println(value);
			}
		}

		public void writeSemantic(EObject grammarElement, String value) throws IOException {
			if (!Strings.isEmpty(value)) {
				System.out.println(value);
			}
		}

	}

}

