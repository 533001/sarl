/*
 * $Id$
 *
 * File is automatically generated by the Xtext language generator.
 * Do not change it.
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright 2014-2016 the original authors and authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.lang.codebuilder.appenders;

import io.sarl.lang.codebuilder.builders.IActionBuilder;
import io.sarl.lang.codebuilder.builders.IBlockExpressionBuilder;
import io.sarl.lang.codebuilder.builders.IFormalParameterBuilder;
import io.sarl.lang.sarl.SarlAction;
import java.io.IOException;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend.core.xtend.XtendTypeDeclaration;
import org.eclipse.xtext.xbase.compiler.ISourceAppender;
import org.eclipse.xtext.xbase.lib.Pure;

/** Source appender of a Sarl Action.
 */
@SuppressWarnings("all")
public class ActionSourceAppender extends AbstractSourceAppender implements IActionBuilder {

	private final IActionBuilder builder;

	public ActionSourceAppender(IActionBuilder builder) {
		this.builder = builder;
	}

	public void build(ISourceAppender appender) throws IOException {
		build(this.builder.getSarlAction(), appender);
	}

	/** Initialize the Ecore element.
	 * @param container - the container of the Action.
	 * @param name - the name of the Action.
	 */
	public void eInit(XtendTypeDeclaration container, String name) {
		this.builder.eInit(container, name);
	}

	/** Replies the generated element.
	 */
	@Pure
	public SarlAction getSarlAction() {
		return this.builder.getSarlAction();
	}

	/** Replies the resource.
	 */
	@Pure
	public Resource eResource() {
		return getSarlAction().eResource();
	}

	/** Change the documentation of the element.
	 *
	 * <p>The documentation will be displayed just before the element.
	 *
	 * @param doc the documentation.
	 */
	public void setDocumentation(String doc) {
		this.builder.setDocumentation(doc);
	}

	/** Add a formal parameter.
	 * @param name the name of the formal parameter.
	 */
	public IFormalParameterBuilder addParameter(String name) {
		return this.builder.addParameter(name);
	}

	/** Add a throwable exception.
	 * @param type the fully qualified name of the exception.
	 */
	public void addException(String type) {
		this.builder.addException(type);
	}

	/** Add a fired exception.
	 * @param type the fully qualified name of the event.
	 */
	public void addFiredEvent(String type) {
		this.builder.addFiredEvent(type);
	}

	/** Change the return type.
	 @param type the return type of the member.
	 */
	public void setReturnType(String type) {
		this.builder.setReturnType(type);
	}

	/** Create the block of code.
	 * @return the block builder.
	 */
	public IBlockExpressionBuilder getExpression() {
		return this.builder.getExpression();
	}

}

