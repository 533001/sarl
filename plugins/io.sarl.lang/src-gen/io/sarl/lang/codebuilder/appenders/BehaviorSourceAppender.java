/*
 * $Id$
 *
 * File is automatically generated by the Xtext language generator.
 * Do not change it.
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright 2014-2016 the original authors and authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.lang.codebuilder.appenders;

import io.sarl.lang.codebuilder.builders.IActionBuilder;
import io.sarl.lang.codebuilder.builders.IBehaviorBuilder;
import io.sarl.lang.codebuilder.builders.IBehaviorUnitBuilder;
import io.sarl.lang.codebuilder.builders.IConstructorBuilder;
import io.sarl.lang.codebuilder.builders.IFieldBuilder;
import io.sarl.lang.sarl.SarlBehavior;
import io.sarl.lang.sarl.SarlScript;
import java.io.IOException;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.xbase.compiler.ISourceAppender;
import org.eclipse.xtext.xbase.lib.Pure;

/** Source adapter of a Sarl SarlBehavior.
 */
@SuppressWarnings("all")
public class BehaviorSourceAppender extends AbstractSourceAppender implements IBehaviorBuilder {

	private final IBehaviorBuilder builder;

	public BehaviorSourceAppender(IBehaviorBuilder builder) {
		this.builder = builder;
	}

	public void build(ISourceAppender appender) throws IOException {
		build(this.builder.getSarlBehavior(), appender);
	}

	private SarlBehavior sarlBehavior;

	/** Initialize the Ecore element.
	 */
	public void eInit(SarlScript script, String name) {
		this.builder.eInit(script, name);
	}

	/** Replies the generated SarlBehavior.
	 */
	@Pure
	public SarlBehavior getSarlBehavior() {
		return this.builder.getSarlBehavior();
	}

	/** Replies the resource to which the SarlBehavior is attached.
	 */
	@Pure
	public Resource eResource() {
		return getSarlBehavior().eResource();
	}

	/** Change the documentation of the element.
	 *
	 * <p>The documentation will be displayed just before the element.
	 *
	 * @param doc the documentation.
	 */
	public void setDocumentation(String doc) {
		this.builder.setDocumentation(doc);
	}

	/** Change the super type.
	 * @param superType - the qualified name of the super type,
	 *     or <code>null</code> if the default type.
	 */
	public void setExtends(String superType) {
		this.builder.setExtends(superType);	}

	/** Add an annotation.
	 * @param type - the qualified name of the annotation.
	 */
	public void addAnnotation(String type) {
		this.builder.addAnnotation(type);
	}

	/** Add a modifier.
	 * @param modifier - the modifier to add.
	 */
	public void addModifier(String modifier) {
		this.builder.addModifier(modifier);
	}

	/** Create a Constructor.
	 * @return the builder.
	 */
	public IConstructorBuilder addConstructor() {
		return this.builder.addConstructor();
	}

	/** Create an Action.
	 * @param name - the name of the Action.
	 * @return the builder.
	 */
	public IActionBuilder addAction(String name) {
		return this.builder.addAction(name);
	}

	/** Create a BehaviorUnit.
	 * @param name - the typename of the BehaviorUnit.
	 * @return the builder.
	 */
	public IBehaviorUnitBuilder addBehaviorUnit(String name) {
		return this.builder.addBehaviorUnit(name);
	}

	/** Create a Field.
	 * @param name - the name of the Field.
	 * @return the builder.
	 */
	public IFieldBuilder addVarField(String name) {
		return this.builder.addVarField(name);
	}

	/** Create a Field.
	 * @param name - the name of the Field.
	 * @return the builder.
	 */
	public IFieldBuilder addValField(String name) {
		return this.builder.addValField(name);
	}

	/** Create a Field.	 *
	 * <p>This function is equivalent to {@link #addVarField}.
	 * @param name - the name of the Field.
	 * @return the builder.
	 */
	public IFieldBuilder addField(String name) {
		return this.builder.addField(name);
	}

}

