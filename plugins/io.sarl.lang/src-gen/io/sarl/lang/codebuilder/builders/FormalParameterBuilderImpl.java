/*
 * $Id$
 *
 * File is automatically generated by the Xtext language generator.
 * Do not change it.
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright 2014-2016 the original authors and authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.lang.codebuilder.builders;

import io.sarl.lang.sarl.SarlFactory;
import io.sarl.lang.sarl.SarlFormalParameter;
import javax.inject.Inject;
import javax.inject.Provider;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend.core.xtend.XtendExecutable;
import org.eclipse.xtext.util.Strings;
import org.eclipse.xtext.xbase.XExpression;
import org.eclipse.xtext.xbase.lib.Procedures;
import org.eclipse.xtext.xbase.lib.Pure;

/** Builder of a Sarl formal parameter.
 */
@SuppressWarnings("all")
public class FormalParameterBuilderImpl extends AbstractBuilder implements IFormalParameterBuilder {

	@Inject
	private Provider<IExpressionBuilder> expressionProvider;

	private XtendExecutable context;

	private SarlFormalParameter parameter;

	private IExpressionBuilder defaultValue;

	/** Initialize the formal parameter.
	 * @param context - the context of the formal parameter.
	 * @param name - the name of the formal parameter.
	 */
	public void eInit(XtendExecutable context, String name) {
		this.context = context;
			this.parameter = SarlFactory.eINSTANCE.createSarlFormalParameter();
			this.parameter.setName(name);
			this.parameter.setParameterType(newTypeRef(this.context, Object.class.getName()));
			this.context.getParameters().add(this.parameter);
	}

	/** Replies the created parameter.
	 *
	 * @return the parameter.
	 */
	@Pure
	public SarlFormalParameter getSarlFormalParameter() {
		return this.parameter;
	}

	/** Replies the resource to which the formal parameter is attached.
	 */
	@Pure
	public Resource eResource() {
		return getSarlFormalParameter().eResource();
	}

	/** Change the type.
	 *
	 * @param type the formal parameter type.
	 */
	public void setParameterType(String type) {
		String typeName;
		if (Strings.isEmpty(type)) {
			typeName = Object.class.getName();
		} else {
			typeName = type;
		}
		this.parameter.setParameterType(newTypeRef(this.context, typeName));
	}

	/** Change the variadic property of the parameter.
	 *
	 * @param isVariadic indicates if the parameter is variadic.
	 */
	public void setVarArg(boolean isVariadic) {
		this.parameter.setVarArg(isVariadic);
	}

	/** Replies the default value of the parameter.
	 * @return the default value builder.
	 */
	@Pure
	public IExpressionBuilder getDefaultValue() {
		if (this.defaultValue == null) {
			this.defaultValue = this.expressionProvider.get();
			this.defaultValue.eInit(this.parameter, new Procedures.Procedure1<XExpression>() {
					public void apply(XExpression it) {
						getSarlFormalParameter().setDefaultValue(it);
					}
				});
		}
		return this.defaultValue;
	}

}

