/*
 * $Id$
 *
 * File is automatically generated by the Xtext language generator.
 * Do not change it.
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright 2014-2016 the original authors and authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.lang.codebuilder.builders;

import io.sarl.lang.sarl.SarlScript;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.xbase.lib.Pure;

/** Builder of Sarl scripts.
 *
 * <p>This builder is provided for helping to create Sarl Ecore elements.
 *
 * <p>Do not forget to invoke {@link #finalizeScript()} for creating imports, etc.
 */
@SuppressWarnings("all")
public interface IScriptBuilder {

	/** Create the internal Sarl script.
	 */
	void eInit(Resource resource, String packageName);

	/** Replies the Sarl script.
	 */
	@Pure
	SarlScript getScript();

	/** Replies the resource to which the script is attached.
	 */
	@Pure
	Resource eResource();

	/** Finalize the script.
	 *
	 * <p>The finalization includes: <ul>
	 * <li>The import section is created.</li>
	 * </ul>
	 */
	void finalizeScript();

	/** Create an Event builder.
	 * @param name - the name of the Event.
	 * @return the builder.
	 */
	IEventBuilder addEvent(String name);

	/** Create a Capacity builder.
	 * @param name - the name of the Capacity.
	 * @return the builder.
	 */
	ICapacityBuilder addCapacity(String name);

	/** Create an Agent builder.
	 * @param name - the name of the Agent.
	 * @return the builder.
	 */
	IAgentBuilder addAgent(String name);

	/** Create a Behavior builder.
	 * @param name - the name of the Behavior.
	 * @return the builder.
	 */
	IBehaviorBuilder addBehavior(String name);

	/** Create a Skill builder.
	 * @param name - the name of the Skill.
	 * @return the builder.
	 */
	ISkillBuilder addSkill(String name);

	/** Create a Class builder.
	 * @param name - the name of the Class.
	 * @return the builder.
	 */
	IClassBuilder addClass(String name);

	/** Create an Interface builder.
	 * @param name - the name of the Interface.
	 * @return the builder.
	 */
	IInterfaceBuilder addInterface(String name);

	/** Create an Enum builder.
	 * @param name - the name of the Enum.
	 * @return the builder.
	 */
	IEnumBuilder addEnum(String name);

	/** Create an AnnotationType builder.
	 * @param name - the name of the AnnotationType.
	 * @return the builder.
	 */
	IAnnotationTypeBuilder addAnnotationType(String name);

}

