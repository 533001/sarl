/*
 * $Id$
 *
 * File is automatically generated by the Xtext language generator.
 * Do not change it.
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright 2014-2016 the original authors and authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.lang.documentation;

import io.sarl.lang.services.SARLGrammarAccess;
import javax.inject.Inject;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.AbstractRule;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.UntilToken;
import org.eclipse.xtext.util.Strings;
import org.eclipse.xtext.xbase.lib.Pure;

/** Build a documentation string.
 */
public class DocumentationBuilder implements IDocumentationBuilder {

	private AbstractRule mlRule;

	private AbstractRule slRule;

	private String startTag;

	private String endTag;

	@Inject
	private IDocumentationFormatter docFormatter;

	@Inject
	public void setGrammarAccess(SARLGrammarAccess access) {
		this.mlRule = access.getML_COMMENTRule();
		this.slRule = access.getSL_COMMENTRule();
		for (AbstractElement element : ((Group) this.mlRule.getAlternatives()).getElements()) {
			if (element instanceof Keyword && Strings.isEmpty(this.startTag)) {
				this.startTag = ((Keyword) element).getValue();
			} else if (element instanceof UntilToken && Strings.isEmpty(this.endTag)) {
				this.endTag = ((Keyword) ((UntilToken) element).getTerminal()).getValue();
			}
		}
	}

	@Pure
	public AbstractRule getMLCommentRule() {
		return this.mlRule;
	}

	@Pure
	public AbstractRule getSLCommentRule() {
		return this.slRule;
	}

	@Pure
	public IDocumentationFormatter getDocumentationFormatter() {
		return this.docFormatter;
	}

	@Pure
	public String build(String doc) {
		StringBuilder formattedDoc = new StringBuilder();
		if (!Strings.isEmpty(doc)) {
			formattedDoc.append(this.startTag).append(" ");
			formattedDoc.append(getDocumentationFormatter().format(doc));
			formattedDoc.append(" ").append(this.endTag).append(Strings.newLine());
		}
		return formattedDoc.toString();
	}

}

