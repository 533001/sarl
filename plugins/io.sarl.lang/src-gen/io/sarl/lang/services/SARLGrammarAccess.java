/*
* generated by Xtext
*/
package io.sarl.lang.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtend.core.services.XtendGrammarAccess;
import org.eclipse.xtext.xbase.annotations.services.XbaseWithAnnotationsGrammarAccess;
import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class SARLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class SarlScriptElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SarlScript");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSarlScriptAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cPackageKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cImportSectionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cImportSectionXImportSectionParserRuleCall_2_0 = (RuleCall)cImportSectionAssignment_2.eContents().get(0);
		private final Assignment cElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cElementsTypeParserRuleCall_3_0 = (RuleCall)cElementsAssignment_3.eContents().get(0);
		
		//SarlScript returns xtend::XtendFile:
		//	{SarlScript} ("package" name=QualifiedName ";"?)? importSection=XImportSection? elements+=Type*;
		public ParserRule getRule() { return rule; }

		//{SarlScript} ("package" name=QualifiedName ";"?)? importSection=XImportSection? elements+=Type*
		public Group getGroup() { return cGroup; }

		//{SarlScript}
		public Action getSarlScriptAction_0() { return cSarlScriptAction_0; }

		//("package" name=QualifiedName ";"?)?
		public Group getGroup_1() { return cGroup_1; }

		//"package"
		public Keyword getPackageKeyword_1_0() { return cPackageKeyword_1_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_1_0() { return cNameQualifiedNameParserRuleCall_1_1_0; }

		//";"?
		public Keyword getSemicolonKeyword_1_2() { return cSemicolonKeyword_1_2; }

		//importSection=XImportSection?
		public Assignment getImportSectionAssignment_2() { return cImportSectionAssignment_2; }

		//XImportSection
		public RuleCall getImportSectionXImportSectionParserRuleCall_2_0() { return cImportSectionXImportSectionParserRuleCall_2_0; }

		//elements+=Type*
		public Assignment getElementsAssignment_3() { return cElementsAssignment_3; }

		//Type
		public RuleCall getElementsTypeParserRuleCall_3_0() { return cElementsTypeParserRuleCall_3_0; }
	}

	public class VarArgTokenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VarArgToken");
		private final Keyword cAsteriskKeyword = (Keyword)rule.eContents().get(1);
		
		//VarArgToken:
		//	"*";
		public ParserRule getRule() { return rule; }

		//"*"
		public Keyword getAsteriskKeyword() { return cAsteriskKeyword; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSarlEventParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSarlCapacityParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSarlAgentParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSarlBehaviorParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cSarlSkillParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cSarlClassParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cSarlInterfaceParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cSarlEnumParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cSarlAnnotationTypeParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		
		//Type returns xtend::XtendTypeDeclaration:
		//	SarlEvent | SarlCapacity | SarlAgent | SarlBehavior | SarlSkill | SarlClass | SarlInterface | SarlEnum |
		//	SarlAnnotationType;
		public ParserRule getRule() { return rule; }

		//SarlEvent | SarlCapacity | SarlAgent | SarlBehavior | SarlSkill | SarlClass | SarlInterface | SarlEnum |
		//SarlAnnotationType
		public Alternatives getAlternatives() { return cAlternatives; }

		//SarlEvent
		public RuleCall getSarlEventParserRuleCall_0() { return cSarlEventParserRuleCall_0; }

		//SarlCapacity
		public RuleCall getSarlCapacityParserRuleCall_1() { return cSarlCapacityParserRuleCall_1; }

		//SarlAgent
		public RuleCall getSarlAgentParserRuleCall_2() { return cSarlAgentParserRuleCall_2; }

		//SarlBehavior
		public RuleCall getSarlBehaviorParserRuleCall_3() { return cSarlBehaviorParserRuleCall_3; }

		//SarlSkill
		public RuleCall getSarlSkillParserRuleCall_4() { return cSarlSkillParserRuleCall_4; }

		//SarlClass
		public RuleCall getSarlClassParserRuleCall_5() { return cSarlClassParserRuleCall_5; }

		//SarlInterface
		public RuleCall getSarlInterfaceParserRuleCall_6() { return cSarlInterfaceParserRuleCall_6; }

		//SarlEnum
		public RuleCall getSarlEnumParserRuleCall_7() { return cSarlEnumParserRuleCall_7; }

		//SarlAnnotationType
		public RuleCall getSarlAnnotationTypeParserRuleCall_8() { return cSarlAnnotationTypeParserRuleCall_8; }
	}

	public class MemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Member");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSarlFieldParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSarlConstructorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSarlActionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSarlClassParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cSarlInterfaceParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cSarlEnumParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cSarlAnnotationTypeParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//Member returns xtend::XtendMember:
		//	SarlField | SarlConstructor | SarlAction | SarlClass | SarlInterface | SarlEnum | SarlAnnotationType;
		public ParserRule getRule() { return rule; }

		//SarlField | SarlConstructor | SarlAction | SarlClass | SarlInterface | SarlEnum | SarlAnnotationType
		public Alternatives getAlternatives() { return cAlternatives; }

		//SarlField
		public RuleCall getSarlFieldParserRuleCall_0() { return cSarlFieldParserRuleCall_0; }

		//SarlConstructor
		public RuleCall getSarlConstructorParserRuleCall_1() { return cSarlConstructorParserRuleCall_1; }

		//SarlAction
		public RuleCall getSarlActionParserRuleCall_2() { return cSarlActionParserRuleCall_2; }

		//SarlClass
		public RuleCall getSarlClassParserRuleCall_3() { return cSarlClassParserRuleCall_3; }

		//SarlInterface
		public RuleCall getSarlInterfaceParserRuleCall_4() { return cSarlInterfaceParserRuleCall_4; }

		//SarlEnum
		public RuleCall getSarlEnumParserRuleCall_5() { return cSarlEnumParserRuleCall_5; }

		//SarlAnnotationType
		public RuleCall getSarlAnnotationTypeParserRuleCall_6() { return cSarlAnnotationTypeParserRuleCall_6; }
	}

	public class SarlFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SarlField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXtendFieldAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationsXAnnotationParserRuleCall_1_0 = (RuleCall)cAnnotationsAssignment_1.eContents().get(0);
		private final Action cXtendFieldAnnotationInfoAction_2 = (Action)cGroup.eContents().get(2);
		private final Assignment cModifiersAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cModifiersCommonModifierParserRuleCall_3_0 = (RuleCall)cModifiersAssignment_3.eContents().get(0);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cAlternatives_4.eContents().get(0);
		private final Assignment cModifiersAssignment_4_0_0 = (Assignment)cGroup_4_0.eContents().get(0);
		private final RuleCall cModifiersFieldModifierParserRuleCall_4_0_0_0 = (RuleCall)cModifiersAssignment_4_0_0.eContents().get(0);
		private final Assignment cModifiersAssignment_4_0_1 = (Assignment)cGroup_4_0.eContents().get(1);
		private final RuleCall cModifiersCommonModifierParserRuleCall_4_0_1_0 = (RuleCall)cModifiersAssignment_4_0_1.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cAlternatives_4.eContents().get(1);
		private final Assignment cModifiersAssignment_4_1_0 = (Assignment)cGroup_4_1.eContents().get(0);
		private final Keyword cModifiersExtensionKeyword_4_1_0_0 = (Keyword)cModifiersAssignment_4_1_0.eContents().get(0);
		private final Alternatives cAlternatives_4_1_1 = (Alternatives)cGroup_4_1.eContents().get(1);
		private final Assignment cModifiersAssignment_4_1_1_0 = (Assignment)cAlternatives_4_1_1.eContents().get(0);
		private final RuleCall cModifiersFieldModifierParserRuleCall_4_1_1_0_0 = (RuleCall)cModifiersAssignment_4_1_1_0.eContents().get(0);
		private final Assignment cModifiersAssignment_4_1_1_1 = (Assignment)cAlternatives_4_1_1.eContents().get(1);
		private final RuleCall cModifiersCommonModifierParserRuleCall_4_1_1_1_0 = (RuleCall)cModifiersAssignment_4_1_1_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cAlternatives_4.eContents().get(2);
		private final Assignment cModifiersAssignment_4_2_0 = (Assignment)cGroup_4_2.eContents().get(0);
		private final RuleCall cModifiersFieldModifierParserRuleCall_4_2_0_0 = (RuleCall)cModifiersAssignment_4_2_0.eContents().get(0);
		private final Assignment cModifiersAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cModifiersCommonModifierParserRuleCall_4_2_1_0 = (RuleCall)cModifiersAssignment_4_2_1.eContents().get(0);
		private final Assignment cModifiersAssignment_4_2_2 = (Assignment)cGroup_4_2.eContents().get(2);
		private final Keyword cModifiersExtensionKeyword_4_2_2_0 = (Keyword)cModifiersAssignment_4_2_2.eContents().get(0);
		private final Assignment cModifiersAssignment_4_2_3 = (Assignment)cGroup_4_2.eContents().get(3);
		private final RuleCall cModifiersCommonModifierParserRuleCall_4_2_3_0 = (RuleCall)cModifiersAssignment_4_2_3.eContents().get(0);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Group cGroup_5_0 = (Group)cAlternatives_5.eContents().get(0);
		private final Group cGroup_5_0_0 = (Group)cGroup_5_0.eContents().get(0);
		private final Assignment cNameAssignment_5_0_0_0 = (Assignment)cGroup_5_0_0.eContents().get(0);
		private final RuleCall cNameValidIDParserRuleCall_5_0_0_0_0 = (RuleCall)cNameAssignment_5_0_0_0.eContents().get(0);
		private final Keyword cColonKeyword_5_0_0_1 = (Keyword)cGroup_5_0_0.eContents().get(1);
		private final Assignment cTypeAssignment_5_0_0_2 = (Assignment)cGroup_5_0_0.eContents().get(2);
		private final RuleCall cTypeJvmTypeReferenceParserRuleCall_5_0_0_2_0 = (RuleCall)cTypeAssignment_5_0_0_2.eContents().get(0);
		private final Assignment cNameAssignment_5_1 = (Assignment)cAlternatives_5.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_5_1_0 = (RuleCall)cNameAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cEqualsSignKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cInitialValueAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cInitialValueXExpressionParserRuleCall_6_1_0 = (RuleCall)cInitialValueAssignment_6_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//SarlField returns xtend::XtendMember:
		//	{xtend::XtendField} annotations+=XAnnotation* {xtend::XtendField.annotationInfo=current} modifiers+=CommonModifier*
		//	(modifiers+=FieldModifier modifiers+=CommonModifier* | modifiers+="extension" (modifiers+=FieldModifier |
		//	modifiers+=CommonModifier)* | modifiers+=FieldModifier modifiers+=CommonModifier* modifiers+="extension"
		//	modifiers+=CommonModifier*) (=> (name=ValidID ":" type=JvmTypeReference) | name=ValidID) ("="
		//	initialValue=XExpression)? ";"?;
		public ParserRule getRule() { return rule; }

		//{xtend::XtendField} annotations+=XAnnotation* {xtend::XtendField.annotationInfo=current} modifiers+=CommonModifier*
		//(modifiers+=FieldModifier modifiers+=CommonModifier* | modifiers+="extension" (modifiers+=FieldModifier |
		//modifiers+=CommonModifier)* | modifiers+=FieldModifier modifiers+=CommonModifier* modifiers+="extension"
		//modifiers+=CommonModifier*) (=> (name=ValidID ":" type=JvmTypeReference) | name=ValidID) ("="
		//initialValue=XExpression)? ";"?
		public Group getGroup() { return cGroup; }

		//{xtend::XtendField}
		public Action getXtendFieldAction_0() { return cXtendFieldAction_0; }

		//annotations+=XAnnotation*
		public Assignment getAnnotationsAssignment_1() { return cAnnotationsAssignment_1; }

		//XAnnotation
		public RuleCall getAnnotationsXAnnotationParserRuleCall_1_0() { return cAnnotationsXAnnotationParserRuleCall_1_0; }

		//{xtend::XtendField.annotationInfo=current}
		public Action getXtendFieldAnnotationInfoAction_2() { return cXtendFieldAnnotationInfoAction_2; }

		//modifiers+=CommonModifier*
		public Assignment getModifiersAssignment_3() { return cModifiersAssignment_3; }

		//CommonModifier
		public RuleCall getModifiersCommonModifierParserRuleCall_3_0() { return cModifiersCommonModifierParserRuleCall_3_0; }

		//modifiers+=FieldModifier modifiers+=CommonModifier* | modifiers+="extension" (modifiers+=FieldModifier |
		//modifiers+=CommonModifier)* | modifiers+=FieldModifier modifiers+=CommonModifier* modifiers+="extension"
		//modifiers+=CommonModifier*
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//modifiers+=FieldModifier modifiers+=CommonModifier*
		public Group getGroup_4_0() { return cGroup_4_0; }

		//modifiers+=FieldModifier
		public Assignment getModifiersAssignment_4_0_0() { return cModifiersAssignment_4_0_0; }

		//FieldModifier
		public RuleCall getModifiersFieldModifierParserRuleCall_4_0_0_0() { return cModifiersFieldModifierParserRuleCall_4_0_0_0; }

		//modifiers+=CommonModifier*
		public Assignment getModifiersAssignment_4_0_1() { return cModifiersAssignment_4_0_1; }

		//CommonModifier
		public RuleCall getModifiersCommonModifierParserRuleCall_4_0_1_0() { return cModifiersCommonModifierParserRuleCall_4_0_1_0; }

		//modifiers+="extension" (modifiers+=FieldModifier | modifiers+=CommonModifier)*
		public Group getGroup_4_1() { return cGroup_4_1; }

		//modifiers+="extension"
		public Assignment getModifiersAssignment_4_1_0() { return cModifiersAssignment_4_1_0; }

		//"extension"
		public Keyword getModifiersExtensionKeyword_4_1_0_0() { return cModifiersExtensionKeyword_4_1_0_0; }

		//(modifiers+=FieldModifier | modifiers+=CommonModifier)*
		public Alternatives getAlternatives_4_1_1() { return cAlternatives_4_1_1; }

		//modifiers+=FieldModifier
		public Assignment getModifiersAssignment_4_1_1_0() { return cModifiersAssignment_4_1_1_0; }

		//FieldModifier
		public RuleCall getModifiersFieldModifierParserRuleCall_4_1_1_0_0() { return cModifiersFieldModifierParserRuleCall_4_1_1_0_0; }

		//modifiers+=CommonModifier
		public Assignment getModifiersAssignment_4_1_1_1() { return cModifiersAssignment_4_1_1_1; }

		//CommonModifier
		public RuleCall getModifiersCommonModifierParserRuleCall_4_1_1_1_0() { return cModifiersCommonModifierParserRuleCall_4_1_1_1_0; }

		//modifiers+=FieldModifier modifiers+=CommonModifier* modifiers+="extension" modifiers+=CommonModifier*
		public Group getGroup_4_2() { return cGroup_4_2; }

		//modifiers+=FieldModifier
		public Assignment getModifiersAssignment_4_2_0() { return cModifiersAssignment_4_2_0; }

		//FieldModifier
		public RuleCall getModifiersFieldModifierParserRuleCall_4_2_0_0() { return cModifiersFieldModifierParserRuleCall_4_2_0_0; }

		//modifiers+=CommonModifier*
		public Assignment getModifiersAssignment_4_2_1() { return cModifiersAssignment_4_2_1; }

		//CommonModifier
		public RuleCall getModifiersCommonModifierParserRuleCall_4_2_1_0() { return cModifiersCommonModifierParserRuleCall_4_2_1_0; }

		//modifiers+="extension"
		public Assignment getModifiersAssignment_4_2_2() { return cModifiersAssignment_4_2_2; }

		//"extension"
		public Keyword getModifiersExtensionKeyword_4_2_2_0() { return cModifiersExtensionKeyword_4_2_2_0; }

		//modifiers+=CommonModifier*
		public Assignment getModifiersAssignment_4_2_3() { return cModifiersAssignment_4_2_3; }

		//CommonModifier
		public RuleCall getModifiersCommonModifierParserRuleCall_4_2_3_0() { return cModifiersCommonModifierParserRuleCall_4_2_3_0; }

		//=> (name=ValidID ":" type=JvmTypeReference) | name=ValidID
		public Alternatives getAlternatives_5() { return cAlternatives_5; }

		//=> (name=ValidID ":" type=JvmTypeReference)
		public Group getGroup_5_0() { return cGroup_5_0; }

		//name=ValidID ":" type=JvmTypeReference
		public Group getGroup_5_0_0() { return cGroup_5_0_0; }

		//name=ValidID
		public Assignment getNameAssignment_5_0_0_0() { return cNameAssignment_5_0_0_0; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_5_0_0_0_0() { return cNameValidIDParserRuleCall_5_0_0_0_0; }

		//":"
		public Keyword getColonKeyword_5_0_0_1() { return cColonKeyword_5_0_0_1; }

		//type=JvmTypeReference
		public Assignment getTypeAssignment_5_0_0_2() { return cTypeAssignment_5_0_0_2; }

		//JvmTypeReference
		public RuleCall getTypeJvmTypeReferenceParserRuleCall_5_0_0_2_0() { return cTypeJvmTypeReferenceParserRuleCall_5_0_0_2_0; }

		//name=ValidID
		public Assignment getNameAssignment_5_1() { return cNameAssignment_5_1; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_5_1_0() { return cNameValidIDParserRuleCall_5_1_0; }

		//("=" initialValue=XExpression)?
		public Group getGroup_6() { return cGroup_6; }

		//"="
		public Keyword getEqualsSignKeyword_6_0() { return cEqualsSignKeyword_6_0; }

		//initialValue=XExpression
		public Assignment getInitialValueAssignment_6_1() { return cInitialValueAssignment_6_1; }

		//XExpression
		public RuleCall getInitialValueXExpressionParserRuleCall_6_1_0() { return cInitialValueXExpressionParserRuleCall_6_1_0; }

		//";"?
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }
	}

	public class SarlActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SarlAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSarlActionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationsXAnnotationParserRuleCall_1_0 = (RuleCall)cAnnotationsAssignment_1.eContents().get(0);
		private final Action cSarlActionAnnotationInfoAction_2 = (Action)cGroup.eContents().get(2);
		private final Assignment cModifiersAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cModifiersCommonModifierParserRuleCall_3_0 = (RuleCall)cModifiersAssignment_3.eContents().get(0);
		private final Assignment cModifiersAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cModifiersMethodModifierParserRuleCall_4_0 = (RuleCall)cModifiersAssignment_4.eContents().get(0);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Assignment cModifiersAssignment_5_0 = (Assignment)cAlternatives_5.eContents().get(0);
		private final RuleCall cModifiersCommonModifierParserRuleCall_5_0_0 = (RuleCall)cModifiersAssignment_5_0.eContents().get(0);
		private final Assignment cModifiersAssignment_5_1 = (Assignment)cAlternatives_5.eContents().get(1);
		private final RuleCall cModifiersMethodModifierParserRuleCall_5_1_0 = (RuleCall)cModifiersAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cLessThanSignKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cTypeParametersAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cTypeParametersJvmTypeParameterParserRuleCall_6_1_0 = (RuleCall)cTypeParametersAssignment_6_1.eContents().get(0);
		private final Group cGroup_6_2 = (Group)cGroup_6.eContents().get(2);
		private final Keyword cCommaKeyword_6_2_0 = (Keyword)cGroup_6_2.eContents().get(0);
		private final Assignment cTypeParametersAssignment_6_2_1 = (Assignment)cGroup_6_2.eContents().get(1);
		private final RuleCall cTypeParametersJvmTypeParameterParserRuleCall_6_2_1_0 = (RuleCall)cTypeParametersAssignment_6_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_6_3 = (Keyword)cGroup_6.eContents().get(3);
		private final Assignment cNameAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cNameFunctionIDParserRuleCall_7_0 = (RuleCall)cNameAssignment_7.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cLeftParenthesisKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Group cGroup_8_1 = (Group)cGroup_8.eContents().get(1);
		private final Assignment cParametersAssignment_8_1_0 = (Assignment)cGroup_8_1.eContents().get(0);
		private final RuleCall cParametersParameterParserRuleCall_8_1_0_0 = (RuleCall)cParametersAssignment_8_1_0.eContents().get(0);
		private final Group cGroup_8_1_1 = (Group)cGroup_8_1.eContents().get(1);
		private final Keyword cCommaKeyword_8_1_1_0 = (Keyword)cGroup_8_1_1.eContents().get(0);
		private final Assignment cParametersAssignment_8_1_1_1 = (Assignment)cGroup_8_1_1.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_8_1_1_1_0 = (RuleCall)cParametersAssignment_8_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8_2 = (Keyword)cGroup_8.eContents().get(2);
		private final Alternatives cAlternatives_9 = (Alternatives)cGroup.eContents().get(9);
		private final Group cGroup_9_0 = (Group)cAlternatives_9.eContents().get(0);
		private final Keyword cColonKeyword_9_0_0 = (Keyword)cGroup_9_0.eContents().get(0);
		private final Group cGroup_9_0_1 = (Group)cGroup_9_0.eContents().get(1);
		private final Group cGroup_9_0_1_0 = (Group)cGroup_9_0_1.eContents().get(0);
		private final Assignment cReturnTypeAssignment_9_0_1_0_0 = (Assignment)cGroup_9_0_1_0.eContents().get(0);
		private final RuleCall cReturnTypeJvmTypeReferenceParserRuleCall_9_0_1_0_0_0 = (RuleCall)cReturnTypeAssignment_9_0_1_0_0.eContents().get(0);
		private final Assignment cCreateExtensionInfoAssignment_9_0_1_0_1 = (Assignment)cGroup_9_0_1_0.eContents().get(1);
		private final RuleCall cCreateExtensionInfoCreateExtensionInfoParserRuleCall_9_0_1_0_1_0 = (RuleCall)cCreateExtensionInfoAssignment_9_0_1_0_1.eContents().get(0);
		private final Group cGroup_9_1 = (Group)cAlternatives_9.eContents().get(1);
		private final Assignment cReturnTypeAssignment_9_1_0 = (Assignment)cGroup_9_1.eContents().get(0);
		private final RuleCall cReturnTypeTypeReferenceWithTypeArgsParserRuleCall_9_1_0_0 = (RuleCall)cReturnTypeAssignment_9_1_0.eContents().get(0);
		private final Group cGroup_9_2 = (Group)cAlternatives_9.eContents().get(2);
		private final Assignment cReturnTypeAssignment_9_2_0 = (Assignment)cGroup_9_2.eContents().get(0);
		private final RuleCall cReturnTypeTypeReferenceNoTypeArgsParserRuleCall_9_2_0_0 = (RuleCall)cReturnTypeAssignment_9_2_0.eContents().get(0);
		private final Group cGroup_9_3 = (Group)cAlternatives_9.eContents().get(3);
		private final Assignment cCreateExtensionInfoAssignment_9_3_0 = (Assignment)cGroup_9_3.eContents().get(0);
		private final RuleCall cCreateExtensionInfoCreateExtensionInfoParserRuleCall_9_3_0_0 = (RuleCall)cCreateExtensionInfoAssignment_9_3_0.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_10 = (UnorderedGroup)cGroup.eContents().get(10);
		private final Group cGroup_10_0 = (Group)cUnorderedGroup_10.eContents().get(0);
		private final Keyword cThrowsKeyword_10_0_0 = (Keyword)cGroup_10_0.eContents().get(0);
		private final Assignment cExceptionsAssignment_10_0_1 = (Assignment)cGroup_10_0.eContents().get(1);
		private final RuleCall cExceptionsJvmTypeReferenceParserRuleCall_10_0_1_0 = (RuleCall)cExceptionsAssignment_10_0_1.eContents().get(0);
		private final Group cGroup_10_0_2 = (Group)cGroup_10_0.eContents().get(2);
		private final Keyword cCommaKeyword_10_0_2_0 = (Keyword)cGroup_10_0_2.eContents().get(0);
		private final Assignment cExceptionsAssignment_10_0_2_1 = (Assignment)cGroup_10_0_2.eContents().get(1);
		private final RuleCall cExceptionsJvmTypeReferenceParserRuleCall_10_0_2_1_0 = (RuleCall)cExceptionsAssignment_10_0_2_1.eContents().get(0);
		private final Group cGroup_10_1 = (Group)cUnorderedGroup_10.eContents().get(1);
		private final Keyword cFiresKeyword_10_1_0 = (Keyword)cGroup_10_1.eContents().get(0);
		private final Assignment cFiredEventsAssignment_10_1_1 = (Assignment)cGroup_10_1.eContents().get(1);
		private final RuleCall cFiredEventsJvmTypeReferenceParserRuleCall_10_1_1_0 = (RuleCall)cFiredEventsAssignment_10_1_1.eContents().get(0);
		private final Group cGroup_10_1_2 = (Group)cGroup_10_1.eContents().get(2);
		private final Keyword cCommaKeyword_10_1_2_0 = (Keyword)cGroup_10_1_2.eContents().get(0);
		private final Assignment cFiredEventsAssignment_10_1_2_1 = (Assignment)cGroup_10_1_2.eContents().get(1);
		private final RuleCall cFiredEventsJvmTypeReferenceParserRuleCall_10_1_2_1_0 = (RuleCall)cFiredEventsAssignment_10_1_2_1.eContents().get(0);
		private final Alternatives cAlternatives_11 = (Alternatives)cGroup.eContents().get(11);
		private final Assignment cExpressionAssignment_11_0 = (Assignment)cAlternatives_11.eContents().get(0);
		private final RuleCall cExpressionXBlockExpressionParserRuleCall_11_0_0 = (RuleCall)cExpressionAssignment_11_0.eContents().get(0);
		private final Assignment cExpressionAssignment_11_1 = (Assignment)cAlternatives_11.eContents().get(1);
		private final RuleCall cExpressionRichStringParserRuleCall_11_1_0 = (RuleCall)cExpressionAssignment_11_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_11_2 = (Keyword)cAlternatives_11.eContents().get(2);
		
		//SarlAction returns xtend::XtendFunction:
		//	{SarlAction} annotations+=XAnnotation* {SarlAction.annotationInfo=current} modifiers+=CommonModifier*
		//	modifiers+=MethodModifier (modifiers+=CommonModifier | modifiers+=MethodModifier)* ("<"
		//	typeParameters+=JvmTypeParameter ("," typeParameters+=JvmTypeParameter)* ">")? name=FunctionID ("("
		//	(parameters+=Parameter ("," parameters+=Parameter)*)? ")")? (":" => (returnType=JvmTypeReference
		//	createExtensionInfo=CreateExtensionInfo) | => (returnType=TypeReferenceWithTypeArgs) | =>
		//	(returnType=TypeReferenceNoTypeArgs) | => (createExtensionInfo=CreateExtensionInfo))? (("throws"
		//	exceptions+=JvmTypeReference ("," exceptions+=JvmTypeReference)*)? & ("fires" firedEvents+=JvmTypeReference (","
		//	firedEvents+=JvmTypeReference)*)?) (expression=XBlockExpression | expression=RichString | ";")?;
		public ParserRule getRule() { return rule; }

		//{SarlAction} annotations+=XAnnotation* {SarlAction.annotationInfo=current} modifiers+=CommonModifier*
		//modifiers+=MethodModifier (modifiers+=CommonModifier | modifiers+=MethodModifier)* ("<"
		//typeParameters+=JvmTypeParameter ("," typeParameters+=JvmTypeParameter)* ">")? name=FunctionID ("("
		//(parameters+=Parameter ("," parameters+=Parameter)*)? ")")? (":" => (returnType=JvmTypeReference
		//createExtensionInfo=CreateExtensionInfo) | => (returnType=TypeReferenceWithTypeArgs) | =>
		//(returnType=TypeReferenceNoTypeArgs) | => (createExtensionInfo=CreateExtensionInfo))? (("throws"
		//exceptions+=JvmTypeReference ("," exceptions+=JvmTypeReference)*)? & ("fires" firedEvents+=JvmTypeReference (","
		//firedEvents+=JvmTypeReference)*)?) (expression=XBlockExpression | expression=RichString | ";")?
		public Group getGroup() { return cGroup; }

		//{SarlAction}
		public Action getSarlActionAction_0() { return cSarlActionAction_0; }

		//annotations+=XAnnotation*
		public Assignment getAnnotationsAssignment_1() { return cAnnotationsAssignment_1; }

		//XAnnotation
		public RuleCall getAnnotationsXAnnotationParserRuleCall_1_0() { return cAnnotationsXAnnotationParserRuleCall_1_0; }

		//{SarlAction.annotationInfo=current}
		public Action getSarlActionAnnotationInfoAction_2() { return cSarlActionAnnotationInfoAction_2; }

		//modifiers+=CommonModifier*
		public Assignment getModifiersAssignment_3() { return cModifiersAssignment_3; }

		//CommonModifier
		public RuleCall getModifiersCommonModifierParserRuleCall_3_0() { return cModifiersCommonModifierParserRuleCall_3_0; }

		//modifiers+=MethodModifier
		public Assignment getModifiersAssignment_4() { return cModifiersAssignment_4; }

		//MethodModifier
		public RuleCall getModifiersMethodModifierParserRuleCall_4_0() { return cModifiersMethodModifierParserRuleCall_4_0; }

		//(modifiers+=CommonModifier | modifiers+=MethodModifier)*
		public Alternatives getAlternatives_5() { return cAlternatives_5; }

		//modifiers+=CommonModifier
		public Assignment getModifiersAssignment_5_0() { return cModifiersAssignment_5_0; }

		//CommonModifier
		public RuleCall getModifiersCommonModifierParserRuleCall_5_0_0() { return cModifiersCommonModifierParserRuleCall_5_0_0; }

		//modifiers+=MethodModifier
		public Assignment getModifiersAssignment_5_1() { return cModifiersAssignment_5_1; }

		//MethodModifier
		public RuleCall getModifiersMethodModifierParserRuleCall_5_1_0() { return cModifiersMethodModifierParserRuleCall_5_1_0; }

		//("<" typeParameters+=JvmTypeParameter ("," typeParameters+=JvmTypeParameter)* ">")?
		public Group getGroup_6() { return cGroup_6; }

		//"<"
		public Keyword getLessThanSignKeyword_6_0() { return cLessThanSignKeyword_6_0; }

		//typeParameters+=JvmTypeParameter
		public Assignment getTypeParametersAssignment_6_1() { return cTypeParametersAssignment_6_1; }

		//JvmTypeParameter
		public RuleCall getTypeParametersJvmTypeParameterParserRuleCall_6_1_0() { return cTypeParametersJvmTypeParameterParserRuleCall_6_1_0; }

		//("," typeParameters+=JvmTypeParameter)*
		public Group getGroup_6_2() { return cGroup_6_2; }

		//","
		public Keyword getCommaKeyword_6_2_0() { return cCommaKeyword_6_2_0; }

		//typeParameters+=JvmTypeParameter
		public Assignment getTypeParametersAssignment_6_2_1() { return cTypeParametersAssignment_6_2_1; }

		//JvmTypeParameter
		public RuleCall getTypeParametersJvmTypeParameterParserRuleCall_6_2_1_0() { return cTypeParametersJvmTypeParameterParserRuleCall_6_2_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_6_3() { return cGreaterThanSignKeyword_6_3; }

		//name=FunctionID
		public Assignment getNameAssignment_7() { return cNameAssignment_7; }

		//FunctionID
		public RuleCall getNameFunctionIDParserRuleCall_7_0() { return cNameFunctionIDParserRuleCall_7_0; }

		//(=> "(" (parameters+=Parameter ("," parameters+=Parameter)*)? ")")?
		public Group getGroup_8() { return cGroup_8; }

		//=> "("
		public Keyword getLeftParenthesisKeyword_8_0() { return cLeftParenthesisKeyword_8_0; }

		//(parameters+=Parameter ("," parameters+=Parameter)*)?
		public Group getGroup_8_1() { return cGroup_8_1; }

		//parameters+=Parameter
		public Assignment getParametersAssignment_8_1_0() { return cParametersAssignment_8_1_0; }

		//Parameter
		public RuleCall getParametersParameterParserRuleCall_8_1_0_0() { return cParametersParameterParserRuleCall_8_1_0_0; }

		//(=> "," parameters+=Parameter)*
		public Group getGroup_8_1_1() { return cGroup_8_1_1; }

		//=> ","
		public Keyword getCommaKeyword_8_1_1_0() { return cCommaKeyword_8_1_1_0; }

		//parameters+=Parameter
		public Assignment getParametersAssignment_8_1_1_1() { return cParametersAssignment_8_1_1_1; }

		//Parameter
		public RuleCall getParametersParameterParserRuleCall_8_1_1_1_0() { return cParametersParameterParserRuleCall_8_1_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_8_2() { return cRightParenthesisKeyword_8_2; }

		//(":" => (returnType=JvmTypeReference createExtensionInfo=CreateExtensionInfo) | =>
		//(returnType=TypeReferenceWithTypeArgs) | => (returnType=TypeReferenceNoTypeArgs) | =>
		//(createExtensionInfo=CreateExtensionInfo))?
		public Alternatives getAlternatives_9() { return cAlternatives_9; }

		//":" => (returnType=JvmTypeReference createExtensionInfo=CreateExtensionInfo)
		public Group getGroup_9_0() { return cGroup_9_0; }

		//":"
		public Keyword getColonKeyword_9_0_0() { return cColonKeyword_9_0_0; }

		//=> (returnType=JvmTypeReference createExtensionInfo=CreateExtensionInfo)
		public Group getGroup_9_0_1() { return cGroup_9_0_1; }

		//returnType=JvmTypeReference createExtensionInfo=CreateExtensionInfo
		public Group getGroup_9_0_1_0() { return cGroup_9_0_1_0; }

		//returnType=JvmTypeReference
		public Assignment getReturnTypeAssignment_9_0_1_0_0() { return cReturnTypeAssignment_9_0_1_0_0; }

		//JvmTypeReference
		public RuleCall getReturnTypeJvmTypeReferenceParserRuleCall_9_0_1_0_0_0() { return cReturnTypeJvmTypeReferenceParserRuleCall_9_0_1_0_0_0; }

		//createExtensionInfo=CreateExtensionInfo
		public Assignment getCreateExtensionInfoAssignment_9_0_1_0_1() { return cCreateExtensionInfoAssignment_9_0_1_0_1; }

		//CreateExtensionInfo
		public RuleCall getCreateExtensionInfoCreateExtensionInfoParserRuleCall_9_0_1_0_1_0() { return cCreateExtensionInfoCreateExtensionInfoParserRuleCall_9_0_1_0_1_0; }

		//=> (returnType=TypeReferenceWithTypeArgs)
		public Group getGroup_9_1() { return cGroup_9_1; }

		//returnType=TypeReferenceWithTypeArgs
		public Assignment getReturnTypeAssignment_9_1_0() { return cReturnTypeAssignment_9_1_0; }

		//TypeReferenceWithTypeArgs
		public RuleCall getReturnTypeTypeReferenceWithTypeArgsParserRuleCall_9_1_0_0() { return cReturnTypeTypeReferenceWithTypeArgsParserRuleCall_9_1_0_0; }

		//=> (returnType=TypeReferenceNoTypeArgs)
		public Group getGroup_9_2() { return cGroup_9_2; }

		//returnType=TypeReferenceNoTypeArgs
		public Assignment getReturnTypeAssignment_9_2_0() { return cReturnTypeAssignment_9_2_0; }

		//TypeReferenceNoTypeArgs
		public RuleCall getReturnTypeTypeReferenceNoTypeArgsParserRuleCall_9_2_0_0() { return cReturnTypeTypeReferenceNoTypeArgsParserRuleCall_9_2_0_0; }

		//=> (createExtensionInfo=CreateExtensionInfo)
		public Group getGroup_9_3() { return cGroup_9_3; }

		//createExtensionInfo=CreateExtensionInfo
		public Assignment getCreateExtensionInfoAssignment_9_3_0() { return cCreateExtensionInfoAssignment_9_3_0; }

		//CreateExtensionInfo
		public RuleCall getCreateExtensionInfoCreateExtensionInfoParserRuleCall_9_3_0_0() { return cCreateExtensionInfoCreateExtensionInfoParserRuleCall_9_3_0_0; }

		//("throws" exceptions+=JvmTypeReference ("," exceptions+=JvmTypeReference)*)? & ("fires" firedEvents+=JvmTypeReference
		//("," firedEvents+=JvmTypeReference)*)?
		public UnorderedGroup getUnorderedGroup_10() { return cUnorderedGroup_10; }

		//("throws" exceptions+=JvmTypeReference ("," exceptions+=JvmTypeReference)*)?
		public Group getGroup_10_0() { return cGroup_10_0; }

		//"throws"
		public Keyword getThrowsKeyword_10_0_0() { return cThrowsKeyword_10_0_0; }

		//exceptions+=JvmTypeReference
		public Assignment getExceptionsAssignment_10_0_1() { return cExceptionsAssignment_10_0_1; }

		//JvmTypeReference
		public RuleCall getExceptionsJvmTypeReferenceParserRuleCall_10_0_1_0() { return cExceptionsJvmTypeReferenceParserRuleCall_10_0_1_0; }

		//("," exceptions+=JvmTypeReference)*
		public Group getGroup_10_0_2() { return cGroup_10_0_2; }

		//","
		public Keyword getCommaKeyword_10_0_2_0() { return cCommaKeyword_10_0_2_0; }

		//exceptions+=JvmTypeReference
		public Assignment getExceptionsAssignment_10_0_2_1() { return cExceptionsAssignment_10_0_2_1; }

		//JvmTypeReference
		public RuleCall getExceptionsJvmTypeReferenceParserRuleCall_10_0_2_1_0() { return cExceptionsJvmTypeReferenceParserRuleCall_10_0_2_1_0; }

		//("fires" firedEvents+=JvmTypeReference ("," firedEvents+=JvmTypeReference)*)?
		public Group getGroup_10_1() { return cGroup_10_1; }

		//"fires"
		public Keyword getFiresKeyword_10_1_0() { return cFiresKeyword_10_1_0; }

		//firedEvents+=JvmTypeReference
		public Assignment getFiredEventsAssignment_10_1_1() { return cFiredEventsAssignment_10_1_1; }

		//JvmTypeReference
		public RuleCall getFiredEventsJvmTypeReferenceParserRuleCall_10_1_1_0() { return cFiredEventsJvmTypeReferenceParserRuleCall_10_1_1_0; }

		//("," firedEvents+=JvmTypeReference)*
		public Group getGroup_10_1_2() { return cGroup_10_1_2; }

		//","
		public Keyword getCommaKeyword_10_1_2_0() { return cCommaKeyword_10_1_2_0; }

		//firedEvents+=JvmTypeReference
		public Assignment getFiredEventsAssignment_10_1_2_1() { return cFiredEventsAssignment_10_1_2_1; }

		//JvmTypeReference
		public RuleCall getFiredEventsJvmTypeReferenceParserRuleCall_10_1_2_1_0() { return cFiredEventsJvmTypeReferenceParserRuleCall_10_1_2_1_0; }

		//(expression=XBlockExpression | expression=RichString | ";")?
		public Alternatives getAlternatives_11() { return cAlternatives_11; }

		//expression=XBlockExpression
		public Assignment getExpressionAssignment_11_0() { return cExpressionAssignment_11_0; }

		//XBlockExpression
		public RuleCall getExpressionXBlockExpressionParserRuleCall_11_0_0() { return cExpressionXBlockExpressionParserRuleCall_11_0_0; }

		//expression=RichString
		public Assignment getExpressionAssignment_11_1() { return cExpressionAssignment_11_1; }

		//RichString
		public RuleCall getExpressionRichStringParserRuleCall_11_1_0() { return cExpressionRichStringParserRuleCall_11_1_0; }

		//";"
		public Keyword getSemicolonKeyword_11_2() { return cSemicolonKeyword_11_2; }
	}

	public class SarlBehaviorUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SarlBehaviorUnit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSarlBehaviorUnitAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationsXAnnotationParserRuleCall_1_0 = (RuleCall)cAnnotationsAssignment_1.eContents().get(0);
		private final Action cSarlBehaviorUnitAnnotationInfoAction_2 = (Action)cGroup.eContents().get(2);
		private final Keyword cOnKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameJvmParameterizedTypeReferenceParserRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cLeftSquareBracketKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cGuardAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cGuardXExpressionParserRuleCall_5_1_0 = (RuleCall)cGuardAssignment_5_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Alternatives cAlternatives_6 = (Alternatives)cGroup.eContents().get(6);
		private final Assignment cExpressionAssignment_6_0 = (Assignment)cAlternatives_6.eContents().get(0);
		private final RuleCall cExpressionXBlockExpressionParserRuleCall_6_0_0 = (RuleCall)cExpressionAssignment_6_0.eContents().get(0);
		private final Assignment cExpressionAssignment_6_1 = (Assignment)cAlternatives_6.eContents().get(1);
		private final RuleCall cExpressionRichStringParserRuleCall_6_1_0 = (RuleCall)cExpressionAssignment_6_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_6_2 = (Keyword)cAlternatives_6.eContents().get(2);
		
		//SarlBehaviorUnit returns xtend::XtendMember:
		//	{SarlBehaviorUnit} annotations+=XAnnotation* {SarlBehaviorUnit.annotationInfo=current} "on"
		//	name=JvmParameterizedTypeReference ("[" guard=XExpression "]")? (expression=XBlockExpression | expression=RichString |
		//	";");
		public ParserRule getRule() { return rule; }

		//{SarlBehaviorUnit} annotations+=XAnnotation* {SarlBehaviorUnit.annotationInfo=current} "on"
		//name=JvmParameterizedTypeReference ("[" guard=XExpression "]")? (expression=XBlockExpression | expression=RichString |
		//";")
		public Group getGroup() { return cGroup; }

		//{SarlBehaviorUnit}
		public Action getSarlBehaviorUnitAction_0() { return cSarlBehaviorUnitAction_0; }

		//annotations+=XAnnotation*
		public Assignment getAnnotationsAssignment_1() { return cAnnotationsAssignment_1; }

		//XAnnotation
		public RuleCall getAnnotationsXAnnotationParserRuleCall_1_0() { return cAnnotationsXAnnotationParserRuleCall_1_0; }

		//{SarlBehaviorUnit.annotationInfo=current}
		public Action getSarlBehaviorUnitAnnotationInfoAction_2() { return cSarlBehaviorUnitAnnotationInfoAction_2; }

		//"on"
		public Keyword getOnKeyword_3() { return cOnKeyword_3; }

		//name=JvmParameterizedTypeReference
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }

		//JvmParameterizedTypeReference
		public RuleCall getNameJvmParameterizedTypeReferenceParserRuleCall_4_0() { return cNameJvmParameterizedTypeReferenceParserRuleCall_4_0; }

		//(=> "[" guard=XExpression "]")?
		public Group getGroup_5() { return cGroup_5; }

		//=> "["
		public Keyword getLeftSquareBracketKeyword_5_0() { return cLeftSquareBracketKeyword_5_0; }

		//guard=XExpression
		public Assignment getGuardAssignment_5_1() { return cGuardAssignment_5_1; }

		//XExpression
		public RuleCall getGuardXExpressionParserRuleCall_5_1_0() { return cGuardXExpressionParserRuleCall_5_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_5_2() { return cRightSquareBracketKeyword_5_2; }

		//expression=XBlockExpression | expression=RichString | ";"
		public Alternatives getAlternatives_6() { return cAlternatives_6; }

		//expression=XBlockExpression
		public Assignment getExpressionAssignment_6_0() { return cExpressionAssignment_6_0; }

		//XBlockExpression
		public RuleCall getExpressionXBlockExpressionParserRuleCall_6_0_0() { return cExpressionXBlockExpressionParserRuleCall_6_0_0; }

		//expression=RichString
		public Assignment getExpressionAssignment_6_1() { return cExpressionAssignment_6_1; }

		//RichString
		public RuleCall getExpressionRichStringParserRuleCall_6_1_0() { return cExpressionRichStringParserRuleCall_6_1_0; }

		//";"
		public Keyword getSemicolonKeyword_6_2() { return cSemicolonKeyword_6_2; }
	}

	public class SarlCapacityUsesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SarlCapacityUses");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSarlCapacityUsesAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cUsesKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCapacitiesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCapacitiesJvmParameterizedTypeReferenceParserRuleCall_2_0 = (RuleCall)cCapacitiesAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cCapacitiesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cCapacitiesJvmParameterizedTypeReferenceParserRuleCall_3_1_0 = (RuleCall)cCapacitiesAssignment_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//SarlCapacityUses returns xtend::XtendMember:
		//	{SarlCapacityUses} "uses" capacities+=JvmParameterizedTypeReference ("," capacities+=JvmParameterizedTypeReference)*
		//	";"?;
		public ParserRule getRule() { return rule; }

		//{SarlCapacityUses} "uses" capacities+=JvmParameterizedTypeReference ("," capacities+=JvmParameterizedTypeReference)*
		//";"?
		public Group getGroup() { return cGroup; }

		//{SarlCapacityUses}
		public Action getSarlCapacityUsesAction_0() { return cSarlCapacityUsesAction_0; }

		//"uses"
		public Keyword getUsesKeyword_1() { return cUsesKeyword_1; }

		//capacities+=JvmParameterizedTypeReference
		public Assignment getCapacitiesAssignment_2() { return cCapacitiesAssignment_2; }

		//JvmParameterizedTypeReference
		public RuleCall getCapacitiesJvmParameterizedTypeReferenceParserRuleCall_2_0() { return cCapacitiesJvmParameterizedTypeReferenceParserRuleCall_2_0; }

		//("," capacities+=JvmParameterizedTypeReference)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//capacities+=JvmParameterizedTypeReference
		public Assignment getCapacitiesAssignment_3_1() { return cCapacitiesAssignment_3_1; }

		//JvmParameterizedTypeReference
		public RuleCall getCapacitiesJvmParameterizedTypeReferenceParserRuleCall_3_1_0() { return cCapacitiesJvmParameterizedTypeReferenceParserRuleCall_3_1_0; }

		//";"?
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class SarlRequiredCapacityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SarlRequiredCapacity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSarlRequiredCapacityAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRequiresKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCapacitiesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCapacitiesJvmParameterizedTypeReferenceParserRuleCall_2_0 = (RuleCall)cCapacitiesAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cCapacitiesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cCapacitiesJvmParameterizedTypeReferenceParserRuleCall_3_1_0 = (RuleCall)cCapacitiesAssignment_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//SarlRequiredCapacity returns xtend::XtendMember:
		//	{SarlRequiredCapacity} "requires" capacities+=JvmParameterizedTypeReference (","
		//	capacities+=JvmParameterizedTypeReference)* ";"?;
		public ParserRule getRule() { return rule; }

		//{SarlRequiredCapacity} "requires" capacities+=JvmParameterizedTypeReference (","
		//capacities+=JvmParameterizedTypeReference)* ";"?
		public Group getGroup() { return cGroup; }

		//{SarlRequiredCapacity}
		public Action getSarlRequiredCapacityAction_0() { return cSarlRequiredCapacityAction_0; }

		//"requires"
		public Keyword getRequiresKeyword_1() { return cRequiresKeyword_1; }

		//capacities+=JvmParameterizedTypeReference
		public Assignment getCapacitiesAssignment_2() { return cCapacitiesAssignment_2; }

		//JvmParameterizedTypeReference
		public RuleCall getCapacitiesJvmParameterizedTypeReferenceParserRuleCall_2_0() { return cCapacitiesJvmParameterizedTypeReferenceParserRuleCall_2_0; }

		//("," capacities+=JvmParameterizedTypeReference)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//capacities+=JvmParameterizedTypeReference
		public Assignment getCapacitiesAssignment_3_1() { return cCapacitiesAssignment_3_1; }

		//JvmParameterizedTypeReference
		public RuleCall getCapacitiesJvmParameterizedTypeReferenceParserRuleCall_3_1_0() { return cCapacitiesJvmParameterizedTypeReferenceParserRuleCall_3_1_0; }

		//";"?
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class SarlConstructorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SarlConstructor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSarlConstructorAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationsXAnnotationParserRuleCall_1_0 = (RuleCall)cAnnotationsAssignment_1.eContents().get(0);
		private final Action cSarlConstructorAnnotationInfoAction_2 = (Action)cGroup.eContents().get(2);
		private final Assignment cModifiersAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cModifiersCommonModifierParserRuleCall_3_0 = (RuleCall)cModifiersAssignment_3.eContents().get(0);
		private final Keyword cNewKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cLessThanSignKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cTypeParametersAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cTypeParametersJvmTypeParameterParserRuleCall_5_1_0 = (RuleCall)cTypeParametersAssignment_5_1.eContents().get(0);
		private final Group cGroup_5_2 = (Group)cGroup_5.eContents().get(2);
		private final Keyword cCommaKeyword_5_2_0 = (Keyword)cGroup_5_2.eContents().get(0);
		private final Assignment cTypeParametersAssignment_5_2_1 = (Assignment)cGroup_5_2.eContents().get(1);
		private final RuleCall cTypeParametersJvmTypeParameterParserRuleCall_5_2_1_0 = (RuleCall)cTypeParametersAssignment_5_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cLeftParenthesisKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Group cGroup_6_1 = (Group)cGroup_6.eContents().get(1);
		private final Assignment cParametersAssignment_6_1_0 = (Assignment)cGroup_6_1.eContents().get(0);
		private final RuleCall cParametersParameterParserRuleCall_6_1_0_0 = (RuleCall)cParametersAssignment_6_1_0.eContents().get(0);
		private final Group cGroup_6_1_1 = (Group)cGroup_6_1.eContents().get(1);
		private final Keyword cCommaKeyword_6_1_1_0 = (Keyword)cGroup_6_1_1.eContents().get(0);
		private final Assignment cParametersAssignment_6_1_1_1 = (Assignment)cGroup_6_1_1.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_6_1_1_1_0 = (RuleCall)cParametersAssignment_6_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cThrowsKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cExceptionsAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cExceptionsJvmTypeReferenceParserRuleCall_7_1_0 = (RuleCall)cExceptionsAssignment_7_1.eContents().get(0);
		private final Group cGroup_7_2 = (Group)cGroup_7.eContents().get(2);
		private final Keyword cCommaKeyword_7_2_0 = (Keyword)cGroup_7_2.eContents().get(0);
		private final Assignment cExceptionsAssignment_7_2_1 = (Assignment)cGroup_7_2.eContents().get(1);
		private final RuleCall cExceptionsJvmTypeReferenceParserRuleCall_7_2_1_0 = (RuleCall)cExceptionsAssignment_7_2_1.eContents().get(0);
		private final Assignment cExpressionAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cExpressionXBlockExpressionParserRuleCall_8_0 = (RuleCall)cExpressionAssignment_8.eContents().get(0);
		
		//SarlConstructor returns xtend::XtendConstructor:
		//	{SarlConstructor} annotations+=XAnnotation* {SarlConstructor.annotationInfo=current} modifiers+=CommonModifier* "new"
		//	("<" typeParameters+=JvmTypeParameter ("," typeParameters+=JvmTypeParameter)* ">")? ("(" (parameters+=Parameter (","
		//	parameters+=Parameter)*)? ")")? ("throws" exceptions+=JvmTypeReference ("," exceptions+=JvmTypeReference)*)?
		//	expression=XBlockExpression;
		public ParserRule getRule() { return rule; }

		//{SarlConstructor} annotations+=XAnnotation* {SarlConstructor.annotationInfo=current} modifiers+=CommonModifier* "new"
		//("<" typeParameters+=JvmTypeParameter ("," typeParameters+=JvmTypeParameter)* ">")? ("(" (parameters+=Parameter (","
		//parameters+=Parameter)*)? ")")? ("throws" exceptions+=JvmTypeReference ("," exceptions+=JvmTypeReference)*)?
		//expression=XBlockExpression
		public Group getGroup() { return cGroup; }

		//{SarlConstructor}
		public Action getSarlConstructorAction_0() { return cSarlConstructorAction_0; }

		//annotations+=XAnnotation*
		public Assignment getAnnotationsAssignment_1() { return cAnnotationsAssignment_1; }

		//XAnnotation
		public RuleCall getAnnotationsXAnnotationParserRuleCall_1_0() { return cAnnotationsXAnnotationParserRuleCall_1_0; }

		//{SarlConstructor.annotationInfo=current}
		public Action getSarlConstructorAnnotationInfoAction_2() { return cSarlConstructorAnnotationInfoAction_2; }

		//modifiers+=CommonModifier*
		public Assignment getModifiersAssignment_3() { return cModifiersAssignment_3; }

		//CommonModifier
		public RuleCall getModifiersCommonModifierParserRuleCall_3_0() { return cModifiersCommonModifierParserRuleCall_3_0; }

		//"new"
		public Keyword getNewKeyword_4() { return cNewKeyword_4; }

		//("<" typeParameters+=JvmTypeParameter ("," typeParameters+=JvmTypeParameter)* ">")?
		public Group getGroup_5() { return cGroup_5; }

		//"<"
		public Keyword getLessThanSignKeyword_5_0() { return cLessThanSignKeyword_5_0; }

		//typeParameters+=JvmTypeParameter
		public Assignment getTypeParametersAssignment_5_1() { return cTypeParametersAssignment_5_1; }

		//JvmTypeParameter
		public RuleCall getTypeParametersJvmTypeParameterParserRuleCall_5_1_0() { return cTypeParametersJvmTypeParameterParserRuleCall_5_1_0; }

		//("," typeParameters+=JvmTypeParameter)*
		public Group getGroup_5_2() { return cGroup_5_2; }

		//","
		public Keyword getCommaKeyword_5_2_0() { return cCommaKeyword_5_2_0; }

		//typeParameters+=JvmTypeParameter
		public Assignment getTypeParametersAssignment_5_2_1() { return cTypeParametersAssignment_5_2_1; }

		//JvmTypeParameter
		public RuleCall getTypeParametersJvmTypeParameterParserRuleCall_5_2_1_0() { return cTypeParametersJvmTypeParameterParserRuleCall_5_2_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_5_3() { return cGreaterThanSignKeyword_5_3; }

		//("(" (parameters+=Parameter ("," parameters+=Parameter)*)? ")")?
		public Group getGroup_6() { return cGroup_6; }

		//"("
		public Keyword getLeftParenthesisKeyword_6_0() { return cLeftParenthesisKeyword_6_0; }

		//(parameters+=Parameter ("," parameters+=Parameter)*)?
		public Group getGroup_6_1() { return cGroup_6_1; }

		//parameters+=Parameter
		public Assignment getParametersAssignment_6_1_0() { return cParametersAssignment_6_1_0; }

		//Parameter
		public RuleCall getParametersParameterParserRuleCall_6_1_0_0() { return cParametersParameterParserRuleCall_6_1_0_0; }

		//("," parameters+=Parameter)*
		public Group getGroup_6_1_1() { return cGroup_6_1_1; }

		//","
		public Keyword getCommaKeyword_6_1_1_0() { return cCommaKeyword_6_1_1_0; }

		//parameters+=Parameter
		public Assignment getParametersAssignment_6_1_1_1() { return cParametersAssignment_6_1_1_1; }

		//Parameter
		public RuleCall getParametersParameterParserRuleCall_6_1_1_1_0() { return cParametersParameterParserRuleCall_6_1_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6_2() { return cRightParenthesisKeyword_6_2; }

		//("throws" exceptions+=JvmTypeReference ("," exceptions+=JvmTypeReference)*)?
		public Group getGroup_7() { return cGroup_7; }

		//"throws"
		public Keyword getThrowsKeyword_7_0() { return cThrowsKeyword_7_0; }

		//exceptions+=JvmTypeReference
		public Assignment getExceptionsAssignment_7_1() { return cExceptionsAssignment_7_1; }

		//JvmTypeReference
		public RuleCall getExceptionsJvmTypeReferenceParserRuleCall_7_1_0() { return cExceptionsJvmTypeReferenceParserRuleCall_7_1_0; }

		//("," exceptions+=JvmTypeReference)*
		public Group getGroup_7_2() { return cGroup_7_2; }

		//","
		public Keyword getCommaKeyword_7_2_0() { return cCommaKeyword_7_2_0; }

		//exceptions+=JvmTypeReference
		public Assignment getExceptionsAssignment_7_2_1() { return cExceptionsAssignment_7_2_1; }

		//JvmTypeReference
		public RuleCall getExceptionsJvmTypeReferenceParserRuleCall_7_2_1_0() { return cExceptionsJvmTypeReferenceParserRuleCall_7_2_1_0; }

		//expression=XBlockExpression
		public Assignment getExpressionAssignment_8() { return cExpressionAssignment_8; }

		//XBlockExpression
		public RuleCall getExpressionXBlockExpressionParserRuleCall_8_0() { return cExpressionXBlockExpressionParserRuleCall_8_0; }
	}

	public class SarlClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SarlClass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXtendClassAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationsXAnnotationParserRuleCall_1_0 = (RuleCall)cAnnotationsAssignment_1.eContents().get(0);
		private final Action cXtendClassAnnotationInfoAction_2 = (Action)cGroup.eContents().get(2);
		private final Assignment cModifiersAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cModifiersCommonModifierParserRuleCall_3_0 = (RuleCall)cModifiersAssignment_3.eContents().get(0);
		private final Keyword cClassKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cNameAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNameValidIDParserRuleCall_5_0 = (RuleCall)cNameAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cLessThanSignKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cTypeParametersAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cTypeParametersJvmTypeParameterParserRuleCall_6_1_0 = (RuleCall)cTypeParametersAssignment_6_1.eContents().get(0);
		private final Group cGroup_6_2 = (Group)cGroup_6.eContents().get(2);
		private final Keyword cCommaKeyword_6_2_0 = (Keyword)cGroup_6_2.eContents().get(0);
		private final Assignment cTypeParametersAssignment_6_2_1 = (Assignment)cGroup_6_2.eContents().get(1);
		private final RuleCall cTypeParametersJvmTypeParameterParserRuleCall_6_2_1_0 = (RuleCall)cTypeParametersAssignment_6_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_6_3 = (Keyword)cGroup_6.eContents().get(3);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cExtendsKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cExtendsAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cExtendsJvmParameterizedTypeReferenceParserRuleCall_7_1_0 = (RuleCall)cExtendsAssignment_7_1.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cImplementsKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cImplementsAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cImplementsJvmParameterizedTypeReferenceParserRuleCall_8_1_0 = (RuleCall)cImplementsAssignment_8_1.eContents().get(0);
		private final Group cGroup_8_2 = (Group)cGroup_8.eContents().get(2);
		private final Keyword cCommaKeyword_8_2_0 = (Keyword)cGroup_8_2.eContents().get(0);
		private final Assignment cImplementsAssignment_8_2_1 = (Assignment)cGroup_8_2.eContents().get(1);
		private final RuleCall cImplementsJvmParameterizedTypeReferenceParserRuleCall_8_2_1_0 = (RuleCall)cImplementsAssignment_8_2_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cMembersAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cMembersMemberParserRuleCall_10_0 = (RuleCall)cMembersAssignment_10.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		//SarlClass returns xtend::XtendTypeDeclaration:
		//	{xtend::XtendClass} annotations+=XAnnotation* {xtend::XtendClass.annotationInfo=current} modifiers+=CommonModifier*
		//	"class" name=ValidID ("<" typeParameters+=JvmTypeParameter ("," typeParameters+=JvmTypeParameter)* ">")? ("extends"
		//	extends=JvmParameterizedTypeReference)? ("implements" implements+=JvmParameterizedTypeReference (","
		//	implements+=JvmParameterizedTypeReference)*)? "{" members+=Member* "}";
		public ParserRule getRule() { return rule; }

		//{xtend::XtendClass} annotations+=XAnnotation* {xtend::XtendClass.annotationInfo=current} modifiers+=CommonModifier*
		//"class" name=ValidID ("<" typeParameters+=JvmTypeParameter ("," typeParameters+=JvmTypeParameter)* ">")? ("extends"
		//extends=JvmParameterizedTypeReference)? ("implements" implements+=JvmParameterizedTypeReference (","
		//implements+=JvmParameterizedTypeReference)*)? "{" members+=Member* "}"
		public Group getGroup() { return cGroup; }

		//{xtend::XtendClass}
		public Action getXtendClassAction_0() { return cXtendClassAction_0; }

		//annotations+=XAnnotation*
		public Assignment getAnnotationsAssignment_1() { return cAnnotationsAssignment_1; }

		//XAnnotation
		public RuleCall getAnnotationsXAnnotationParserRuleCall_1_0() { return cAnnotationsXAnnotationParserRuleCall_1_0; }

		//{xtend::XtendClass.annotationInfo=current}
		public Action getXtendClassAnnotationInfoAction_2() { return cXtendClassAnnotationInfoAction_2; }

		//modifiers+=CommonModifier*
		public Assignment getModifiersAssignment_3() { return cModifiersAssignment_3; }

		//CommonModifier
		public RuleCall getModifiersCommonModifierParserRuleCall_3_0() { return cModifiersCommonModifierParserRuleCall_3_0; }

		//"class"
		public Keyword getClassKeyword_4() { return cClassKeyword_4; }

		//name=ValidID
		public Assignment getNameAssignment_5() { return cNameAssignment_5; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_5_0() { return cNameValidIDParserRuleCall_5_0; }

		//("<" typeParameters+=JvmTypeParameter ("," typeParameters+=JvmTypeParameter)* ">")?
		public Group getGroup_6() { return cGroup_6; }

		//"<"
		public Keyword getLessThanSignKeyword_6_0() { return cLessThanSignKeyword_6_0; }

		//typeParameters+=JvmTypeParameter
		public Assignment getTypeParametersAssignment_6_1() { return cTypeParametersAssignment_6_1; }

		//JvmTypeParameter
		public RuleCall getTypeParametersJvmTypeParameterParserRuleCall_6_1_0() { return cTypeParametersJvmTypeParameterParserRuleCall_6_1_0; }

		//("," typeParameters+=JvmTypeParameter)*
		public Group getGroup_6_2() { return cGroup_6_2; }

		//","
		public Keyword getCommaKeyword_6_2_0() { return cCommaKeyword_6_2_0; }

		//typeParameters+=JvmTypeParameter
		public Assignment getTypeParametersAssignment_6_2_1() { return cTypeParametersAssignment_6_2_1; }

		//JvmTypeParameter
		public RuleCall getTypeParametersJvmTypeParameterParserRuleCall_6_2_1_0() { return cTypeParametersJvmTypeParameterParserRuleCall_6_2_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_6_3() { return cGreaterThanSignKeyword_6_3; }

		//("extends" extends=JvmParameterizedTypeReference)?
		public Group getGroup_7() { return cGroup_7; }

		//"extends"
		public Keyword getExtendsKeyword_7_0() { return cExtendsKeyword_7_0; }

		//extends=JvmParameterizedTypeReference
		public Assignment getExtendsAssignment_7_1() { return cExtendsAssignment_7_1; }

		//JvmParameterizedTypeReference
		public RuleCall getExtendsJvmParameterizedTypeReferenceParserRuleCall_7_1_0() { return cExtendsJvmParameterizedTypeReferenceParserRuleCall_7_1_0; }

		//("implements" implements+=JvmParameterizedTypeReference ("," implements+=JvmParameterizedTypeReference)*)?
		public Group getGroup_8() { return cGroup_8; }

		//"implements"
		public Keyword getImplementsKeyword_8_0() { return cImplementsKeyword_8_0; }

		//implements+=JvmParameterizedTypeReference
		public Assignment getImplementsAssignment_8_1() { return cImplementsAssignment_8_1; }

		//JvmParameterizedTypeReference
		public RuleCall getImplementsJvmParameterizedTypeReferenceParserRuleCall_8_1_0() { return cImplementsJvmParameterizedTypeReferenceParserRuleCall_8_1_0; }

		//("," implements+=JvmParameterizedTypeReference)*
		public Group getGroup_8_2() { return cGroup_8_2; }

		//","
		public Keyword getCommaKeyword_8_2_0() { return cCommaKeyword_8_2_0; }

		//implements+=JvmParameterizedTypeReference
		public Assignment getImplementsAssignment_8_2_1() { return cImplementsAssignment_8_2_1; }

		//JvmParameterizedTypeReference
		public RuleCall getImplementsJvmParameterizedTypeReferenceParserRuleCall_8_2_1_0() { return cImplementsJvmParameterizedTypeReferenceParserRuleCall_8_2_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_9() { return cLeftCurlyBracketKeyword_9; }

		//members+=Member*
		public Assignment getMembersAssignment_10() { return cMembersAssignment_10; }

		//Member
		public RuleCall getMembersMemberParserRuleCall_10_0() { return cMembersMemberParserRuleCall_10_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_11() { return cRightCurlyBracketKeyword_11; }
	}

	public class SarlInterfaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SarlInterface");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXtendInterfaceAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationsXAnnotationParserRuleCall_1_0 = (RuleCall)cAnnotationsAssignment_1.eContents().get(0);
		private final Action cXtendInterfaceAnnotationInfoAction_2 = (Action)cGroup.eContents().get(2);
		private final Assignment cModifiersAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cModifiersCommonModifierParserRuleCall_3_0 = (RuleCall)cModifiersAssignment_3.eContents().get(0);
		private final Keyword cInterfaceKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cNameAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNameValidIDParserRuleCall_5_0 = (RuleCall)cNameAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cLessThanSignKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cTypeParametersAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cTypeParametersJvmTypeParameterParserRuleCall_6_1_0 = (RuleCall)cTypeParametersAssignment_6_1.eContents().get(0);
		private final Group cGroup_6_2 = (Group)cGroup_6.eContents().get(2);
		private final Keyword cCommaKeyword_6_2_0 = (Keyword)cGroup_6_2.eContents().get(0);
		private final Assignment cTypeParametersAssignment_6_2_1 = (Assignment)cGroup_6_2.eContents().get(1);
		private final RuleCall cTypeParametersJvmTypeParameterParserRuleCall_6_2_1_0 = (RuleCall)cTypeParametersAssignment_6_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_6_3 = (Keyword)cGroup_6.eContents().get(3);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cExtendsKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cExtendsAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cExtendsJvmParameterizedTypeReferenceParserRuleCall_7_1_0 = (RuleCall)cExtendsAssignment_7_1.eContents().get(0);
		private final Group cGroup_7_2 = (Group)cGroup_7.eContents().get(2);
		private final Keyword cCommaKeyword_7_2_0 = (Keyword)cGroup_7_2.eContents().get(0);
		private final Assignment cExtendsAssignment_7_2_1 = (Assignment)cGroup_7_2.eContents().get(1);
		private final RuleCall cExtendsJvmParameterizedTypeReferenceParserRuleCall_7_2_1_0 = (RuleCall)cExtendsAssignment_7_2_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cMembersAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cMembersMemberParserRuleCall_9_0 = (RuleCall)cMembersAssignment_9.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//SarlInterface returns xtend::XtendTypeDeclaration:
		//	{xtend::XtendInterface} annotations+=XAnnotation* {xtend::XtendInterface.annotationInfo=current}
		//	modifiers+=CommonModifier* "interface" name=ValidID ("<" typeParameters+=JvmTypeParameter (","
		//	typeParameters+=JvmTypeParameter)* ">")? ("extends" extends+=JvmParameterizedTypeReference (","
		//	extends+=JvmParameterizedTypeReference)*)? "{" members+=Member* "}";
		public ParserRule getRule() { return rule; }

		//{xtend::XtendInterface} annotations+=XAnnotation* {xtend::XtendInterface.annotationInfo=current}
		//modifiers+=CommonModifier* "interface" name=ValidID ("<" typeParameters+=JvmTypeParameter (","
		//typeParameters+=JvmTypeParameter)* ">")? ("extends" extends+=JvmParameterizedTypeReference (","
		//extends+=JvmParameterizedTypeReference)*)? "{" members+=Member* "}"
		public Group getGroup() { return cGroup; }

		//{xtend::XtendInterface}
		public Action getXtendInterfaceAction_0() { return cXtendInterfaceAction_0; }

		//annotations+=XAnnotation*
		public Assignment getAnnotationsAssignment_1() { return cAnnotationsAssignment_1; }

		//XAnnotation
		public RuleCall getAnnotationsXAnnotationParserRuleCall_1_0() { return cAnnotationsXAnnotationParserRuleCall_1_0; }

		//{xtend::XtendInterface.annotationInfo=current}
		public Action getXtendInterfaceAnnotationInfoAction_2() { return cXtendInterfaceAnnotationInfoAction_2; }

		//modifiers+=CommonModifier*
		public Assignment getModifiersAssignment_3() { return cModifiersAssignment_3; }

		//CommonModifier
		public RuleCall getModifiersCommonModifierParserRuleCall_3_0() { return cModifiersCommonModifierParserRuleCall_3_0; }

		//"interface"
		public Keyword getInterfaceKeyword_4() { return cInterfaceKeyword_4; }

		//name=ValidID
		public Assignment getNameAssignment_5() { return cNameAssignment_5; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_5_0() { return cNameValidIDParserRuleCall_5_0; }

		//("<" typeParameters+=JvmTypeParameter ("," typeParameters+=JvmTypeParameter)* ">")?
		public Group getGroup_6() { return cGroup_6; }

		//"<"
		public Keyword getLessThanSignKeyword_6_0() { return cLessThanSignKeyword_6_0; }

		//typeParameters+=JvmTypeParameter
		public Assignment getTypeParametersAssignment_6_1() { return cTypeParametersAssignment_6_1; }

		//JvmTypeParameter
		public RuleCall getTypeParametersJvmTypeParameterParserRuleCall_6_1_0() { return cTypeParametersJvmTypeParameterParserRuleCall_6_1_0; }

		//("," typeParameters+=JvmTypeParameter)*
		public Group getGroup_6_2() { return cGroup_6_2; }

		//","
		public Keyword getCommaKeyword_6_2_0() { return cCommaKeyword_6_2_0; }

		//typeParameters+=JvmTypeParameter
		public Assignment getTypeParametersAssignment_6_2_1() { return cTypeParametersAssignment_6_2_1; }

		//JvmTypeParameter
		public RuleCall getTypeParametersJvmTypeParameterParserRuleCall_6_2_1_0() { return cTypeParametersJvmTypeParameterParserRuleCall_6_2_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_6_3() { return cGreaterThanSignKeyword_6_3; }

		//("extends" extends+=JvmParameterizedTypeReference ("," extends+=JvmParameterizedTypeReference)*)?
		public Group getGroup_7() { return cGroup_7; }

		//"extends"
		public Keyword getExtendsKeyword_7_0() { return cExtendsKeyword_7_0; }

		//extends+=JvmParameterizedTypeReference
		public Assignment getExtendsAssignment_7_1() { return cExtendsAssignment_7_1; }

		//JvmParameterizedTypeReference
		public RuleCall getExtendsJvmParameterizedTypeReferenceParserRuleCall_7_1_0() { return cExtendsJvmParameterizedTypeReferenceParserRuleCall_7_1_0; }

		//("," extends+=JvmParameterizedTypeReference)*
		public Group getGroup_7_2() { return cGroup_7_2; }

		//","
		public Keyword getCommaKeyword_7_2_0() { return cCommaKeyword_7_2_0; }

		//extends+=JvmParameterizedTypeReference
		public Assignment getExtendsAssignment_7_2_1() { return cExtendsAssignment_7_2_1; }

		//JvmParameterizedTypeReference
		public RuleCall getExtendsJvmParameterizedTypeReferenceParserRuleCall_7_2_1_0() { return cExtendsJvmParameterizedTypeReferenceParserRuleCall_7_2_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_8() { return cLeftCurlyBracketKeyword_8; }

		//members+=Member*
		public Assignment getMembersAssignment_9() { return cMembersAssignment_9; }

		//Member
		public RuleCall getMembersMemberParserRuleCall_9_0() { return cMembersMemberParserRuleCall_9_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
	}

	public class SarlEnumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SarlEnum");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXtendEnumAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationsXAnnotationParserRuleCall_1_0 = (RuleCall)cAnnotationsAssignment_1.eContents().get(0);
		private final Action cXtendEnumAnnotationInfoAction_2 = (Action)cGroup.eContents().get(2);
		private final Assignment cModifiersAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cModifiersCommonModifierParserRuleCall_3_0 = (RuleCall)cModifiersAssignment_3.eContents().get(0);
		private final Keyword cEnumKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cNameAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNameValidIDParserRuleCall_5_0 = (RuleCall)cNameAssignment_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Assignment cMembersAssignment_7_0 = (Assignment)cGroup_7.eContents().get(0);
		private final RuleCall cMembersXtendEnumLiteralParserRuleCall_7_0_0 = (RuleCall)cMembersAssignment_7_0.eContents().get(0);
		private final Group cGroup_7_1 = (Group)cGroup_7.eContents().get(1);
		private final Keyword cCommaKeyword_7_1_0 = (Keyword)cGroup_7_1.eContents().get(0);
		private final Assignment cMembersAssignment_7_1_1 = (Assignment)cGroup_7_1.eContents().get(1);
		private final RuleCall cMembersXtendEnumLiteralParserRuleCall_7_1_1_0 = (RuleCall)cMembersAssignment_7_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//SarlEnum returns xtend::XtendTypeDeclaration:
		//	{xtend::XtendEnum} annotations+=XAnnotation* {xtend::XtendEnum.annotationInfo=current} modifiers+=CommonModifier*
		//	"enum" name=ValidID "{" (members+=XtendEnumLiteral ("," members+=XtendEnumLiteral)*)? ";"? "}";
		public ParserRule getRule() { return rule; }

		//{xtend::XtendEnum} annotations+=XAnnotation* {xtend::XtendEnum.annotationInfo=current} modifiers+=CommonModifier* "enum"
		//name=ValidID "{" (members+=XtendEnumLiteral ("," members+=XtendEnumLiteral)*)? ";"? "}"
		public Group getGroup() { return cGroup; }

		//{xtend::XtendEnum}
		public Action getXtendEnumAction_0() { return cXtendEnumAction_0; }

		//annotations+=XAnnotation*
		public Assignment getAnnotationsAssignment_1() { return cAnnotationsAssignment_1; }

		//XAnnotation
		public RuleCall getAnnotationsXAnnotationParserRuleCall_1_0() { return cAnnotationsXAnnotationParserRuleCall_1_0; }

		//{xtend::XtendEnum.annotationInfo=current}
		public Action getXtendEnumAnnotationInfoAction_2() { return cXtendEnumAnnotationInfoAction_2; }

		//modifiers+=CommonModifier*
		public Assignment getModifiersAssignment_3() { return cModifiersAssignment_3; }

		//CommonModifier
		public RuleCall getModifiersCommonModifierParserRuleCall_3_0() { return cModifiersCommonModifierParserRuleCall_3_0; }

		//"enum"
		public Keyword getEnumKeyword_4() { return cEnumKeyword_4; }

		//name=ValidID
		public Assignment getNameAssignment_5() { return cNameAssignment_5; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_5_0() { return cNameValidIDParserRuleCall_5_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }

		//(members+=XtendEnumLiteral ("," members+=XtendEnumLiteral)*)?
		public Group getGroup_7() { return cGroup_7; }

		//members+=XtendEnumLiteral
		public Assignment getMembersAssignment_7_0() { return cMembersAssignment_7_0; }

		//XtendEnumLiteral
		public RuleCall getMembersXtendEnumLiteralParserRuleCall_7_0_0() { return cMembersXtendEnumLiteralParserRuleCall_7_0_0; }

		//("," members+=XtendEnumLiteral)*
		public Group getGroup_7_1() { return cGroup_7_1; }

		//","
		public Keyword getCommaKeyword_7_1_0() { return cCommaKeyword_7_1_0; }

		//members+=XtendEnumLiteral
		public Assignment getMembersAssignment_7_1_1() { return cMembersAssignment_7_1_1; }

		//XtendEnumLiteral
		public RuleCall getMembersXtendEnumLiteralParserRuleCall_7_1_1_0() { return cMembersXtendEnumLiteralParserRuleCall_7_1_1_0; }

		//";"?
		public Keyword getSemicolonKeyword_8() { return cSemicolonKeyword_8; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}

	public class SarlAnnotationTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SarlAnnotationType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXtendAnnotationTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationsXAnnotationParserRuleCall_1_0 = (RuleCall)cAnnotationsAssignment_1.eContents().get(0);
		private final Action cXtendAnnotationTypeAnnotationInfoAction_2 = (Action)cGroup.eContents().get(2);
		private final Assignment cModifiersAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cModifiersCommonModifierParserRuleCall_3_0 = (RuleCall)cModifiersAssignment_3.eContents().get(0);
		private final Keyword cAnnotationKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cNameAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNameValidIDParserRuleCall_5_0 = (RuleCall)cNameAssignment_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cMembersAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cMembersAnnotationFieldParserRuleCall_7_0 = (RuleCall)cMembersAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//SarlAnnotationType returns xtend::XtendTypeDeclaration:
		//	{xtend::XtendAnnotationType} annotations+=XAnnotation* {xtend::XtendAnnotationType.annotationInfo=current}
		//	modifiers+=CommonModifier* "annotation" name=ValidID "{" members+=AnnotationField* "}";
		public ParserRule getRule() { return rule; }

		//{xtend::XtendAnnotationType} annotations+=XAnnotation* {xtend::XtendAnnotationType.annotationInfo=current}
		//modifiers+=CommonModifier* "annotation" name=ValidID "{" members+=AnnotationField* "}"
		public Group getGroup() { return cGroup; }

		//{xtend::XtendAnnotationType}
		public Action getXtendAnnotationTypeAction_0() { return cXtendAnnotationTypeAction_0; }

		//annotations+=XAnnotation*
		public Assignment getAnnotationsAssignment_1() { return cAnnotationsAssignment_1; }

		//XAnnotation
		public RuleCall getAnnotationsXAnnotationParserRuleCall_1_0() { return cAnnotationsXAnnotationParserRuleCall_1_0; }

		//{xtend::XtendAnnotationType.annotationInfo=current}
		public Action getXtendAnnotationTypeAnnotationInfoAction_2() { return cXtendAnnotationTypeAnnotationInfoAction_2; }

		//modifiers+=CommonModifier*
		public Assignment getModifiersAssignment_3() { return cModifiersAssignment_3; }

		//CommonModifier
		public RuleCall getModifiersCommonModifierParserRuleCall_3_0() { return cModifiersCommonModifierParserRuleCall_3_0; }

		//"annotation"
		public Keyword getAnnotationKeyword_4() { return cAnnotationKeyword_4; }

		//name=ValidID
		public Assignment getNameAssignment_5() { return cNameAssignment_5; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_5_0() { return cNameValidIDParserRuleCall_5_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }

		//members+=AnnotationField*
		public Assignment getMembersAssignment_7() { return cMembersAssignment_7; }

		//AnnotationField
		public RuleCall getMembersAnnotationFieldParserRuleCall_7_0() { return cMembersAnnotationFieldParserRuleCall_7_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}

	public class SarlEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SarlEvent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSarlEventAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationsXAnnotationParserRuleCall_1_0 = (RuleCall)cAnnotationsAssignment_1.eContents().get(0);
		private final Action cSarlEventAnnotationInfoAction_2 = (Action)cGroup.eContents().get(2);
		private final Assignment cModifiersAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cModifiersCommonModifierParserRuleCall_3_0 = (RuleCall)cModifiersAssignment_3.eContents().get(0);
		private final Keyword cEventKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cNameAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNameValidIDParserRuleCall_5_0 = (RuleCall)cNameAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cExtendsKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cExtendsAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cExtendsJvmParameterizedTypeReferenceParserRuleCall_6_1_0 = (RuleCall)cExtendsAssignment_6_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cLeftCurlyBracketKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cMembersAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cMembersEventMemberParserRuleCall_7_1_0 = (RuleCall)cMembersAssignment_7_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7_2 = (Keyword)cGroup_7.eContents().get(2);
		
		//SarlEvent returns xtend::XtendTypeDeclaration:
		//	{SarlEvent} annotations+=XAnnotation* {SarlEvent.annotationInfo=current} modifiers+=CommonModifier* "event"
		//	name=ValidID ("extends" extends+=JvmParameterizedTypeReference)? ("{" members+=EventMember* "}")?;
		public ParserRule getRule() { return rule; }

		//{SarlEvent} annotations+=XAnnotation* {SarlEvent.annotationInfo=current} modifiers+=CommonModifier* "event" name=ValidID
		//("extends" extends+=JvmParameterizedTypeReference)? ("{" members+=EventMember* "}")?
		public Group getGroup() { return cGroup; }

		//{SarlEvent}
		public Action getSarlEventAction_0() { return cSarlEventAction_0; }

		//annotations+=XAnnotation*
		public Assignment getAnnotationsAssignment_1() { return cAnnotationsAssignment_1; }

		//XAnnotation
		public RuleCall getAnnotationsXAnnotationParserRuleCall_1_0() { return cAnnotationsXAnnotationParserRuleCall_1_0; }

		//{SarlEvent.annotationInfo=current}
		public Action getSarlEventAnnotationInfoAction_2() { return cSarlEventAnnotationInfoAction_2; }

		//modifiers+=CommonModifier*
		public Assignment getModifiersAssignment_3() { return cModifiersAssignment_3; }

		//CommonModifier
		public RuleCall getModifiersCommonModifierParserRuleCall_3_0() { return cModifiersCommonModifierParserRuleCall_3_0; }

		//"event"
		public Keyword getEventKeyword_4() { return cEventKeyword_4; }

		//name=ValidID
		public Assignment getNameAssignment_5() { return cNameAssignment_5; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_5_0() { return cNameValidIDParserRuleCall_5_0; }

		//("extends" extends+=JvmParameterizedTypeReference)?
		public Group getGroup_6() { return cGroup_6; }

		//"extends"
		public Keyword getExtendsKeyword_6_0() { return cExtendsKeyword_6_0; }

		//extends+=JvmParameterizedTypeReference
		public Assignment getExtendsAssignment_6_1() { return cExtendsAssignment_6_1; }

		//JvmParameterizedTypeReference
		public RuleCall getExtendsJvmParameterizedTypeReferenceParserRuleCall_6_1_0() { return cExtendsJvmParameterizedTypeReferenceParserRuleCall_6_1_0; }

		//("{" members+=EventMember* "}")?
		public Group getGroup_7() { return cGroup_7; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_7_0() { return cLeftCurlyBracketKeyword_7_0; }

		//members+=EventMember*
		public Assignment getMembersAssignment_7_1() { return cMembersAssignment_7_1; }

		//EventMember
		public RuleCall getMembersEventMemberParserRuleCall_7_1_0() { return cMembersEventMemberParserRuleCall_7_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7_2() { return cRightCurlyBracketKeyword_7_2; }
	}

	public class EventMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EventMember");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSarlFieldParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSarlConstructorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EventMember returns xtend::XtendMember:
		//	SarlField | SarlConstructor;
		public ParserRule getRule() { return rule; }

		//SarlField | SarlConstructor
		public Alternatives getAlternatives() { return cAlternatives; }

		//SarlField
		public RuleCall getSarlFieldParserRuleCall_0() { return cSarlFieldParserRuleCall_0; }

		//SarlConstructor
		public RuleCall getSarlConstructorParserRuleCall_1() { return cSarlConstructorParserRuleCall_1; }
	}

	public class SarlAgentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SarlAgent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSarlAgentAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationsXAnnotationParserRuleCall_1_0 = (RuleCall)cAnnotationsAssignment_1.eContents().get(0);
		private final Action cSarlAgentAnnotationInfoAction_2 = (Action)cGroup.eContents().get(2);
		private final Assignment cModifiersAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cModifiersCommonModifierParserRuleCall_3_0 = (RuleCall)cModifiersAssignment_3.eContents().get(0);
		private final Keyword cAgentKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cNameAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNameValidIDParserRuleCall_5_0 = (RuleCall)cNameAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cExtendsKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cExtendsAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cExtendsJvmParameterizedTypeReferenceParserRuleCall_6_1_0 = (RuleCall)cExtendsAssignment_6_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cMembersAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cMembersAgentMemberParserRuleCall_8_0 = (RuleCall)cMembersAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//SarlAgent returns xtend::XtendTypeDeclaration:
		//	{SarlAgent} annotations+=XAnnotation* {SarlAgent.annotationInfo=current} modifiers+=CommonModifier* "agent"
		//	name=ValidID ("extends" extends+=JvmParameterizedTypeReference)? "{" members+=AgentMember* "}";
		public ParserRule getRule() { return rule; }

		//{SarlAgent} annotations+=XAnnotation* {SarlAgent.annotationInfo=current} modifiers+=CommonModifier* "agent" name=ValidID
		//("extends" extends+=JvmParameterizedTypeReference)? "{" members+=AgentMember* "}"
		public Group getGroup() { return cGroup; }

		//{SarlAgent}
		public Action getSarlAgentAction_0() { return cSarlAgentAction_0; }

		//annotations+=XAnnotation*
		public Assignment getAnnotationsAssignment_1() { return cAnnotationsAssignment_1; }

		//XAnnotation
		public RuleCall getAnnotationsXAnnotationParserRuleCall_1_0() { return cAnnotationsXAnnotationParserRuleCall_1_0; }

		//{SarlAgent.annotationInfo=current}
		public Action getSarlAgentAnnotationInfoAction_2() { return cSarlAgentAnnotationInfoAction_2; }

		//modifiers+=CommonModifier*
		public Assignment getModifiersAssignment_3() { return cModifiersAssignment_3; }

		//CommonModifier
		public RuleCall getModifiersCommonModifierParserRuleCall_3_0() { return cModifiersCommonModifierParserRuleCall_3_0; }

		//"agent"
		public Keyword getAgentKeyword_4() { return cAgentKeyword_4; }

		//name=ValidID
		public Assignment getNameAssignment_5() { return cNameAssignment_5; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_5_0() { return cNameValidIDParserRuleCall_5_0; }

		//("extends" extends+=JvmParameterizedTypeReference)?
		public Group getGroup_6() { return cGroup_6; }

		//"extends"
		public Keyword getExtendsKeyword_6_0() { return cExtendsKeyword_6_0; }

		//extends+=JvmParameterizedTypeReference
		public Assignment getExtendsAssignment_6_1() { return cExtendsAssignment_6_1; }

		//JvmParameterizedTypeReference
		public RuleCall getExtendsJvmParameterizedTypeReferenceParserRuleCall_6_1_0() { return cExtendsJvmParameterizedTypeReferenceParserRuleCall_6_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_7() { return cLeftCurlyBracketKeyword_7; }

		//members+=AgentMember*
		public Assignment getMembersAssignment_8() { return cMembersAssignment_8; }

		//AgentMember
		public RuleCall getMembersAgentMemberParserRuleCall_8_0() { return cMembersAgentMemberParserRuleCall_8_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}

	public class AgentMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AgentMember");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMemberParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSarlBehaviorUnitParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSarlCapacityUsesParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSarlRequiredCapacityParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//AgentMember returns xtend::XtendMember:
		//	Member | SarlBehaviorUnit | SarlCapacityUses | SarlRequiredCapacity;
		public ParserRule getRule() { return rule; }

		//Member | SarlBehaviorUnit | SarlCapacityUses | SarlRequiredCapacity
		public Alternatives getAlternatives() { return cAlternatives; }

		//Member
		public RuleCall getMemberParserRuleCall_0() { return cMemberParserRuleCall_0; }

		//SarlBehaviorUnit
		public RuleCall getSarlBehaviorUnitParserRuleCall_1() { return cSarlBehaviorUnitParserRuleCall_1; }

		//SarlCapacityUses
		public RuleCall getSarlCapacityUsesParserRuleCall_2() { return cSarlCapacityUsesParserRuleCall_2; }

		//SarlRequiredCapacity
		public RuleCall getSarlRequiredCapacityParserRuleCall_3() { return cSarlRequiredCapacityParserRuleCall_3; }
	}

	public class SarlCapacityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SarlCapacity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSarlCapacityAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationsXAnnotationParserRuleCall_1_0 = (RuleCall)cAnnotationsAssignment_1.eContents().get(0);
		private final Action cSarlCapacityAnnotationInfoAction_2 = (Action)cGroup.eContents().get(2);
		private final Assignment cModifiersAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cModifiersCommonModifierParserRuleCall_3_0 = (RuleCall)cModifiersAssignment_3.eContents().get(0);
		private final Keyword cCapacityKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cNameAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNameValidIDParserRuleCall_5_0 = (RuleCall)cNameAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cExtendsKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cExtendsAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cExtendsJvmParameterizedTypeReferenceParserRuleCall_6_1_0 = (RuleCall)cExtendsAssignment_6_1.eContents().get(0);
		private final Group cGroup_6_2 = (Group)cGroup_6.eContents().get(2);
		private final Keyword cCommaKeyword_6_2_0 = (Keyword)cGroup_6_2.eContents().get(0);
		private final Assignment cExtendsAssignment_6_2_1 = (Assignment)cGroup_6_2.eContents().get(1);
		private final RuleCall cExtendsJvmParameterizedTypeReferenceParserRuleCall_6_2_1_0 = (RuleCall)cExtendsAssignment_6_2_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cMembersAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cMembersCapacityMemberParserRuleCall_8_0 = (RuleCall)cMembersAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//SarlCapacity returns xtend::XtendTypeDeclaration:
		//	{SarlCapacity} annotations+=XAnnotation* {SarlCapacity.annotationInfo=current} modifiers+=CommonModifier* "capacity"
		//	name=ValidID ("extends" extends+=JvmParameterizedTypeReference ("," extends+=JvmParameterizedTypeReference)*)? "{"
		//	members+=CapacityMember* "}";
		public ParserRule getRule() { return rule; }

		//{SarlCapacity} annotations+=XAnnotation* {SarlCapacity.annotationInfo=current} modifiers+=CommonModifier* "capacity"
		//name=ValidID ("extends" extends+=JvmParameterizedTypeReference ("," extends+=JvmParameterizedTypeReference)*)? "{"
		//members+=CapacityMember* "}"
		public Group getGroup() { return cGroup; }

		//{SarlCapacity}
		public Action getSarlCapacityAction_0() { return cSarlCapacityAction_0; }

		//annotations+=XAnnotation*
		public Assignment getAnnotationsAssignment_1() { return cAnnotationsAssignment_1; }

		//XAnnotation
		public RuleCall getAnnotationsXAnnotationParserRuleCall_1_0() { return cAnnotationsXAnnotationParserRuleCall_1_0; }

		//{SarlCapacity.annotationInfo=current}
		public Action getSarlCapacityAnnotationInfoAction_2() { return cSarlCapacityAnnotationInfoAction_2; }

		//modifiers+=CommonModifier*
		public Assignment getModifiersAssignment_3() { return cModifiersAssignment_3; }

		//CommonModifier
		public RuleCall getModifiersCommonModifierParserRuleCall_3_0() { return cModifiersCommonModifierParserRuleCall_3_0; }

		//"capacity"
		public Keyword getCapacityKeyword_4() { return cCapacityKeyword_4; }

		//name=ValidID
		public Assignment getNameAssignment_5() { return cNameAssignment_5; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_5_0() { return cNameValidIDParserRuleCall_5_0; }

		//("extends" extends+=JvmParameterizedTypeReference ("," extends+=JvmParameterizedTypeReference)*)?
		public Group getGroup_6() { return cGroup_6; }

		//"extends"
		public Keyword getExtendsKeyword_6_0() { return cExtendsKeyword_6_0; }

		//extends+=JvmParameterizedTypeReference
		public Assignment getExtendsAssignment_6_1() { return cExtendsAssignment_6_1; }

		//JvmParameterizedTypeReference
		public RuleCall getExtendsJvmParameterizedTypeReferenceParserRuleCall_6_1_0() { return cExtendsJvmParameterizedTypeReferenceParserRuleCall_6_1_0; }

		//("," extends+=JvmParameterizedTypeReference)*
		public Group getGroup_6_2() { return cGroup_6_2; }

		//","
		public Keyword getCommaKeyword_6_2_0() { return cCommaKeyword_6_2_0; }

		//extends+=JvmParameterizedTypeReference
		public Assignment getExtendsAssignment_6_2_1() { return cExtendsAssignment_6_2_1; }

		//JvmParameterizedTypeReference
		public RuleCall getExtendsJvmParameterizedTypeReferenceParserRuleCall_6_2_1_0() { return cExtendsJvmParameterizedTypeReferenceParserRuleCall_6_2_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_7() { return cLeftCurlyBracketKeyword_7; }

		//members+=CapacityMember*
		public Assignment getMembersAssignment_8() { return cMembersAssignment_8; }

		//CapacityMember
		public RuleCall getMembersCapacityMemberParserRuleCall_8_0() { return cMembersCapacityMemberParserRuleCall_8_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}

	public class CapacityMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CapacityMember");
		private final RuleCall cSarlActionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//CapacityMember returns xtend::XtendMember:
		//	SarlAction;
		public ParserRule getRule() { return rule; }

		//SarlAction
		public RuleCall getSarlActionParserRuleCall() { return cSarlActionParserRuleCall; }
	}

	public class SarlBehaviorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SarlBehavior");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSarlBehaviorAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationsXAnnotationParserRuleCall_1_0 = (RuleCall)cAnnotationsAssignment_1.eContents().get(0);
		private final Action cSarlBehaviorAnnotationInfoAction_2 = (Action)cGroup.eContents().get(2);
		private final Assignment cModifiersAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cModifiersCommonModifierParserRuleCall_3_0 = (RuleCall)cModifiersAssignment_3.eContents().get(0);
		private final Keyword cBehaviorKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cNameAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNameValidIDParserRuleCall_5_0 = (RuleCall)cNameAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cExtendsKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cExtendsAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cExtendsJvmParameterizedTypeReferenceParserRuleCall_6_1_0 = (RuleCall)cExtendsAssignment_6_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cMembersAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cMembersBehaviorMemberParserRuleCall_8_0 = (RuleCall)cMembersAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//SarlBehavior returns xtend::XtendTypeDeclaration:
		//	{SarlBehavior} annotations+=XAnnotation* {SarlBehavior.annotationInfo=current} modifiers+=CommonModifier* "behavior"
		//	name=ValidID ("extends" extends+=JvmParameterizedTypeReference)? "{" members+=BehaviorMember* "}";
		public ParserRule getRule() { return rule; }

		//{SarlBehavior} annotations+=XAnnotation* {SarlBehavior.annotationInfo=current} modifiers+=CommonModifier* "behavior"
		//name=ValidID ("extends" extends+=JvmParameterizedTypeReference)? "{" members+=BehaviorMember* "}"
		public Group getGroup() { return cGroup; }

		//{SarlBehavior}
		public Action getSarlBehaviorAction_0() { return cSarlBehaviorAction_0; }

		//annotations+=XAnnotation*
		public Assignment getAnnotationsAssignment_1() { return cAnnotationsAssignment_1; }

		//XAnnotation
		public RuleCall getAnnotationsXAnnotationParserRuleCall_1_0() { return cAnnotationsXAnnotationParserRuleCall_1_0; }

		//{SarlBehavior.annotationInfo=current}
		public Action getSarlBehaviorAnnotationInfoAction_2() { return cSarlBehaviorAnnotationInfoAction_2; }

		//modifiers+=CommonModifier*
		public Assignment getModifiersAssignment_3() { return cModifiersAssignment_3; }

		//CommonModifier
		public RuleCall getModifiersCommonModifierParserRuleCall_3_0() { return cModifiersCommonModifierParserRuleCall_3_0; }

		//"behavior"
		public Keyword getBehaviorKeyword_4() { return cBehaviorKeyword_4; }

		//name=ValidID
		public Assignment getNameAssignment_5() { return cNameAssignment_5; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_5_0() { return cNameValidIDParserRuleCall_5_0; }

		//("extends" extends+=JvmParameterizedTypeReference)?
		public Group getGroup_6() { return cGroup_6; }

		//"extends"
		public Keyword getExtendsKeyword_6_0() { return cExtendsKeyword_6_0; }

		//extends+=JvmParameterizedTypeReference
		public Assignment getExtendsAssignment_6_1() { return cExtendsAssignment_6_1; }

		//JvmParameterizedTypeReference
		public RuleCall getExtendsJvmParameterizedTypeReferenceParserRuleCall_6_1_0() { return cExtendsJvmParameterizedTypeReferenceParserRuleCall_6_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_7() { return cLeftCurlyBracketKeyword_7; }

		//members+=BehaviorMember*
		public Assignment getMembersAssignment_8() { return cMembersAssignment_8; }

		//BehaviorMember
		public RuleCall getMembersBehaviorMemberParserRuleCall_8_0() { return cMembersBehaviorMemberParserRuleCall_8_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}

	public class BehaviorMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BehaviorMember");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMemberParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSarlBehaviorUnitParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSarlCapacityUsesParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSarlRequiredCapacityParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//BehaviorMember returns xtend::XtendMember:
		//	Member | SarlBehaviorUnit | SarlCapacityUses | SarlRequiredCapacity;
		public ParserRule getRule() { return rule; }

		//Member | SarlBehaviorUnit | SarlCapacityUses | SarlRequiredCapacity
		public Alternatives getAlternatives() { return cAlternatives; }

		//Member
		public RuleCall getMemberParserRuleCall_0() { return cMemberParserRuleCall_0; }

		//SarlBehaviorUnit
		public RuleCall getSarlBehaviorUnitParserRuleCall_1() { return cSarlBehaviorUnitParserRuleCall_1; }

		//SarlCapacityUses
		public RuleCall getSarlCapacityUsesParserRuleCall_2() { return cSarlCapacityUsesParserRuleCall_2; }

		//SarlRequiredCapacity
		public RuleCall getSarlRequiredCapacityParserRuleCall_3() { return cSarlRequiredCapacityParserRuleCall_3; }
	}

	public class SarlSkillElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SarlSkill");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSarlSkillAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationsXAnnotationParserRuleCall_1_0 = (RuleCall)cAnnotationsAssignment_1.eContents().get(0);
		private final Action cSarlSkillAnnotationInfoAction_2 = (Action)cGroup.eContents().get(2);
		private final Assignment cModifiersAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cModifiersCommonModifierParserRuleCall_3_0 = (RuleCall)cModifiersAssignment_3.eContents().get(0);
		private final Keyword cSkillKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cNameAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNameValidIDParserRuleCall_5_0 = (RuleCall)cNameAssignment_5.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_6 = (UnorderedGroup)cGroup.eContents().get(6);
		private final Group cGroup_6_0 = (Group)cUnorderedGroup_6.eContents().get(0);
		private final Keyword cExtendsKeyword_6_0_0 = (Keyword)cGroup_6_0.eContents().get(0);
		private final Assignment cExtendsAssignment_6_0_1 = (Assignment)cGroup_6_0.eContents().get(1);
		private final RuleCall cExtendsJvmParameterizedTypeReferenceParserRuleCall_6_0_1_0 = (RuleCall)cExtendsAssignment_6_0_1.eContents().get(0);
		private final Group cGroup_6_1 = (Group)cUnorderedGroup_6.eContents().get(1);
		private final Keyword cImplementsKeyword_6_1_0 = (Keyword)cGroup_6_1.eContents().get(0);
		private final Group cGroup_6_1_1 = (Group)cGroup_6_1.eContents().get(1);
		private final Assignment cImplementsAssignment_6_1_1_0 = (Assignment)cGroup_6_1_1.eContents().get(0);
		private final RuleCall cImplementsJvmParameterizedTypeReferenceParserRuleCall_6_1_1_0_0 = (RuleCall)cImplementsAssignment_6_1_1_0.eContents().get(0);
		private final Group cGroup_6_1_1_1 = (Group)cGroup_6_1_1.eContents().get(1);
		private final Keyword cCommaKeyword_6_1_1_1_0 = (Keyword)cGroup_6_1_1_1.eContents().get(0);
		private final Assignment cImplementsAssignment_6_1_1_1_1 = (Assignment)cGroup_6_1_1_1.eContents().get(1);
		private final RuleCall cImplementsJvmParameterizedTypeReferenceParserRuleCall_6_1_1_1_1_0 = (RuleCall)cImplementsAssignment_6_1_1_1_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cMembersAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cMembersSkillMemberParserRuleCall_8_0 = (RuleCall)cMembersAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//SarlSkill returns xtend::XtendTypeDeclaration:
		//	{SarlSkill} annotations+=XAnnotation* {SarlSkill.annotationInfo=current} modifiers+=CommonModifier* "skill"
		//	name=ValidID (("extends" extends+=JvmParameterizedTypeReference)? & ("implements"
		//	(implements+=JvmParameterizedTypeReference ("," implements+=JvmParameterizedTypeReference)*))?) "{"
		//	members+=SkillMember* "}";
		public ParserRule getRule() { return rule; }

		//{SarlSkill} annotations+=XAnnotation* {SarlSkill.annotationInfo=current} modifiers+=CommonModifier* "skill" name=ValidID
		//(("extends" extends+=JvmParameterizedTypeReference)? & ("implements" (implements+=JvmParameterizedTypeReference (","
		//implements+=JvmParameterizedTypeReference)*))?) "{" members+=SkillMember* "}"
		public Group getGroup() { return cGroup; }

		//{SarlSkill}
		public Action getSarlSkillAction_0() { return cSarlSkillAction_0; }

		//annotations+=XAnnotation*
		public Assignment getAnnotationsAssignment_1() { return cAnnotationsAssignment_1; }

		//XAnnotation
		public RuleCall getAnnotationsXAnnotationParserRuleCall_1_0() { return cAnnotationsXAnnotationParserRuleCall_1_0; }

		//{SarlSkill.annotationInfo=current}
		public Action getSarlSkillAnnotationInfoAction_2() { return cSarlSkillAnnotationInfoAction_2; }

		//modifiers+=CommonModifier*
		public Assignment getModifiersAssignment_3() { return cModifiersAssignment_3; }

		//CommonModifier
		public RuleCall getModifiersCommonModifierParserRuleCall_3_0() { return cModifiersCommonModifierParserRuleCall_3_0; }

		//"skill"
		public Keyword getSkillKeyword_4() { return cSkillKeyword_4; }

		//name=ValidID
		public Assignment getNameAssignment_5() { return cNameAssignment_5; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_5_0() { return cNameValidIDParserRuleCall_5_0; }

		//("extends" extends+=JvmParameterizedTypeReference)? & ("implements" (implements+=JvmParameterizedTypeReference (","
		//implements+=JvmParameterizedTypeReference)*))?
		public UnorderedGroup getUnorderedGroup_6() { return cUnorderedGroup_6; }

		//("extends" extends+=JvmParameterizedTypeReference)?
		public Group getGroup_6_0() { return cGroup_6_0; }

		//"extends"
		public Keyword getExtendsKeyword_6_0_0() { return cExtendsKeyword_6_0_0; }

		//extends+=JvmParameterizedTypeReference
		public Assignment getExtendsAssignment_6_0_1() { return cExtendsAssignment_6_0_1; }

		//JvmParameterizedTypeReference
		public RuleCall getExtendsJvmParameterizedTypeReferenceParserRuleCall_6_0_1_0() { return cExtendsJvmParameterizedTypeReferenceParserRuleCall_6_0_1_0; }

		//("implements" (implements+=JvmParameterizedTypeReference ("," implements+=JvmParameterizedTypeReference)*))?
		public Group getGroup_6_1() { return cGroup_6_1; }

		//"implements"
		public Keyword getImplementsKeyword_6_1_0() { return cImplementsKeyword_6_1_0; }

		//implements+=JvmParameterizedTypeReference ("," implements+=JvmParameterizedTypeReference)*
		public Group getGroup_6_1_1() { return cGroup_6_1_1; }

		//implements+=JvmParameterizedTypeReference
		public Assignment getImplementsAssignment_6_1_1_0() { return cImplementsAssignment_6_1_1_0; }

		//JvmParameterizedTypeReference
		public RuleCall getImplementsJvmParameterizedTypeReferenceParserRuleCall_6_1_1_0_0() { return cImplementsJvmParameterizedTypeReferenceParserRuleCall_6_1_1_0_0; }

		//("," implements+=JvmParameterizedTypeReference)*
		public Group getGroup_6_1_1_1() { return cGroup_6_1_1_1; }

		//","
		public Keyword getCommaKeyword_6_1_1_1_0() { return cCommaKeyword_6_1_1_1_0; }

		//implements+=JvmParameterizedTypeReference
		public Assignment getImplementsAssignment_6_1_1_1_1() { return cImplementsAssignment_6_1_1_1_1; }

		//JvmParameterizedTypeReference
		public RuleCall getImplementsJvmParameterizedTypeReferenceParserRuleCall_6_1_1_1_1_0() { return cImplementsJvmParameterizedTypeReferenceParserRuleCall_6_1_1_1_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_7() { return cLeftCurlyBracketKeyword_7; }

		//members+=SkillMember*
		public Assignment getMembersAssignment_8() { return cMembersAssignment_8; }

		//SkillMember
		public RuleCall getMembersSkillMemberParserRuleCall_8_0() { return cMembersSkillMemberParserRuleCall_8_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}

	public class SkillMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SkillMember");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMemberParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSarlBehaviorUnitParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSarlCapacityUsesParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSarlRequiredCapacityParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//SkillMember returns xtend::XtendMember:
		//	Member | SarlBehaviorUnit | SarlCapacityUses | SarlRequiredCapacity;
		public ParserRule getRule() { return rule; }

		//Member | SarlBehaviorUnit | SarlCapacityUses | SarlRequiredCapacity
		public Alternatives getAlternatives() { return cAlternatives; }

		//Member
		public RuleCall getMemberParserRuleCall_0() { return cMemberParserRuleCall_0; }

		//SarlBehaviorUnit
		public RuleCall getSarlBehaviorUnitParserRuleCall_1() { return cSarlBehaviorUnitParserRuleCall_1; }

		//SarlCapacityUses
		public RuleCall getSarlCapacityUsesParserRuleCall_2() { return cSarlCapacityUsesParserRuleCall_2; }

		//SarlRequiredCapacity
		public RuleCall getSarlRequiredCapacityParserRuleCall_3() { return cSarlRequiredCapacityParserRuleCall_3; }
	}

	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSarlFormalParameterAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationsXAnnotationParserRuleCall_1_0 = (RuleCall)cAnnotationsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cExtensionAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cExtensionExtensionKeyword_2_0_0 = (Keyword)cExtensionAssignment_2_0.eContents().get(0);
		private final Assignment cAnnotationsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAnnotationsXAnnotationParserRuleCall_2_1_0 = (RuleCall)cAnnotationsAssignment_2_1.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameInnerVarIDParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cParameterTypeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cParameterTypeJvmTypeReferenceParserRuleCall_5_0 = (RuleCall)cParameterTypeAssignment_5.eContents().get(0);
		private final Alternatives cAlternatives_6 = (Alternatives)cGroup.eContents().get(6);
		private final Group cGroup_6_0 = (Group)cAlternatives_6.eContents().get(0);
		private final Keyword cEqualsSignKeyword_6_0_0 = (Keyword)cGroup_6_0.eContents().get(0);
		private final Assignment cDefaultValueAssignment_6_0_1 = (Assignment)cGroup_6_0.eContents().get(1);
		private final RuleCall cDefaultValueDefaultParameterValueParserRuleCall_6_0_1_0 = (RuleCall)cDefaultValueAssignment_6_0_1.eContents().get(0);
		private final Assignment cVarArgAssignment_6_1 = (Assignment)cAlternatives_6.eContents().get(1);
		private final RuleCall cVarArgVarArgTokenParserRuleCall_6_1_0 = (RuleCall)cVarArgAssignment_6_1.eContents().get(0);
		
		//Parameter returns xtend::XtendParameter:
		//	{SarlFormalParameter} annotations+=XAnnotation* (extension?="extension" annotations+=XAnnotation*)? name=InnerVarID
		//	":" parameterType=JvmTypeReference ("=" defaultValue=DefaultParameterValue | varArg?=VarArgToken)?;
		public ParserRule getRule() { return rule; }

		//{SarlFormalParameter} annotations+=XAnnotation* (extension?="extension" annotations+=XAnnotation*)? name=InnerVarID ":"
		//parameterType=JvmTypeReference ("=" defaultValue=DefaultParameterValue | varArg?=VarArgToken)?
		public Group getGroup() { return cGroup; }

		//{SarlFormalParameter}
		public Action getSarlFormalParameterAction_0() { return cSarlFormalParameterAction_0; }

		//annotations+=XAnnotation*
		public Assignment getAnnotationsAssignment_1() { return cAnnotationsAssignment_1; }

		//XAnnotation
		public RuleCall getAnnotationsXAnnotationParserRuleCall_1_0() { return cAnnotationsXAnnotationParserRuleCall_1_0; }

		//(extension?="extension" annotations+=XAnnotation*)?
		public Group getGroup_2() { return cGroup_2; }

		//extension?="extension"
		public Assignment getExtensionAssignment_2_0() { return cExtensionAssignment_2_0; }

		//"extension"
		public Keyword getExtensionExtensionKeyword_2_0_0() { return cExtensionExtensionKeyword_2_0_0; }

		//annotations+=XAnnotation*
		public Assignment getAnnotationsAssignment_2_1() { return cAnnotationsAssignment_2_1; }

		//XAnnotation
		public RuleCall getAnnotationsXAnnotationParserRuleCall_2_1_0() { return cAnnotationsXAnnotationParserRuleCall_2_1_0; }

		//name=InnerVarID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//InnerVarID
		public RuleCall getNameInnerVarIDParserRuleCall_3_0() { return cNameInnerVarIDParserRuleCall_3_0; }

		//":"
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }

		//parameterType=JvmTypeReference
		public Assignment getParameterTypeAssignment_5() { return cParameterTypeAssignment_5; }

		//JvmTypeReference
		public RuleCall getParameterTypeJvmTypeReferenceParserRuleCall_5_0() { return cParameterTypeJvmTypeReferenceParserRuleCall_5_0; }

		//("=" defaultValue=DefaultParameterValue | varArg?=VarArgToken)?
		public Alternatives getAlternatives_6() { return cAlternatives_6; }

		//"=" defaultValue=DefaultParameterValue
		public Group getGroup_6_0() { return cGroup_6_0; }

		//"="
		public Keyword getEqualsSignKeyword_6_0_0() { return cEqualsSignKeyword_6_0_0; }

		//defaultValue=DefaultParameterValue
		public Assignment getDefaultValueAssignment_6_0_1() { return cDefaultValueAssignment_6_0_1; }

		//DefaultParameterValue
		public RuleCall getDefaultValueDefaultParameterValueParserRuleCall_6_0_1_0() { return cDefaultValueDefaultParameterValueParserRuleCall_6_0_1_0; }

		//varArg?=VarArgToken
		public Assignment getVarArgAssignment_6_1() { return cVarArgAssignment_6_1; }

		//VarArgToken
		public RuleCall getVarArgVarArgTokenParserRuleCall_6_1_0() { return cVarArgVarArgTokenParserRuleCall_6_1_0; }
	}

	public class DefaultParameterValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DefaultParameterValue");
		private final RuleCall cXLiteralParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//DefaultParameterValue returns xbase::XExpression:
		//	XLiteral;
		public ParserRule getRule() { return rule; }

		//XLiteral
		public RuleCall getXLiteralParserRuleCall() { return cXLiteralParserRuleCall; }
	}

	public class XVariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XVariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cGroup_0.eContents().get(0);
		private final Action cXtendVariableDeclarationAction_0_0_0 = (Action)cGroup_0_0.eContents().get(0);
		private final Alternatives cAlternatives_0_0_1 = (Alternatives)cGroup_0_0.eContents().get(1);
		private final Group cGroup_0_0_1_0 = (Group)cAlternatives_0_0_1.eContents().get(0);
		private final Alternatives cAlternatives_0_0_1_0_0 = (Alternatives)cGroup_0_0_1_0.eContents().get(0);
		private final Assignment cWriteableAssignment_0_0_1_0_0_0 = (Assignment)cAlternatives_0_0_1_0_0.eContents().get(0);
		private final Keyword cWriteableVarKeyword_0_0_1_0_0_0_0 = (Keyword)cWriteableAssignment_0_0_1_0_0_0.eContents().get(0);
		private final Keyword cValKeyword_0_0_1_0_0_1 = (Keyword)cAlternatives_0_0_1_0_0.eContents().get(1);
		private final Assignment cExtensionAssignment_0_0_1_0_1 = (Assignment)cGroup_0_0_1_0.eContents().get(1);
		private final Keyword cExtensionExtensionKeyword_0_0_1_0_1_0 = (Keyword)cExtensionAssignment_0_0_1_0_1.eContents().get(0);
		private final Group cGroup_0_0_1_1 = (Group)cAlternatives_0_0_1.eContents().get(1);
		private final Assignment cExtensionAssignment_0_0_1_1_0 = (Assignment)cGroup_0_0_1_1.eContents().get(0);
		private final Keyword cExtensionExtensionKeyword_0_0_1_1_0_0 = (Keyword)cExtensionAssignment_0_0_1_1_0.eContents().get(0);
		private final Alternatives cAlternatives_0_0_1_1_1 = (Alternatives)cGroup_0_0_1_1.eContents().get(1);
		private final Assignment cWriteableAssignment_0_0_1_1_1_0 = (Assignment)cAlternatives_0_0_1_1_1.eContents().get(0);
		private final Keyword cWriteableVarKeyword_0_0_1_1_1_0_0 = (Keyword)cWriteableAssignment_0_0_1_1_1_0.eContents().get(0);
		private final Keyword cValKeyword_0_0_1_1_1_1 = (Keyword)cAlternatives_0_0_1_1_1.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameInnerVarIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTypeJvmTypeReferenceParserRuleCall_2_1_0 = (RuleCall)cTypeAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cRightAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cRightXExpressionParserRuleCall_3_1_0 = (RuleCall)cRightAssignment_3_1.eContents().get(0);
		
		////-----------------------------------------------
		//// BELOW THIS POINT, THE RULES FROM XBASE ARE OVERLOADED
		//// Variable declaration according to the SARL syntax (not the Xtext/Xtend)
		//XVariableDeclaration returns xbase::XExpression:
		//	=> ({xtend::XtendVariableDeclaration} ((writeable?="var" | "val") extension?="extension"? | extension?="extension"
		//	(writeable?="var" | "val"))) => name=InnerVarID (":" type=JvmTypeReference)? ("=" right=XExpression)?;
		public ParserRule getRule() { return rule; }

		//=> ({xtend::XtendVariableDeclaration} ((writeable?="var" | "val") extension?="extension"? | extension?="extension"
		//(writeable?="var" | "val"))) => name=InnerVarID (":" type=JvmTypeReference)? ("=" right=XExpression)?
		public Group getGroup() { return cGroup; }

		//=> ({xtend::XtendVariableDeclaration} ((writeable?="var" | "val") extension?="extension"? | extension?="extension"
		//(writeable?="var" | "val")))
		public Group getGroup_0() { return cGroup_0; }

		//{xtend::XtendVariableDeclaration} ((writeable?="var" | "val") extension?="extension"? | extension?="extension"
		//(writeable?="var" | "val"))
		public Group getGroup_0_0() { return cGroup_0_0; }

		//{xtend::XtendVariableDeclaration}
		public Action getXtendVariableDeclarationAction_0_0_0() { return cXtendVariableDeclarationAction_0_0_0; }

		//(writeable?="var" | "val") extension?="extension"? | extension?="extension" (writeable?="var" | "val")
		public Alternatives getAlternatives_0_0_1() { return cAlternatives_0_0_1; }

		//(writeable?="var" | "val") extension?="extension"?
		public Group getGroup_0_0_1_0() { return cGroup_0_0_1_0; }

		//writeable?="var" | "val"
		public Alternatives getAlternatives_0_0_1_0_0() { return cAlternatives_0_0_1_0_0; }

		//writeable?="var"
		public Assignment getWriteableAssignment_0_0_1_0_0_0() { return cWriteableAssignment_0_0_1_0_0_0; }

		//"var"
		public Keyword getWriteableVarKeyword_0_0_1_0_0_0_0() { return cWriteableVarKeyword_0_0_1_0_0_0_0; }

		//"val"
		public Keyword getValKeyword_0_0_1_0_0_1() { return cValKeyword_0_0_1_0_0_1; }

		//extension?="extension"?
		public Assignment getExtensionAssignment_0_0_1_0_1() { return cExtensionAssignment_0_0_1_0_1; }

		//"extension"
		public Keyword getExtensionExtensionKeyword_0_0_1_0_1_0() { return cExtensionExtensionKeyword_0_0_1_0_1_0; }

		//extension?="extension" (writeable?="var" | "val")
		public Group getGroup_0_0_1_1() { return cGroup_0_0_1_1; }

		//extension?="extension"
		public Assignment getExtensionAssignment_0_0_1_1_0() { return cExtensionAssignment_0_0_1_1_0; }

		//"extension"
		public Keyword getExtensionExtensionKeyword_0_0_1_1_0_0() { return cExtensionExtensionKeyword_0_0_1_1_0_0; }

		//writeable?="var" | "val"
		public Alternatives getAlternatives_0_0_1_1_1() { return cAlternatives_0_0_1_1_1; }

		//writeable?="var"
		public Assignment getWriteableAssignment_0_0_1_1_1_0() { return cWriteableAssignment_0_0_1_1_1_0; }

		//"var"
		public Keyword getWriteableVarKeyword_0_0_1_1_1_0_0() { return cWriteableVarKeyword_0_0_1_1_1_0_0; }

		//"val"
		public Keyword getValKeyword_0_0_1_1_1_1() { return cValKeyword_0_0_1_1_1_1; }

		//=> name=InnerVarID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//InnerVarID
		public RuleCall getNameInnerVarIDParserRuleCall_1_0() { return cNameInnerVarIDParserRuleCall_1_0; }

		//(":" type=JvmTypeReference)?
		public Group getGroup_2() { return cGroup_2; }

		//":"
		public Keyword getColonKeyword_2_0() { return cColonKeyword_2_0; }

		//type=JvmTypeReference
		public Assignment getTypeAssignment_2_1() { return cTypeAssignment_2_1; }

		//JvmTypeReference
		public RuleCall getTypeJvmTypeReferenceParserRuleCall_2_1_0() { return cTypeJvmTypeReferenceParserRuleCall_2_1_0; }

		//("=" right=XExpression)?
		public Group getGroup_3() { return cGroup_3; }

		//"="
		public Keyword getEqualsSignKeyword_3_0() { return cEqualsSignKeyword_3_0; }

		//right=XExpression
		public Assignment getRightAssignment_3_1() { return cRightAssignment_3_1; }

		//XExpression
		public RuleCall getRightXExpressionParserRuleCall_3_1_0() { return cRightXExpressionParserRuleCall_3_1_0; }
	}

	public class JvmFormalParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JvmFormalParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExtensionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cExtensionExtensionKeyword_0_0 = (Keyword)cExtensionAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameInnerVarIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cParameterTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cParameterTypeJvmTypeReferenceParserRuleCall_2_1_0 = (RuleCall)cParameterTypeAssignment_2_1.eContents().get(0);
		
		//// Formal parameter declaration according to the SARL syntax (not the Xtext/Xtend)
		//JvmFormalParameter returns xtend::XtendFormalParameter:
		//	extension?="extension"? name=InnerVarID (":" parameterType=JvmTypeReference)?;
		public ParserRule getRule() { return rule; }

		//extension?="extension"? name=InnerVarID (":" parameterType=JvmTypeReference)?
		public Group getGroup() { return cGroup; }

		//extension?="extension"?
		public Assignment getExtensionAssignment_0() { return cExtensionAssignment_0; }

		//"extension"
		public Keyword getExtensionExtensionKeyword_0_0() { return cExtensionExtensionKeyword_0_0; }

		//name=InnerVarID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//InnerVarID
		public RuleCall getNameInnerVarIDParserRuleCall_1_0() { return cNameInnerVarIDParserRuleCall_1_0; }

		//(=> ":" parameterType=JvmTypeReference)?
		public Group getGroup_2() { return cGroup_2; }

		//=> ":"
		public Keyword getColonKeyword_2_0() { return cColonKeyword_2_0; }

		//parameterType=JvmTypeReference
		public Assignment getParameterTypeAssignment_2_1() { return cParameterTypeAssignment_2_1; }

		//JvmTypeReference
		public RuleCall getParameterTypeJvmTypeReferenceParserRuleCall_2_1_0() { return cParameterTypeJvmTypeReferenceParserRuleCall_2_1_0; }
	}

	public class FullJvmFormalParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FullJvmFormalParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExtensionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cExtensionExtensionKeyword_0_0 = (Keyword)cExtensionAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameInnerVarIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cParameterTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cParameterTypeJvmTypeReferenceParserRuleCall_3_0 = (RuleCall)cParameterTypeAssignment_3.eContents().get(0);
		
		//// Formal parameter declaration according to the SARL syntax (not the Xtext/Xtend)
		//FullJvmFormalParameter returns xtend::XtendFormalParameter:
		//	extension?="extension"? name=InnerVarID ":" parameterType=JvmTypeReference;
		public ParserRule getRule() { return rule; }

		//extension?="extension"? name=InnerVarID ":" parameterType=JvmTypeReference
		public Group getGroup() { return cGroup; }

		//extension?="extension"?
		public Assignment getExtensionAssignment_0() { return cExtensionAssignment_0; }

		//"extension"
		public Keyword getExtensionExtensionKeyword_0_0() { return cExtensionExtensionKeyword_0_0; }

		//name=InnerVarID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//InnerVarID
		public RuleCall getNameInnerVarIDParserRuleCall_1_0() { return cNameInnerVarIDParserRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//parameterType=JvmTypeReference
		public Assignment getParameterTypeAssignment_3() { return cParameterTypeAssignment_3; }

		//JvmTypeReference
		public RuleCall getParameterTypeJvmTypeReferenceParserRuleCall_3_0() { return cParameterTypeJvmTypeReferenceParserRuleCall_3_0; }
	}

	public class XForLoopExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XForLoopExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cGroup_0.eContents().get(0);
		private final Action cXForLoopExpressionAction_0_0_0 = (Action)cGroup_0_0.eContents().get(0);
		private final Keyword cForKeyword_0_0_1 = (Keyword)cGroup_0_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0_0_2 = (Keyword)cGroup_0_0.eContents().get(2);
		private final Assignment cDeclaredParamAssignment_0_0_3 = (Assignment)cGroup_0_0.eContents().get(3);
		private final RuleCall cDeclaredParamSarlXLoopFormalParameterParserRuleCall_0_0_3_0 = (RuleCall)cDeclaredParamAssignment_0_0_3.eContents().get(0);
		private final Keyword cColonKeyword_0_0_4 = (Keyword)cGroup_0_0.eContents().get(4);
		private final Assignment cForExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cForExpressionXExpressionParserRuleCall_1_0 = (RuleCall)cForExpressionAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cEachExpressionAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cEachExpressionXExpressionParserRuleCall_3_0_0 = (RuleCall)cEachExpressionAssignment_3_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_1 = (Keyword)cAlternatives_3.eContents().get(1);
		
		//// The type of the for-loop's variable is following the SARL syntax (not the Xtext/Xtend)
		//XForLoopExpression returns xbase::XExpression:
		//	=> ({xbase::XForLoopExpression} "for" "(" declaredParam=SarlXLoopFormalParameter ":") forExpression=XExpression ")"
		//	(eachExpression=XExpression | ";");
		public ParserRule getRule() { return rule; }

		//=> ({xbase::XForLoopExpression} "for" "(" declaredParam=SarlXLoopFormalParameter ":") forExpression=XExpression ")"
		//(eachExpression=XExpression | ";")
		public Group getGroup() { return cGroup; }

		//=> ({xbase::XForLoopExpression} "for" "(" declaredParam=SarlXLoopFormalParameter ":")
		public Group getGroup_0() { return cGroup_0; }

		//{xbase::XForLoopExpression} "for" "(" declaredParam=SarlXLoopFormalParameter ":"
		public Group getGroup_0_0() { return cGroup_0_0; }

		//{xbase::XForLoopExpression}
		public Action getXForLoopExpressionAction_0_0_0() { return cXForLoopExpressionAction_0_0_0; }

		//"for"
		public Keyword getForKeyword_0_0_1() { return cForKeyword_0_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_0_2() { return cLeftParenthesisKeyword_0_0_2; }

		//declaredParam=SarlXLoopFormalParameter
		public Assignment getDeclaredParamAssignment_0_0_3() { return cDeclaredParamAssignment_0_0_3; }

		//SarlXLoopFormalParameter
		public RuleCall getDeclaredParamSarlXLoopFormalParameterParserRuleCall_0_0_3_0() { return cDeclaredParamSarlXLoopFormalParameterParserRuleCall_0_0_3_0; }

		//":"
		public Keyword getColonKeyword_0_0_4() { return cColonKeyword_0_0_4; }

		//forExpression=XExpression
		public Assignment getForExpressionAssignment_1() { return cForExpressionAssignment_1; }

		//XExpression
		public RuleCall getForExpressionXExpressionParserRuleCall_1_0() { return cForExpressionXExpressionParserRuleCall_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }

		//eachExpression=XExpression | ";"
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//eachExpression=XExpression
		public Assignment getEachExpressionAssignment_3_0() { return cEachExpressionAssignment_3_0; }

		//XExpression
		public RuleCall getEachExpressionXExpressionParserRuleCall_3_0_0() { return cEachExpressionXExpressionParserRuleCall_3_0_0; }

		//";"
		public Keyword getSemicolonKeyword_3_1() { return cSemicolonKeyword_3_1; }
	}

	public class SarlXLoopFormalParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SarlXLoopFormalParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cJvmFormalParameterAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cAsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cParameterTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cParameterTypeJvmTypeReferenceParserRuleCall_2_1_0 = (RuleCall)cParameterTypeAssignment_2_1.eContents().get(0);
		
		//// The following rule is not provided by Xbase, but we use it
		//// in the overloaded version of XForLoopExpression
		//SarlXLoopFormalParameter returns jvm::JvmFormalParameter:
		//	{jvm::JvmFormalParameter} name=ValidID ("as" parameterType=JvmTypeReference)?;
		public ParserRule getRule() { return rule; }

		//{jvm::JvmFormalParameter} name=ValidID ("as" parameterType=JvmTypeReference)?
		public Group getGroup() { return cGroup; }

		//{jvm::JvmFormalParameter}
		public Action getJvmFormalParameterAction_0() { return cJvmFormalParameterAction_0; }

		//name=ValidID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_0() { return cNameValidIDParserRuleCall_1_0; }

		//("as" parameterType=JvmTypeReference)?
		public Group getGroup_2() { return cGroup_2; }

		//"as"
		public Keyword getAsKeyword_2_0() { return cAsKeyword_2_0; }

		//parameterType=JvmTypeReference
		public Assignment getParameterTypeAssignment_2_1() { return cParameterTypeAssignment_2_1; }

		//JvmTypeReference
		public RuleCall getParameterTypeJvmTypeReferenceParserRuleCall_2_1_0() { return cParameterTypeJvmTypeReferenceParserRuleCall_2_1_0; }
	}

	public class XSwitchExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XSwitchExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXSwitchExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSwitchKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Group cGroup_2_0_0 = (Group)cGroup_2_0.eContents().get(0);
		private final Group cGroup_2_0_0_0 = (Group)cGroup_2_0_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_0_0_0_0 = (Keyword)cGroup_2_0_0_0.eContents().get(0);
		private final Assignment cDeclaredParamAssignment_2_0_0_0_1 = (Assignment)cGroup_2_0_0_0.eContents().get(1);
		private final RuleCall cDeclaredParamJvmFormalParameterParserRuleCall_2_0_0_0_1_0 = (RuleCall)cDeclaredParamAssignment_2_0_0_0_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_0_0_0_2 = (Keyword)cGroup_2_0_0_0.eContents().get(2);
		private final Assignment cSwitchAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cSwitchXExpressionParserRuleCall_2_0_1_0 = (RuleCall)cSwitchAssignment_2_0_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_0_2 = (Keyword)cGroup_2_0.eContents().get(2);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Group cGroup_2_1_0 = (Group)cGroup_2_1.eContents().get(0);
		private final Group cGroup_2_1_0_0 = (Group)cGroup_2_1_0.eContents().get(0);
		private final Assignment cDeclaredParamAssignment_2_1_0_0_0 = (Assignment)cGroup_2_1_0_0.eContents().get(0);
		private final RuleCall cDeclaredParamJvmFormalParameterParserRuleCall_2_1_0_0_0_0 = (RuleCall)cDeclaredParamAssignment_2_1_0_0_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_1_0_0_1 = (Keyword)cGroup_2_1_0_0.eContents().get(1);
		private final Assignment cSwitchAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cSwitchXExpressionOrSimpleConstructorCallParserRuleCall_2_1_1_0 = (RuleCall)cSwitchAssignment_2_1_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cCasesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCasesXCasePartParserRuleCall_4_0 = (RuleCall)cCasesAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cDefaultKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cColonKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cDefaultAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cDefaultXExpressionParserRuleCall_5_2_0 = (RuleCall)cDefaultAssignment_5_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//// The type of the switch's variable is following the SARL syntax (not the Xtext/Xtend)
		//XSwitchExpression returns xbase::XExpression:
		//	{xbase::XSwitchExpression} "switch" (=> ("(" declaredParam=JvmFormalParameter "=") switch=XExpression ")" | =>
		//	(declaredParam=JvmFormalParameter "=")? switch=XExpressionOrSimpleConstructorCall) "{" cases+=XCasePart* ("default"
		//	":" default=XExpression)? "}";
		public ParserRule getRule() { return rule; }

		//{xbase::XSwitchExpression} "switch" (=> ("(" declaredParam=JvmFormalParameter "=") switch=XExpression ")" | =>
		//(declaredParam=JvmFormalParameter "=")? switch=XExpressionOrSimpleConstructorCall) "{" cases+=XCasePart* ("default" ":"
		//default=XExpression)? "}"
		public Group getGroup() { return cGroup; }

		//{xbase::XSwitchExpression}
		public Action getXSwitchExpressionAction_0() { return cXSwitchExpressionAction_0; }

		//"switch"
		public Keyword getSwitchKeyword_1() { return cSwitchKeyword_1; }

		//=> ("(" declaredParam=JvmFormalParameter "=") switch=XExpression ")" | => (declaredParam=JvmFormalParameter "=")?
		//switch=XExpressionOrSimpleConstructorCall
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//=> ("(" declaredParam=JvmFormalParameter "=") switch=XExpression ")"
		public Group getGroup_2_0() { return cGroup_2_0; }

		//=> ("(" declaredParam=JvmFormalParameter "=")
		public Group getGroup_2_0_0() { return cGroup_2_0_0; }

		//"(" declaredParam=JvmFormalParameter "="
		public Group getGroup_2_0_0_0() { return cGroup_2_0_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0_0_0_0() { return cLeftParenthesisKeyword_2_0_0_0_0; }

		//declaredParam=JvmFormalParameter
		public Assignment getDeclaredParamAssignment_2_0_0_0_1() { return cDeclaredParamAssignment_2_0_0_0_1; }

		//JvmFormalParameter
		public RuleCall getDeclaredParamJvmFormalParameterParserRuleCall_2_0_0_0_1_0() { return cDeclaredParamJvmFormalParameterParserRuleCall_2_0_0_0_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2_0_0_0_2() { return cEqualsSignKeyword_2_0_0_0_2; }

		//switch=XExpression
		public Assignment getSwitchAssignment_2_0_1() { return cSwitchAssignment_2_0_1; }

		//XExpression
		public RuleCall getSwitchXExpressionParserRuleCall_2_0_1_0() { return cSwitchXExpressionParserRuleCall_2_0_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_0_2() { return cRightParenthesisKeyword_2_0_2; }

		//=> (declaredParam=JvmFormalParameter "=")? switch=XExpressionOrSimpleConstructorCall
		public Group getGroup_2_1() { return cGroup_2_1; }

		//=> (declaredParam=JvmFormalParameter "=")?
		public Group getGroup_2_1_0() { return cGroup_2_1_0; }

		//declaredParam=JvmFormalParameter "="
		public Group getGroup_2_1_0_0() { return cGroup_2_1_0_0; }

		//declaredParam=JvmFormalParameter
		public Assignment getDeclaredParamAssignment_2_1_0_0_0() { return cDeclaredParamAssignment_2_1_0_0_0; }

		//JvmFormalParameter
		public RuleCall getDeclaredParamJvmFormalParameterParserRuleCall_2_1_0_0_0_0() { return cDeclaredParamJvmFormalParameterParserRuleCall_2_1_0_0_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_2_1_0_0_1() { return cEqualsSignKeyword_2_1_0_0_1; }

		//switch=XExpressionOrSimpleConstructorCall
		public Assignment getSwitchAssignment_2_1_1() { return cSwitchAssignment_2_1_1; }

		//XExpressionOrSimpleConstructorCall
		public RuleCall getSwitchXExpressionOrSimpleConstructorCallParserRuleCall_2_1_1_0() { return cSwitchXExpressionOrSimpleConstructorCallParserRuleCall_2_1_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//cases+=XCasePart*
		public Assignment getCasesAssignment_4() { return cCasesAssignment_4; }

		//XCasePart
		public RuleCall getCasesXCasePartParserRuleCall_4_0() { return cCasesXCasePartParserRuleCall_4_0; }

		//("default" ":" default=XExpression)?
		public Group getGroup_5() { return cGroup_5; }

		//"default"
		public Keyword getDefaultKeyword_5_0() { return cDefaultKeyword_5_0; }

		//":"
		public Keyword getColonKeyword_5_1() { return cColonKeyword_5_1; }

		//default=XExpression
		public Assignment getDefaultAssignment_5_2() { return cDefaultAssignment_5_2; }

		//XExpression
		public RuleCall getDefaultXExpressionParserRuleCall_5_2_0() { return cDefaultXExpressionParserRuleCall_5_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	
	
	private final SarlScriptElements pSarlScript;
	private final VarArgTokenElements pVarArgToken;
	private final TypeElements pType;
	private final MemberElements pMember;
	private final SarlFieldElements pSarlField;
	private final SarlActionElements pSarlAction;
	private final SarlBehaviorUnitElements pSarlBehaviorUnit;
	private final SarlCapacityUsesElements pSarlCapacityUses;
	private final SarlRequiredCapacityElements pSarlRequiredCapacity;
	private final SarlConstructorElements pSarlConstructor;
	private final SarlClassElements pSarlClass;
	private final SarlInterfaceElements pSarlInterface;
	private final SarlEnumElements pSarlEnum;
	private final SarlAnnotationTypeElements pSarlAnnotationType;
	private final SarlEventElements pSarlEvent;
	private final EventMemberElements pEventMember;
	private final SarlAgentElements pSarlAgent;
	private final AgentMemberElements pAgentMember;
	private final SarlCapacityElements pSarlCapacity;
	private final CapacityMemberElements pCapacityMember;
	private final SarlBehaviorElements pSarlBehavior;
	private final BehaviorMemberElements pBehaviorMember;
	private final SarlSkillElements pSarlSkill;
	private final SkillMemberElements pSkillMember;
	private final ParameterElements pParameter;
	private final DefaultParameterValueElements pDefaultParameterValue;
	private final XVariableDeclarationElements pXVariableDeclaration;
	private final JvmFormalParameterElements pJvmFormalParameter;
	private final FullJvmFormalParameterElements pFullJvmFormalParameter;
	private final XForLoopExpressionElements pXForLoopExpression;
	private final SarlXLoopFormalParameterElements pSarlXLoopFormalParameter;
	private final XSwitchExpressionElements pXSwitchExpression;
	
	private final Grammar grammar;

	private final XtendGrammarAccess gaXtend;

	@Inject
	public SARLGrammarAccess(GrammarProvider grammarProvider,
		XtendGrammarAccess gaXtend) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaXtend = gaXtend;
		this.pSarlScript = new SarlScriptElements();
		this.pVarArgToken = new VarArgTokenElements();
		this.pType = new TypeElements();
		this.pMember = new MemberElements();
		this.pSarlField = new SarlFieldElements();
		this.pSarlAction = new SarlActionElements();
		this.pSarlBehaviorUnit = new SarlBehaviorUnitElements();
		this.pSarlCapacityUses = new SarlCapacityUsesElements();
		this.pSarlRequiredCapacity = new SarlRequiredCapacityElements();
		this.pSarlConstructor = new SarlConstructorElements();
		this.pSarlClass = new SarlClassElements();
		this.pSarlInterface = new SarlInterfaceElements();
		this.pSarlEnum = new SarlEnumElements();
		this.pSarlAnnotationType = new SarlAnnotationTypeElements();
		this.pSarlEvent = new SarlEventElements();
		this.pEventMember = new EventMemberElements();
		this.pSarlAgent = new SarlAgentElements();
		this.pAgentMember = new AgentMemberElements();
		this.pSarlCapacity = new SarlCapacityElements();
		this.pCapacityMember = new CapacityMemberElements();
		this.pSarlBehavior = new SarlBehaviorElements();
		this.pBehaviorMember = new BehaviorMemberElements();
		this.pSarlSkill = new SarlSkillElements();
		this.pSkillMember = new SkillMemberElements();
		this.pParameter = new ParameterElements();
		this.pDefaultParameterValue = new DefaultParameterValueElements();
		this.pXVariableDeclaration = new XVariableDeclarationElements();
		this.pJvmFormalParameter = new JvmFormalParameterElements();
		this.pFullJvmFormalParameter = new FullJvmFormalParameterElements();
		this.pXForLoopExpression = new XForLoopExpressionElements();
		this.pSarlXLoopFormalParameter = new SarlXLoopFormalParameterElements();
		this.pXSwitchExpression = new XSwitchExpressionElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("io.sarl.lang.SARL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public XtendGrammarAccess getXtendGrammarAccess() {
		return gaXtend;
	}

	
	//SarlScript returns xtend::XtendFile:
	//	{SarlScript} ("package" name=QualifiedName ";"?)? importSection=XImportSection? elements+=Type*;
	public SarlScriptElements getSarlScriptAccess() {
		return pSarlScript;
	}
	
	public ParserRule getSarlScriptRule() {
		return getSarlScriptAccess().getRule();
	}

	//VarArgToken:
	//	"*";
	public VarArgTokenElements getVarArgTokenAccess() {
		return pVarArgToken;
	}
	
	public ParserRule getVarArgTokenRule() {
		return getVarArgTokenAccess().getRule();
	}

	//Type returns xtend::XtendTypeDeclaration:
	//	SarlEvent | SarlCapacity | SarlAgent | SarlBehavior | SarlSkill | SarlClass | SarlInterface | SarlEnum |
	//	SarlAnnotationType;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//Member returns xtend::XtendMember:
	//	SarlField | SarlConstructor | SarlAction | SarlClass | SarlInterface | SarlEnum | SarlAnnotationType;
	public MemberElements getMemberAccess() {
		return pMember;
	}
	
	public ParserRule getMemberRule() {
		return getMemberAccess().getRule();
	}

	//SarlField returns xtend::XtendMember:
	//	{xtend::XtendField} annotations+=XAnnotation* {xtend::XtendField.annotationInfo=current} modifiers+=CommonModifier*
	//	(modifiers+=FieldModifier modifiers+=CommonModifier* | modifiers+="extension" (modifiers+=FieldModifier |
	//	modifiers+=CommonModifier)* | modifiers+=FieldModifier modifiers+=CommonModifier* modifiers+="extension"
	//	modifiers+=CommonModifier*) (=> (name=ValidID ":" type=JvmTypeReference) | name=ValidID) ("="
	//	initialValue=XExpression)? ";"?;
	public SarlFieldElements getSarlFieldAccess() {
		return pSarlField;
	}
	
	public ParserRule getSarlFieldRule() {
		return getSarlFieldAccess().getRule();
	}

	//SarlAction returns xtend::XtendFunction:
	//	{SarlAction} annotations+=XAnnotation* {SarlAction.annotationInfo=current} modifiers+=CommonModifier*
	//	modifiers+=MethodModifier (modifiers+=CommonModifier | modifiers+=MethodModifier)* ("<"
	//	typeParameters+=JvmTypeParameter ("," typeParameters+=JvmTypeParameter)* ">")? name=FunctionID ("("
	//	(parameters+=Parameter ("," parameters+=Parameter)*)? ")")? (":" => (returnType=JvmTypeReference
	//	createExtensionInfo=CreateExtensionInfo) | => (returnType=TypeReferenceWithTypeArgs) | =>
	//	(returnType=TypeReferenceNoTypeArgs) | => (createExtensionInfo=CreateExtensionInfo))? (("throws"
	//	exceptions+=JvmTypeReference ("," exceptions+=JvmTypeReference)*)? & ("fires" firedEvents+=JvmTypeReference (","
	//	firedEvents+=JvmTypeReference)*)?) (expression=XBlockExpression | expression=RichString | ";")?;
	public SarlActionElements getSarlActionAccess() {
		return pSarlAction;
	}
	
	public ParserRule getSarlActionRule() {
		return getSarlActionAccess().getRule();
	}

	//SarlBehaviorUnit returns xtend::XtendMember:
	//	{SarlBehaviorUnit} annotations+=XAnnotation* {SarlBehaviorUnit.annotationInfo=current} "on"
	//	name=JvmParameterizedTypeReference ("[" guard=XExpression "]")? (expression=XBlockExpression | expression=RichString |
	//	";");
	public SarlBehaviorUnitElements getSarlBehaviorUnitAccess() {
		return pSarlBehaviorUnit;
	}
	
	public ParserRule getSarlBehaviorUnitRule() {
		return getSarlBehaviorUnitAccess().getRule();
	}

	//SarlCapacityUses returns xtend::XtendMember:
	//	{SarlCapacityUses} "uses" capacities+=JvmParameterizedTypeReference ("," capacities+=JvmParameterizedTypeReference)*
	//	";"?;
	public SarlCapacityUsesElements getSarlCapacityUsesAccess() {
		return pSarlCapacityUses;
	}
	
	public ParserRule getSarlCapacityUsesRule() {
		return getSarlCapacityUsesAccess().getRule();
	}

	//SarlRequiredCapacity returns xtend::XtendMember:
	//	{SarlRequiredCapacity} "requires" capacities+=JvmParameterizedTypeReference (","
	//	capacities+=JvmParameterizedTypeReference)* ";"?;
	public SarlRequiredCapacityElements getSarlRequiredCapacityAccess() {
		return pSarlRequiredCapacity;
	}
	
	public ParserRule getSarlRequiredCapacityRule() {
		return getSarlRequiredCapacityAccess().getRule();
	}

	//SarlConstructor returns xtend::XtendConstructor:
	//	{SarlConstructor} annotations+=XAnnotation* {SarlConstructor.annotationInfo=current} modifiers+=CommonModifier* "new"
	//	("<" typeParameters+=JvmTypeParameter ("," typeParameters+=JvmTypeParameter)* ">")? ("(" (parameters+=Parameter (","
	//	parameters+=Parameter)*)? ")")? ("throws" exceptions+=JvmTypeReference ("," exceptions+=JvmTypeReference)*)?
	//	expression=XBlockExpression;
	public SarlConstructorElements getSarlConstructorAccess() {
		return pSarlConstructor;
	}
	
	public ParserRule getSarlConstructorRule() {
		return getSarlConstructorAccess().getRule();
	}

	//SarlClass returns xtend::XtendTypeDeclaration:
	//	{xtend::XtendClass} annotations+=XAnnotation* {xtend::XtendClass.annotationInfo=current} modifiers+=CommonModifier*
	//	"class" name=ValidID ("<" typeParameters+=JvmTypeParameter ("," typeParameters+=JvmTypeParameter)* ">")? ("extends"
	//	extends=JvmParameterizedTypeReference)? ("implements" implements+=JvmParameterizedTypeReference (","
	//	implements+=JvmParameterizedTypeReference)*)? "{" members+=Member* "}";
	public SarlClassElements getSarlClassAccess() {
		return pSarlClass;
	}
	
	public ParserRule getSarlClassRule() {
		return getSarlClassAccess().getRule();
	}

	//SarlInterface returns xtend::XtendTypeDeclaration:
	//	{xtend::XtendInterface} annotations+=XAnnotation* {xtend::XtendInterface.annotationInfo=current}
	//	modifiers+=CommonModifier* "interface" name=ValidID ("<" typeParameters+=JvmTypeParameter (","
	//	typeParameters+=JvmTypeParameter)* ">")? ("extends" extends+=JvmParameterizedTypeReference (","
	//	extends+=JvmParameterizedTypeReference)*)? "{" members+=Member* "}";
	public SarlInterfaceElements getSarlInterfaceAccess() {
		return pSarlInterface;
	}
	
	public ParserRule getSarlInterfaceRule() {
		return getSarlInterfaceAccess().getRule();
	}

	//SarlEnum returns xtend::XtendTypeDeclaration:
	//	{xtend::XtendEnum} annotations+=XAnnotation* {xtend::XtendEnum.annotationInfo=current} modifiers+=CommonModifier*
	//	"enum" name=ValidID "{" (members+=XtendEnumLiteral ("," members+=XtendEnumLiteral)*)? ";"? "}";
	public SarlEnumElements getSarlEnumAccess() {
		return pSarlEnum;
	}
	
	public ParserRule getSarlEnumRule() {
		return getSarlEnumAccess().getRule();
	}

	//SarlAnnotationType returns xtend::XtendTypeDeclaration:
	//	{xtend::XtendAnnotationType} annotations+=XAnnotation* {xtend::XtendAnnotationType.annotationInfo=current}
	//	modifiers+=CommonModifier* "annotation" name=ValidID "{" members+=AnnotationField* "}";
	public SarlAnnotationTypeElements getSarlAnnotationTypeAccess() {
		return pSarlAnnotationType;
	}
	
	public ParserRule getSarlAnnotationTypeRule() {
		return getSarlAnnotationTypeAccess().getRule();
	}

	//SarlEvent returns xtend::XtendTypeDeclaration:
	//	{SarlEvent} annotations+=XAnnotation* {SarlEvent.annotationInfo=current} modifiers+=CommonModifier* "event"
	//	name=ValidID ("extends" extends+=JvmParameterizedTypeReference)? ("{" members+=EventMember* "}")?;
	public SarlEventElements getSarlEventAccess() {
		return pSarlEvent;
	}
	
	public ParserRule getSarlEventRule() {
		return getSarlEventAccess().getRule();
	}

	//EventMember returns xtend::XtendMember:
	//	SarlField | SarlConstructor;
	public EventMemberElements getEventMemberAccess() {
		return pEventMember;
	}
	
	public ParserRule getEventMemberRule() {
		return getEventMemberAccess().getRule();
	}

	//SarlAgent returns xtend::XtendTypeDeclaration:
	//	{SarlAgent} annotations+=XAnnotation* {SarlAgent.annotationInfo=current} modifiers+=CommonModifier* "agent"
	//	name=ValidID ("extends" extends+=JvmParameterizedTypeReference)? "{" members+=AgentMember* "}";
	public SarlAgentElements getSarlAgentAccess() {
		return pSarlAgent;
	}
	
	public ParserRule getSarlAgentRule() {
		return getSarlAgentAccess().getRule();
	}

	//AgentMember returns xtend::XtendMember:
	//	Member | SarlBehaviorUnit | SarlCapacityUses | SarlRequiredCapacity;
	public AgentMemberElements getAgentMemberAccess() {
		return pAgentMember;
	}
	
	public ParserRule getAgentMemberRule() {
		return getAgentMemberAccess().getRule();
	}

	//SarlCapacity returns xtend::XtendTypeDeclaration:
	//	{SarlCapacity} annotations+=XAnnotation* {SarlCapacity.annotationInfo=current} modifiers+=CommonModifier* "capacity"
	//	name=ValidID ("extends" extends+=JvmParameterizedTypeReference ("," extends+=JvmParameterizedTypeReference)*)? "{"
	//	members+=CapacityMember* "}";
	public SarlCapacityElements getSarlCapacityAccess() {
		return pSarlCapacity;
	}
	
	public ParserRule getSarlCapacityRule() {
		return getSarlCapacityAccess().getRule();
	}

	//CapacityMember returns xtend::XtendMember:
	//	SarlAction;
	public CapacityMemberElements getCapacityMemberAccess() {
		return pCapacityMember;
	}
	
	public ParserRule getCapacityMemberRule() {
		return getCapacityMemberAccess().getRule();
	}

	//SarlBehavior returns xtend::XtendTypeDeclaration:
	//	{SarlBehavior} annotations+=XAnnotation* {SarlBehavior.annotationInfo=current} modifiers+=CommonModifier* "behavior"
	//	name=ValidID ("extends" extends+=JvmParameterizedTypeReference)? "{" members+=BehaviorMember* "}";
	public SarlBehaviorElements getSarlBehaviorAccess() {
		return pSarlBehavior;
	}
	
	public ParserRule getSarlBehaviorRule() {
		return getSarlBehaviorAccess().getRule();
	}

	//BehaviorMember returns xtend::XtendMember:
	//	Member | SarlBehaviorUnit | SarlCapacityUses | SarlRequiredCapacity;
	public BehaviorMemberElements getBehaviorMemberAccess() {
		return pBehaviorMember;
	}
	
	public ParserRule getBehaviorMemberRule() {
		return getBehaviorMemberAccess().getRule();
	}

	//SarlSkill returns xtend::XtendTypeDeclaration:
	//	{SarlSkill} annotations+=XAnnotation* {SarlSkill.annotationInfo=current} modifiers+=CommonModifier* "skill"
	//	name=ValidID (("extends" extends+=JvmParameterizedTypeReference)? & ("implements"
	//	(implements+=JvmParameterizedTypeReference ("," implements+=JvmParameterizedTypeReference)*))?) "{"
	//	members+=SkillMember* "}";
	public SarlSkillElements getSarlSkillAccess() {
		return pSarlSkill;
	}
	
	public ParserRule getSarlSkillRule() {
		return getSarlSkillAccess().getRule();
	}

	//SkillMember returns xtend::XtendMember:
	//	Member | SarlBehaviorUnit | SarlCapacityUses | SarlRequiredCapacity;
	public SkillMemberElements getSkillMemberAccess() {
		return pSkillMember;
	}
	
	public ParserRule getSkillMemberRule() {
		return getSkillMemberAccess().getRule();
	}

	//Parameter returns xtend::XtendParameter:
	//	{SarlFormalParameter} annotations+=XAnnotation* (extension?="extension" annotations+=XAnnotation*)? name=InnerVarID
	//	":" parameterType=JvmTypeReference ("=" defaultValue=DefaultParameterValue | varArg?=VarArgToken)?;
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}

	//DefaultParameterValue returns xbase::XExpression:
	//	XLiteral;
	public DefaultParameterValueElements getDefaultParameterValueAccess() {
		return pDefaultParameterValue;
	}
	
	public ParserRule getDefaultParameterValueRule() {
		return getDefaultParameterValueAccess().getRule();
	}

	////-----------------------------------------------
	//// BELOW THIS POINT, THE RULES FROM XBASE ARE OVERLOADED
	//// Variable declaration according to the SARL syntax (not the Xtext/Xtend)
	//XVariableDeclaration returns xbase::XExpression:
	//	=> ({xtend::XtendVariableDeclaration} ((writeable?="var" | "val") extension?="extension"? | extension?="extension"
	//	(writeable?="var" | "val"))) => name=InnerVarID (":" type=JvmTypeReference)? ("=" right=XExpression)?;
	public XVariableDeclarationElements getXVariableDeclarationAccess() {
		return pXVariableDeclaration;
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}

	//// Formal parameter declaration according to the SARL syntax (not the Xtext/Xtend)
	//JvmFormalParameter returns xtend::XtendFormalParameter:
	//	extension?="extension"? name=InnerVarID (":" parameterType=JvmTypeReference)?;
	public JvmFormalParameterElements getJvmFormalParameterAccess() {
		return pJvmFormalParameter;
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}

	//// Formal parameter declaration according to the SARL syntax (not the Xtext/Xtend)
	//FullJvmFormalParameter returns xtend::XtendFormalParameter:
	//	extension?="extension"? name=InnerVarID ":" parameterType=JvmTypeReference;
	public FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return pFullJvmFormalParameter;
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}

	//// The type of the for-loop's variable is following the SARL syntax (not the Xtext/Xtend)
	//XForLoopExpression returns xbase::XExpression:
	//	=> ({xbase::XForLoopExpression} "for" "(" declaredParam=SarlXLoopFormalParameter ":") forExpression=XExpression ")"
	//	(eachExpression=XExpression | ";");
	public XForLoopExpressionElements getXForLoopExpressionAccess() {
		return pXForLoopExpression;
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}

	//// The following rule is not provided by Xbase, but we use it
	//// in the overloaded version of XForLoopExpression
	//SarlXLoopFormalParameter returns jvm::JvmFormalParameter:
	//	{jvm::JvmFormalParameter} name=ValidID ("as" parameterType=JvmTypeReference)?;
	public SarlXLoopFormalParameterElements getSarlXLoopFormalParameterAccess() {
		return pSarlXLoopFormalParameter;
	}
	
	public ParserRule getSarlXLoopFormalParameterRule() {
		return getSarlXLoopFormalParameterAccess().getRule();
	}

	//// The type of the switch's variable is following the SARL syntax (not the Xtext/Xtend)
	//XSwitchExpression returns xbase::XExpression:
	//	{xbase::XSwitchExpression} "switch" (=> ("(" declaredParam=JvmFormalParameter "=") switch=XExpression ")" | =>
	//	(declaredParam=JvmFormalParameter "=")? switch=XExpressionOrSimpleConstructorCall) "{" cases+=XCasePart* ("default"
	//	":" default=XExpression)? "}";
	public XSwitchExpressionElements getXSwitchExpressionAccess() {
		return pXSwitchExpression;
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}

	//File returns XtendFile:
	//	("package" package=QualifiedName ";"?)? importSection=XImportSection? xtendTypes+=Type*;
	public XtendGrammarAccess.FileElements getFileAccess() {
		return gaXtend.getFileAccess();
	}
	
	public ParserRule getFileRule() {
		return getFileAccess().getRule();
	}

	//JvmSuperTypeReference returns types::JvmTypeReference:
	//	JvmParameterizedTypeReference | XFunctionSuperTypeRef;
	public XtendGrammarAccess.JvmSuperTypeReferenceElements getJvmSuperTypeReferenceAccess() {
		return gaXtend.getJvmSuperTypeReferenceAccess();
	}
	
	public ParserRule getJvmSuperTypeReferenceRule() {
		return getJvmSuperTypeReferenceAccess().getRule();
	}

	//XFunctionSuperTypeRef returns xtype::XFunctionTypeRef:
	//	(instanceContext?="(" (paramTypes+=JvmTypeReference ("," paramTypes+=JvmTypeReference)*)? ")")? "=>"
	//	returnType=JvmTypeReference;
	public XtendGrammarAccess.XFunctionSuperTypeRefElements getXFunctionSuperTypeRefAccess() {
		return gaXtend.getXFunctionSuperTypeRefAccess();
	}
	
	public ParserRule getXFunctionSuperTypeRefRule() {
		return getXFunctionSuperTypeRefAccess().getRule();
	}

	//AnnotationField returns XtendMember:
	//	{XtendMember} annotations+=XAnnotation* (({XtendField.annotationInfo=current} modifiers+=CommonModifier*
	//	modifiers+=FieldModifier modifiers+=CommonModifier* type=JvmTypeReference? name=ValidID |
	//	{XtendField.annotationInfo=current} modifiers+=CommonModifier* type=JvmTypeReference name=ValidID) ("="
	//	initialValue=XAnnotationElementValue)? ";"? | {XtendClass.annotationInfo=current} modifiers+=CommonModifier* "class"
	//	name=ValidID ("<" typeParameters+=JvmTypeParameter ("," typeParameters+=JvmTypeParameter)* ">")? ("extends"
	//	extends=JvmParameterizedTypeReference)? ("implements" implements+=JvmParameterizedTypeReference (","
	//	implements+=JvmParameterizedTypeReference)*)? "{" members+=Member* "}" | {XtendInterface.annotationInfo=current}
	//	modifiers+=CommonModifier* "interface" name=ValidID ("<" typeParameters+=JvmTypeParameter (","
	//	typeParameters+=JvmTypeParameter)* ">")? ("extends" extends+=JvmParameterizedTypeReference (","
	//	extends+=JvmParameterizedTypeReference)*)? "{" members+=Member* "}" | {XtendEnum.annotationInfo=current}
	//	modifiers+=CommonModifier* "enum" name=ValidID "{" (members+=XtendEnumLiteral ("," members+=XtendEnumLiteral)*)? ";"?
	//	"}" | {XtendAnnotationType.annotationInfo=current} modifiers+=CommonModifier* "annotation" name=ValidID "{"
	//	members+=AnnotationField* "}");
	public XtendGrammarAccess.AnnotationFieldElements getAnnotationFieldAccess() {
		return gaXtend.getAnnotationFieldAccess();
	}
	
	public ParserRule getAnnotationFieldRule() {
		return getAnnotationFieldAccess().getRule();
	}

	//TypeReferenceNoTypeArgs returns types::JvmParameterizedTypeReference:
	//	type=[types::JvmType|QualifiedName];
	public XtendGrammarAccess.TypeReferenceNoTypeArgsElements getTypeReferenceNoTypeArgsAccess() {
		return gaXtend.getTypeReferenceNoTypeArgsAccess();
	}
	
	public ParserRule getTypeReferenceNoTypeArgsRule() {
		return getTypeReferenceNoTypeArgsAccess().getRule();
	}

	/// *** The following two rules are a workaround for a limitation in serialization logic
	// *
	// * Apparently we choose the shortest possible path to create the sequence of unassigned
	// * tokens between two assigned values. This doesn't work well with Antlr predicates which
	// * may have lead to another decision path - not necessarily the shortest one in the sense
	// * of the serializer. That's why we make the type arguments mandatory here so that we
	// * do no longer have two equally short path's from method identifier to block expression
	// ************************************************************************************** / TypeReferenceWithTypeArgs
	//returns types::JvmTypeReference:
	//	ParameterizedTypeReferenceWithTypeArgs => ({types::JvmGenericArrayTypeReference.componentType=current} ArrayBrackets)*
	//	| TypeReferenceNoTypeArgs => ({types::JvmGenericArrayTypeReference.componentType=current} ArrayBrackets)+ |
	//	XFunctionTypeRef;
	public XtendGrammarAccess.TypeReferenceWithTypeArgsElements getTypeReferenceWithTypeArgsAccess() {
		return gaXtend.getTypeReferenceWithTypeArgsAccess();
	}
	
	public ParserRule getTypeReferenceWithTypeArgsRule() {
		return getTypeReferenceWithTypeArgsAccess().getRule();
	}

	//ParameterizedTypeReferenceWithTypeArgs returns types::JvmParameterizedTypeReference:
	//	type=[types::JvmType|QualifiedName] ("<" arguments+=JvmArgumentTypeReference (","
	//	arguments+=JvmArgumentTypeReference)* ">" (=> ({types::JvmInnerTypeReference.outer=current} ".")
	//	type=[types::JvmType|ValidID] ("<" arguments+=JvmArgumentTypeReference ("," arguments+=JvmArgumentTypeReference)*
	//	">")?)*);
	public XtendGrammarAccess.ParameterizedTypeReferenceWithTypeArgsElements getParameterizedTypeReferenceWithTypeArgsAccess() {
		return gaXtend.getParameterizedTypeReferenceWithTypeArgsAccess();
	}
	
	public ParserRule getParameterizedTypeReferenceWithTypeArgsRule() {
		return getParameterizedTypeReferenceWithTypeArgsAccess().getRule();
	}

	/// *** The following two rules are a workaround for a limitation in serialiation logic * / FunctionID:
	//	ValidID | Operators;
	public XtendGrammarAccess.FunctionIDElements getFunctionIDAccess() {
		return gaXtend.getFunctionIDAccess();
	}
	
	public ParserRule getFunctionIDRule() {
		return getFunctionIDAccess().getRule();
	}

	//Operators:
	//	OpMultiAssign //	| OpAdd completely contained in OpUnary
	//	| OpOr | OpAnd | OpEquality | OpCompare | OpOther | OpMulti | OpUnary | OpPostfix;
	public XtendGrammarAccess.OperatorsElements getOperatorsAccess() {
		return gaXtend.getOperatorsAccess();
	}
	
	public ParserRule getOperatorsRule() {
		return getOperatorsAccess().getRule();
	}

	//XtendEnumLiteral:
	//	name=ValidID;
	public XtendGrammarAccess.XtendEnumLiteralElements getXtendEnumLiteralAccess() {
		return gaXtend.getXtendEnumLiteralAccess();
	}
	
	public ParserRule getXtendEnumLiteralRule() {
		return getXtendEnumLiteralAccess().getRule();
	}

	//CommonModifier:
	//	"public" | "private" | "protected" | "package" | "abstract" | "static" | "dispatch" | "final" | "strictfp" | "native"
	//	| "volatile" | "synchronized" | "transient";
	public XtendGrammarAccess.CommonModifierElements getCommonModifierAccess() {
		return gaXtend.getCommonModifierAccess();
	}
	
	public ParserRule getCommonModifierRule() {
		return getCommonModifierAccess().getRule();
	}

	//FieldModifier:
	//	"val" | "var";
	public XtendGrammarAccess.FieldModifierElements getFieldModifierAccess() {
		return gaXtend.getFieldModifierAccess();
	}
	
	public ParserRule getFieldModifierRule() {
		return getFieldModifierAccess().getRule();
	}

	//MethodModifier:
	//	"def" | "override";
	public XtendGrammarAccess.MethodModifierElements getMethodModifierAccess() {
		return gaXtend.getMethodModifierAccess();
	}
	
	public ParserRule getMethodModifierRule() {
		return getMethodModifierAccess().getRule();
	}

	//CreateExtensionInfo:
	//	"create" (name=ValidID ":")? createExpression=XExpression;
	public XtendGrammarAccess.CreateExtensionInfoElements getCreateExtensionInfoAccess() {
		return gaXtend.getCreateExtensionInfoAccess();
	}
	
	public ParserRule getCreateExtensionInfoRule() {
		return getCreateExtensionInfoAccess().getRule();
	}

	//ValidID:
	//	ID | "create" | "annotation" | "AFTER" | "BEFORE" | "SEPARATOR";
	public XtendGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaXtend.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}

	//// For feature calls we add 'extension' since there are method such as 'isExtension' or 'getExtension' out there.
	//FeatureCallID:
	//	InnerVarID | "extension";
	public XtendGrammarAccess.FeatureCallIDElements getFeatureCallIDAccess() {
		return gaXtend.getFeatureCallIDAccess();
	}
	
	public ParserRule getFeatureCallIDRule() {
		return getFeatureCallIDAccess().getRule();
	}

	//InnerVarID:
	//	ID | "abstract" | "annotation" | "class" | "create" | "def" | "dispatch" | "enum" | "extends" | "final" | "implements"
	//	| "import" | "interface" | "override" | "package" | "public" | "private" | "protected" | "static" | "throws" |
	//	"strictfp" | "native" | "volatile" | "synchronized" | "transient" | "AFTER" | "BEFORE" | "SEPARATOR";
	public XtendGrammarAccess.InnerVarIDElements getInnerVarIDAccess() {
		return gaXtend.getInnerVarIDAccess();
	}
	
	public ParserRule getInnerVarIDRule() {
		return getInnerVarIDAccess().getRule();
	}

	//XConstructorCall returns xbase::XExpression:
	//	XbaseConstructorCall (=> ({AnonymousClass.constructorCall=current} "{") members+=Member* "}")?;
	public XtendGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaXtend.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}

	//XbaseConstructorCall returns xbase::XConstructorCall:
	//	{xbase::XConstructorCall} "new" constructor=[types::JvmConstructor|QualifiedName] ("<"
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")? (=>
	//	explicitConstructorCall?="(" (arguments+=XShortClosure | arguments+=XExpression ("," arguments+=XExpression)*)? ")")?
	//	arguments+=XClosure?;
	public XtendGrammarAccess.XbaseConstructorCallElements getXbaseConstructorCallAccess() {
		return gaXtend.getXbaseConstructorCallAccess();
	}
	
	public ParserRule getXbaseConstructorCallRule() {
		return getXbaseConstructorCallAccess().getRule();
	}

	//XStringLiteral returns xbase::XExpression:
	//	SimpleStringLiteral | RichString;
	public XtendGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaXtend.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}

	//XExpressionOrSimpleConstructorCall returns xbase::XExpression:
	//	XbaseConstructorCall | XExpression;
	public XtendGrammarAccess.XExpressionOrSimpleConstructorCallElements getXExpressionOrSimpleConstructorCallAccess() {
		return gaXtend.getXExpressionOrSimpleConstructorCallAccess();
	}
	
	public ParserRule getXExpressionOrSimpleConstructorCallRule() {
		return getXExpressionOrSimpleConstructorCallAccess().getRule();
	}

	//SimpleStringLiteral returns xbase::XExpression:
	//	{xbase::XStringLiteral} value=STRING;
	public XtendGrammarAccess.SimpleStringLiteralElements getSimpleStringLiteralAccess() {
		return gaXtend.getSimpleStringLiteralAccess();
	}
	
	public ParserRule getSimpleStringLiteralRule() {
		return getSimpleStringLiteralAccess().getRule();
	}

	//RichString returns xbase::XExpression:
	//	{RichString} (expressions+=RichStringLiteral | expressions+=RichStringLiteralStart expressions+=RichStringPart?
	//	(expressions+=RichStringLiteralInbetween expressions+=RichStringPart?)* expressions+=RichStringLiteralEnd);
	public XtendGrammarAccess.RichStringElements getRichStringAccess() {
		return gaXtend.getRichStringAccess();
	}
	
	public ParserRule getRichStringRule() {
		return getRichStringAccess().getRule();
	}

	//RichStringLiteral returns xbase::XExpression:
	//	{RichStringLiteral} value=RICH_TEXT;
	public XtendGrammarAccess.RichStringLiteralElements getRichStringLiteralAccess() {
		return gaXtend.getRichStringLiteralAccess();
	}
	
	public ParserRule getRichStringLiteralRule() {
		return getRichStringLiteralAccess().getRule();
	}

	//RichStringLiteralStart returns xbase::XExpression:
	//	{RichStringLiteral} value=RICH_TEXT_START;
	public XtendGrammarAccess.RichStringLiteralStartElements getRichStringLiteralStartAccess() {
		return gaXtend.getRichStringLiteralStartAccess();
	}
	
	public ParserRule getRichStringLiteralStartRule() {
		return getRichStringLiteralStartAccess().getRule();
	}

	//RichStringLiteralInbetween returns xbase::XExpression:
	//	{RichStringLiteral} (value=RICH_TEXT_INBETWEEN | value=COMMENT_RICH_TEXT_INBETWEEN);
	public XtendGrammarAccess.RichStringLiteralInbetweenElements getRichStringLiteralInbetweenAccess() {
		return gaXtend.getRichStringLiteralInbetweenAccess();
	}
	
	public ParserRule getRichStringLiteralInbetweenRule() {
		return getRichStringLiteralInbetweenAccess().getRule();
	}

	//RichStringLiteralEnd returns xbase::XExpression:
	//	{RichStringLiteral} (value=RICH_TEXT_END | value=COMMENT_RICH_TEXT_END);
	public XtendGrammarAccess.RichStringLiteralEndElements getRichStringLiteralEndAccess() {
		return gaXtend.getRichStringLiteralEndAccess();
	}
	
	public ParserRule getRichStringLiteralEndRule() {
		return getRichStringLiteralEndAccess().getRule();
	}

	//InternalRichString returns xbase::XExpression:
	//	{RichString} (expressions+=RichStringLiteralInbetween (expressions+=RichStringPart?
	//	expressions+=RichStringLiteralInbetween)*);
	public XtendGrammarAccess.InternalRichStringElements getInternalRichStringAccess() {
		return gaXtend.getInternalRichStringAccess();
	}
	
	public ParserRule getInternalRichStringRule() {
		return getInternalRichStringAccess().getRule();
	}

	//RichStringPart returns xbase::XExpression:
	//	XExpressionOrVarDeclaration | RichStringForLoop | RichStringIf;
	public XtendGrammarAccess.RichStringPartElements getRichStringPartAccess() {
		return gaXtend.getRichStringPartAccess();
	}
	
	public ParserRule getRichStringPartRule() {
		return getRichStringPartAccess().getRule();
	}

	//RichStringForLoop returns xbase::XExpression:
	//	{RichStringForLoop} "FOR" declaredParam=JvmFormalParameter ":" forExpression=XExpression ("BEFORE"
	//	before=XExpression)? ("SEPARATOR" separator=XExpression)? ("AFTER" after=XExpression)?
	//	eachExpression=InternalRichString "ENDFOR";
	public XtendGrammarAccess.RichStringForLoopElements getRichStringForLoopAccess() {
		return gaXtend.getRichStringForLoopAccess();
	}
	
	public ParserRule getRichStringForLoopRule() {
		return getRichStringForLoopAccess().getRule();
	}

	//RichStringIf returns xbase::XExpression:
	//	{RichStringIf} "IF" if=XExpression then=InternalRichString elseIfs+=RichStringElseIf* ("ELSE"
	//	else=InternalRichString)? "ENDIF";
	public XtendGrammarAccess.RichStringIfElements getRichStringIfAccess() {
		return gaXtend.getRichStringIfAccess();
	}
	
	public ParserRule getRichStringIfRule() {
		return getRichStringIfAccess().getRule();
	}

	//RichStringElseIf:
	//	"ELSEIF" if=XExpression then=InternalRichString;
	public XtendGrammarAccess.RichStringElseIfElements getRichStringElseIfAccess() {
		return gaXtend.getRichStringElseIfAccess();
	}
	
	public ParserRule getRichStringElseIfRule() {
		return getRichStringElseIfAccess().getRule();
	}

	//terminal ID:
	//	"^"? (IDENTIFIER_START | UNICODE_ESCAPE) (IDENTIFIER_PART | UNICODE_ESCAPE)*;
	public TerminalRule getIDRule() {
		return gaXtend.getIDRule();
	} 

	//terminal fragment HEX_DIGIT:
	//	"0".."9" | "a".."f" | "A".."F";
	public TerminalRule getHEX_DIGITRule() {
		return gaXtend.getHEX_DIGITRule();
	} 

	//terminal fragment UNICODE_ESCAPE:
	//	"\\" "u" (HEX_DIGIT (HEX_DIGIT (HEX_DIGIT HEX_DIGIT?)?)?)?;
	public TerminalRule getUNICODE_ESCAPERule() {
		return gaXtend.getUNICODE_ESCAPERule();
	} 

	//terminal RICH_TEXT:
	//	"\'\'\'" IN_RICH_STRING* ("\'\'\'" | ("\'" "\'"?)? EOF);
	public TerminalRule getRICH_TEXTRule() {
		return gaXtend.getRICH_TEXTRule();
	} 

	//terminal RICH_TEXT_START:
	//	"\'\'\'" IN_RICH_STRING* ("\'" "\'"?)? "�";
	public TerminalRule getRICH_TEXT_STARTRule() {
		return gaXtend.getRICH_TEXT_STARTRule();
	} 

	//terminal RICH_TEXT_END:
	//	"�" IN_RICH_STRING* ("\'\'\'" | ("\'" "\'"?)? EOF);
	public TerminalRule getRICH_TEXT_ENDRule() {
		return gaXtend.getRICH_TEXT_ENDRule();
	} 

	//terminal RICH_TEXT_INBETWEEN:
	//	"�" IN_RICH_STRING* ("\'" "\'"?)? "�";
	public TerminalRule getRICH_TEXT_INBETWEENRule() {
		return gaXtend.getRICH_TEXT_INBETWEENRule();
	} 

	//terminal COMMENT_RICH_TEXT_INBETWEEN:
	//	"��" !("\n" | "\r")* ("\r"? "\n" IN_RICH_STRING* ("\'" "\'"?)? "�")?;
	public TerminalRule getCOMMENT_RICH_TEXT_INBETWEENRule() {
		return gaXtend.getCOMMENT_RICH_TEXT_INBETWEENRule();
	} 

	//terminal COMMENT_RICH_TEXT_END:
	//	"��" !("\n" | "\r")* ("\r"? "\n" IN_RICH_STRING* ("\'\'\'" | ("\'" "\'"?)? EOF) | EOF);
	public TerminalRule getCOMMENT_RICH_TEXT_ENDRule() {
		return gaXtend.getCOMMENT_RICH_TEXT_ENDRule();
	} 

	//terminal fragment IN_RICH_STRING:
	//	"\'\'" !("�" | "\'") | "\'" !("�" | "\'") | !("�" | "\'");
	public TerminalRule getIN_RICH_STRINGRule() {
		return gaXtend.getIN_RICH_STRINGRule();
	} 

	//terminal fragment IDENTIFIER_START:
	//	"$" | "A".."Z" | "_" | "a".."z" | "¢".."¥" | "ª" | "µ" | "º" | "À".."Ö" | "Ø".."ö" | "ø".."ȶ" | "ɐ".."ˁ" | "ˆ".."ˑ" |
	//	"ˠ".."ˤ" | "ˮ" | "ͺ" | "Ά" | "Έ".."Ί" | "Ό" | "Ύ".."Ρ" | "Σ".."ώ" | "ϐ".."ϵ" | "Ϸ".."ϻ" | "Ѐ".."ҁ" | "Ҋ".."ӎ" |
	//	"Ӑ".."ӵ" | "Ӹ".."ӹ" | "Ԁ".."ԏ" | "Ա".."Ֆ" | "ՙ" | "ա".."և" | "א".."ת" | "װ".."ײ" | "ء".."غ" | "ـ".."ي" | "ٮ".."ٯ" |
	//	"ٱ".."ۓ" | "ە" | "ۥ".."ۦ" | "ۮ".."ۯ" | "ۺ".."ۼ" | "ۿ" | "ܐ" | "ܒ".."ܯ" | "ݍ".."ݏ" | "ހ".."ޥ" | "ޱ" | "ऄ".."ह" | "ऽ" |
	//	"ॐ" | "क़".."ॡ" | "অ".."ঌ" | "এ".."ঐ" | "ও".."ন" | "প".."র" | "ল" | "শ".."হ" | "ঽ" | "ড়".."ঢ়" | "য়".."ৡ" | "ৰ".."৳" |
	//	"ਅ".."ਊ" | "ਏ".."ਐ" | "ਓ".."ਨ" | "ਪ".."ਰ" | "ਲ".."ਲ਼" | "ਵ".."ਸ਼" | "ਸ".."ਹ" | "ਖ਼".."ੜ" | "ਫ਼" | "ੲ".."ੴ" | "અ".."ઍ" |
	//	"એ".."ઑ" | "ઓ".."ન" | "પ".."ર" | "લ".."ળ" | "વ".."હ" | "ઽ" | "ૐ" | "ૠ".."ૡ" | "૱" | "ଅ".."ଌ" | "ଏ".."ଐ" | "ଓ".."ନ" |
	//	"ପ".."ର" | "ଲ".."ଳ" | "ଵ".."ହ" | "ଽ" | "ଡ଼".."ଢ଼" | "ୟ".."ୡ" | "ୱ" | "ஃ" | "அ".."ஊ" | "எ".."ஐ" | "ஒ".."க" | "ங".."ச" |
	//	"ஜ" | "ஞ".."ட" | "ண".."த" | "ந".."ப" | "ம".."வ" | "ஷ".."ஹ" | "௹" | "అ".."ఌ" | "ఎ".."ఐ" | "ఒ".."న" | "ప".."ళ" |
	//	"వ".."హ" | "ౠ".."ౡ" | "ಅ".."ಌ" | "ಎ".."ಐ" | "ಒ".."ನ" | "ಪ".."ಳ" | "ವ".."ಹ" | "ಽ" | "ೞ" | "ೠ".."ೡ" | "അ".."ഌ" |
	//	"എ".."ഐ" | "ഒ".."ന" | "പ".."ഹ" | "ൠ".."ൡ" | "අ".."ඖ" | "ක".."න" | "ඳ".."ර" | "ල" | "ව".."ෆ" | "ก".."ะ" | "า".."ำ" |
	//	"฿".."ๆ" | "ກ".."ຂ" | "ຄ" | "ງ".."ຈ" | "ຊ" | "ຍ" | "ດ".."ທ" | "ນ".."ຟ" | "ມ".."ຣ" | "ລ" | "ວ" | "ສ".."ຫ" | "ອ".."ະ" |
	//	"າ".."ຳ" | "ຽ" | "ເ".."ໄ" | "ໆ" | "ໜ".."ໝ" | "ༀ" | "ཀ".."ཇ" | "ཉ".."ཪ" | "ྈ".."ྋ" | "က".."အ" | "ဣ".."ဧ" | "ဩ".."ဪ" |
	//	"ၐ".."ၕ" | "Ⴀ".."Ⴥ" | "ა".."ჸ" | "ᄀ".."ᅙ" | "ᅟ".."ᆢ" | "ᆨ".."ᇹ" | "ሀ".."ሆ" | "ለ".."ቆ" | "ቈ" | "ቊ".."ቍ" | "ቐ".."ቖ" |
	//	"ቘ" | "ቚ".."ቝ" | "በ".."ኆ" | "ኈ" | "ኊ".."ኍ" | "ነ".."ኮ" | "ኰ" | "ኲ".."ኵ" | "ኸ".."ኾ" | "ዀ" | "ዂ".."ዅ" | "ወ".."ዎ" |
	//	"ዐ".."ዖ" | "ዘ".."ዮ" | "ደ".."ጎ" | "ጐ" | "ጒ".."ጕ" | "ጘ".."ጞ" | "ጠ".."ፆ" | "ፈ".."ፚ" | "Ꭰ".."Ᏼ" | "ᐁ".."ᙬ" | "ᙯ".."ᙶ" |
	//	"ᚁ".."ᚚ" | "ᚠ".."ᛪ" | "ᛮ".."ᛰ" | "ᜀ".."ᜌ" | "ᜎ".."ᜑ" | "ᜠ".."ᜱ" | "ᝀ".."ᝑ" | "ᝠ".."ᝬ" | "ᝮ".."ᝰ" | "ក".."ឳ" | "ៗ" |
	//	"៛".."ៜ" | "ᠠ".."ᡷ" | "ᢀ".."ᢨ" | "ᤀ".."ᤜ" | "ᥐ".."ᥭ" | "ᥰ".."ᥴ" | "ᴀ".."ᵫ" | "Ḁ".."ẛ" | "Ạ".."ỹ" | "ἀ".."ἕ" | "Ἐ".."Ἕ"
	//	| "ἠ".."ὅ" | "Ὀ".."Ὅ" | "ὐ".."ὗ" | "Ὑ" | "Ὓ" | "Ὕ" | "Ὗ".."ώ" | "ᾀ".."ᾴ" | "ᾶ".."ᾼ" | "ι" | "ῂ".."ῄ" | "ῆ".."ῌ" |
	//	"ῐ".."ΐ" | "ῖ".."Ί" | "ῠ".."Ῥ" | "ῲ".."ῴ" | "ῶ".."ῼ" | "‿".."⁀" | "⁔" | "ⁱ" | "ⁿ" | "₠".."₱" | "ℂ" | "ℇ" | "ℊ".."ℓ" |
	//	"ℕ" | "ℙ".."ℝ" | "ℤ" | "Ω" | "ℨ" | "K".."ℭ" | "ℯ".."ℱ" | "ℳ".."ℹ" | "ℽ".."ℿ" | "ⅅ".."ⅉ" | "Ⅰ".."Ↄ" | "々".."〇" |
	//	"〡".."〩" | "〱".."〵" | "〸".."〼" | "ぁ".."ゖ" | "ゝ".."ゟ" | "ァ".."ヿ" | "ㄅ".."ㄬ" | "ㄱ".."ㆎ" | "ㆠ".."ㆷ" | "ㇰ".."ㇿ" | "㐀".."䶵"
	//	| "一".."龥" | "ꀀ".."ꒌ" | "가".."힣" | "豈".."鶴" | "侮".."頻" | "ﬀ".."ﬆ" | "ﬓ".."ﬗ" | "יִ" | "ײַ".."ﬨ" | "שׁ".."זּ" | "טּ".."לּ" |
	//	"מּ" | "נּ".."סּ" | "ףּ".."פּ" | "צּ".."ﮱ" | "ﯓ".."ﴽ" | "ﵐ".."ﶏ" | "ﶒ".."ﷇ" | "ﷰ".."﷼" | "︳".."︴" | "﹍".."﹏" | "﹩" |
	//	"ﹰ".."ﹴ" | "ﹶ".."ﻼ" | "＄" | "Ａ".."Ｚ" | "＿" | "ａ".."ｚ" | "･".."ﾾ" | "ￂ".."ￇ" | "ￊ".."ￏ" | "ￒ".."ￗ" | "ￚ".."ￜ" |
	//	"￠".."￡" | "￥".."￦";
	public TerminalRule getIDENTIFIER_STARTRule() {
		return gaXtend.getIDENTIFIER_STARTRule();
	} 

	//terminal fragment IDENTIFIER_PART:
	//	IDENTIFIER_START | IDENTIFIER_PART_IMPL;
	public TerminalRule getIDENTIFIER_PARTRule() {
		return gaXtend.getIDENTIFIER_PARTRule();
	} 

	//terminal fragment IDENTIFIER_PART_IMPL:
	//	" ".."\b" | "".."" | "0".."9" | "".."" | "­" | "̀".."͗" | "͝".."ͯ" | "҃".."҆" | "֑".."֡" | "֣".."ֹ" | "ֻ".."ֽ" |
	//	"ֿ" | "ׁ".."ׂ" | "ׄ" | "؀".."؃" | "ؐ".."ؕ" | "ً".."٘" | "٠".."٩" | "ٰ" | "ۖ".."۝" | "۟".."ۤ" | "ۧ".."ۨ" | "۪".."ۭ" |
	//	"۰".."۹" | "܏" | "ܑ" | "ܰ".."݊" | "ަ".."ް" | "ँ".."ः" | "़" | "ा".."्" | "॑".."॔" | "ॢ".."ॣ" | "०".."९" | "ঁ".."ঃ" |
	//	"়" | "া".."ৄ" | "ে".."ৈ" | "ো".."্" | "ৗ" | "ৢ".."ৣ" | "০".."৯" | "ਁ".."ਃ" | "਼" | "ਾ".."ੂ" | "ੇ".."ੈ" | "ੋ".."੍" |
	//	"੦".."ੱ" | "ઁ".."ઃ" | "઼" | "ા".."ૅ" | "ે".."ૉ" | "ો".."્" | "ૢ".."ૣ" | "૦".."૯" | "ଁ".."ଃ" | "଼" | "ା".."ୃ" |
	//	"େ".."ୈ" | "ୋ".."୍" | "ୖ".."ୗ" | "୦".."୯" | "ஂ" | "ா".."ூ" | "ெ".."ை" | "ொ".."்" | "ௗ" | "௧".."௯" | "ఁ".."ః" |
	//	"ా".."ౄ" | "ె".."ై" | "ొ".."్" | "ౕ".."ౖ" | "౦".."౯" | "ಂ".."ಃ" | "಼" | "ಾ".."ೄ" | "ೆ".."ೈ" | "ೊ".."್" | "ೕ".."ೖ" |
	//	"೦".."೯" | "ം".."ഃ" | "ാ".."ൃ" | "െ".."ൈ" | "ൊ".."്" | "ൗ" | "൦".."൯" | "ං".."ඃ" | "්" | "ා".."ු" | "ූ" | "ෘ".."ෟ" |
	//	"ෲ".."ෳ" | "ั" | "ิ".."ฺ" | "็".."๎" | "๐".."๙" | "ັ" | "ິ".."ູ" | "ົ".."ຼ" | "່".."ໍ" | "໐".."໙" | "༘".."༙" |
	//	"༠".."༩" | "༵" | "༷" | "༹" | "༾".."༿" | "ཱ".."྄" | "྆".."྇" | "ྐ".."ྗ" | "ྙ".."ྼ" | "࿆" | "ာ".."ဲ" | "ံ".."္" |
	//	"၀".."၉" | "ၖ".."ၙ" | "፩".."፱" | "ᜒ".."᜔" | "ᜲ".."᜴" | "ᝒ".."ᝓ" | "ᝲ".."ᝳ" | "឴".."៓" | "៝" | "០".."៩" | "᠋".."᠍" |
	//	"᠐".."᠙" | "ᢩ" | "ᤠ".."ᤫ" | "ᤰ".."᤻" | "᥆".."᥏" | "‌".."‏" | "‪".."‮" | "⁠".."⁣" | "⁪".."⁯" | "⃐".."⃜" | "⃡" |
	//	"⃥".."⃪" | "〪".."〯" | "゙".."゚" | "ﬞ" | "︀".."️" | "︠".."︣" | "﻿" | "０".."９" | "￹".."￻";
	public TerminalRule getIDENTIFIER_PART_IMPLRule() {
		return gaXtend.getIDENTIFIER_PART_IMPLRule();
	} 

	//XAnnotation:
	//	{XAnnotation} "@" annotationType=[types::JvmAnnotationType|QualifiedName] ("("
	//	(elementValuePairs+=XAnnotationElementValuePair ("," elementValuePairs+=XAnnotationElementValuePair)* |
	//	value=XAnnotationElementValueOrCommaList)? ")")?;
	public XbaseWithAnnotationsGrammarAccess.XAnnotationElements getXAnnotationAccess() {
		return gaXtend.getXAnnotationAccess();
	}
	
	public ParserRule getXAnnotationRule() {
		return getXAnnotationAccess().getRule();
	}

	//XAnnotationElementValuePair:
	//	=> (element=[types::JvmOperation|ValidID] "=") value=XAnnotationElementValue;
	public XbaseWithAnnotationsGrammarAccess.XAnnotationElementValuePairElements getXAnnotationElementValuePairAccess() {
		return gaXtend.getXAnnotationElementValuePairAccess();
	}
	
	public ParserRule getXAnnotationElementValuePairRule() {
		return getXAnnotationElementValuePairAccess().getRule();
	}

	//XAnnotationElementValueOrCommaList returns xbase::XExpression:
	//	=> ({xbase::XListLiteral} "#" "[") (elements+=XAnnotationOrExpression ("," elements+=XAnnotationOrExpression)*)? "]" |
	//	XAnnotationOrExpression ({xbase::XListLiteral.elements+=current} ("," elements+=XAnnotationOrExpression)+)?;
	public XbaseWithAnnotationsGrammarAccess.XAnnotationElementValueOrCommaListElements getXAnnotationElementValueOrCommaListAccess() {
		return gaXtend.getXAnnotationElementValueOrCommaListAccess();
	}
	
	public ParserRule getXAnnotationElementValueOrCommaListRule() {
		return getXAnnotationElementValueOrCommaListAccess().getRule();
	}

	//XAnnotationElementValue returns xbase::XExpression:
	//	=> ({xbase::XListLiteral} "#" "[") (elements+=XAnnotationOrExpression ("," elements+=XAnnotationOrExpression)*)? "]" |
	//	XAnnotationOrExpression;
	public XbaseWithAnnotationsGrammarAccess.XAnnotationElementValueElements getXAnnotationElementValueAccess() {
		return gaXtend.getXAnnotationElementValueAccess();
	}
	
	public ParserRule getXAnnotationElementValueRule() {
		return getXAnnotationElementValueAccess().getRule();
	}

	//XAnnotationOrExpression returns xbase::XExpression:
	//	XAnnotation | XExpression;
	public XbaseWithAnnotationsGrammarAccess.XAnnotationOrExpressionElements getXAnnotationOrExpressionAccess() {
		return gaXtend.getXAnnotationOrExpressionAccess();
	}
	
	public ParserRule getXAnnotationOrExpressionRule() {
		return getXAnnotationOrExpressionAccess().getRule();
	}

	//XExpression:
	//	XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaXtend.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}

	//XAssignment returns XExpression:
	//	{XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment | XOrExpression
	//	(=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign])
	//	rightOperand=XAssignment)?;
	public XbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaXtend.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}

	//OpSingleAssign:
	//	"=";
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaXtend.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}

	//OpMultiAssign:
	//	"+=" | "-=" | "*=" | "/=" | "%=" | "<" "<" "=" | ">" ">"? ">=";
	public XbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaXtend.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}

	//XOrExpression returns XExpression:
	//	XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
	//	rightOperand=XAndExpression)*;
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaXtend.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}

	//OpOr:
	//	"||";
	public XbaseGrammarAccess.OpOrElements getOpOrAccess() {
		return gaXtend.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}

	//XAndExpression returns XExpression:
	//	XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
	//	rightOperand=XEqualityExpression)*;
	public XbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaXtend.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}

	//OpAnd:
	//	"&&";
	public XbaseGrammarAccess.OpAndElements getOpAndAccess() {
		return gaXtend.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}

	//XEqualityExpression returns XExpression:
	//	XRelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//	rightOperand=XRelationalExpression)*;
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaXtend.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}

	//OpEquality:
	//	"==" | "!=" | "===" | "!==";
	public XbaseGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaXtend.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}

	//XRelationalExpression returns XExpression:
	//	XOtherOperatorExpression (=> ({XInstanceOfExpression.expression=current} "instanceof") type=JvmTypeReference | =>
	//	({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
	//	rightOperand=XOtherOperatorExpression)*;
	public XbaseGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaXtend.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}

	//OpCompare:
	//	">=" | "<" "=" | ">" | "<";
	public XbaseGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaXtend.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}

	//XOtherOperatorExpression returns XExpression:
	//	XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//	rightOperand=XAdditiveExpression)*;
	public XbaseGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaXtend.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}

	//OpOther:
	//	"->" | "..<" | ">" ".." | ".." | "=>" | ">" (=> (">" ">") | ">") | "<" (=> ("<" "<") | "<" | "=>") | "<>" | "?:";
	public XbaseGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaXtend.getOpOtherAccess();
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}

	//XAdditiveExpression returns XExpression:
	//	XMultiplicativeExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//	rightOperand=XMultiplicativeExpression)*;
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaXtend.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}

	//OpAdd:
	//	"+" | "-";
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaXtend.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}

	//XMultiplicativeExpression returns XExpression:
	//	XUnaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti])
	//	rightOperand=XUnaryOperation)*;
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaXtend.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}

	//OpMulti:
	//	"*" | "**" | "/" | "%";
	public XbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaXtend.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}

	//XUnaryOperation returns XExpression:
	//	{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XUnaryOperation | XCastedExpression;
	public XbaseGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaXtend.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}

	//OpUnary:
	//	"!" | "-" | "+";
	public XbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaXtend.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}

	//XCastedExpression returns XExpression:
	//	XPostfixOperation (=> ({XCastedExpression.target=current} "as") type=JvmTypeReference)*;
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaXtend.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}

	//XPostfixOperation returns XExpression:
	//	XMemberFeatureCall => ({XPostfixOperation.operand=current} feature=[types::JvmIdentifiableElement|OpPostfix])?;
	public XbaseGrammarAccess.XPostfixOperationElements getXPostfixOperationAccess() {
		return gaXtend.getXPostfixOperationAccess();
	}
	
	public ParserRule getXPostfixOperationRule() {
		return getXPostfixOperationAccess().getRule();
	}

	//OpPostfix:
	//	"++" | "--";
	public XbaseGrammarAccess.OpPostfixElements getOpPostfixAccess() {
		return gaXtend.getOpPostfixAccess();
	}
	
	public ParserRule getOpPostfixRule() {
		return getOpPostfixAccess().getRule();
	}

	//XMemberFeatureCall returns XExpression:
	//	XPrimaryExpression (=> ({XAssignment.assignable=current} ("." | explicitStatic?="::")
	//	feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment | =>
	//	({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." | explicitStatic?="::")) ("<"
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?="(" (memberCallArguments+=XShortClosure |
	//	memberCallArguments+=XExpression ("," memberCallArguments+=XExpression)*)? ")")? memberCallArguments+=XClosure?)*;
	public XbaseGrammarAccess.XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return gaXtend.getXMemberFeatureCallAccess();
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}

	//XPrimaryExpression returns XExpression:
	//	XConstructorCall | XBlockExpression | XSwitchExpression | XSynchronizedExpression | XFeatureCall | XLiteral |
	//	XIfExpression | XForLoopExpression | XBasicForLoopExpression | XWhileExpression | XDoWhileExpression |
	//	XThrowExpression | XReturnExpression | XTryCatchFinallyExpression | XParenthesizedExpression;
	public XbaseGrammarAccess.XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return gaXtend.getXPrimaryExpressionAccess();
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}

	//XLiteral returns XExpression:
	//	XCollectionLiteral | XClosure | XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral | XTypeLiteral;
	public XbaseGrammarAccess.XLiteralElements getXLiteralAccess() {
		return gaXtend.getXLiteralAccess();
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}

	//XCollectionLiteral:
	//	XSetLiteral | XListLiteral;
	public XbaseGrammarAccess.XCollectionLiteralElements getXCollectionLiteralAccess() {
		return gaXtend.getXCollectionLiteralAccess();
	}
	
	public ParserRule getXCollectionLiteralRule() {
		return getXCollectionLiteralAccess().getRule();
	}

	//XSetLiteral:
	//	{XSetLiteral} "#" "{" (elements+=XExpression ("," elements+=XExpression)*)? "}";
	public XbaseGrammarAccess.XSetLiteralElements getXSetLiteralAccess() {
		return gaXtend.getXSetLiteralAccess();
	}
	
	public ParserRule getXSetLiteralRule() {
		return getXSetLiteralAccess().getRule();
	}

	//XListLiteral:
	//	{XListLiteral} "#" "[" (elements+=XExpression ("," elements+=XExpression)*)? "]";
	public XbaseGrammarAccess.XListLiteralElements getXListLiteralAccess() {
		return gaXtend.getXListLiteralAccess();
	}
	
	public ParserRule getXListLiteralRule() {
		return getXListLiteralAccess().getRule();
	}

	//XClosure returns XExpression:
	//	=> ({XClosure} "[") => ((declaredFormalParameters+=JvmFormalParameter (","
	//	declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?="|")? expression=XExpressionInClosure "]";
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaXtend.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}

	//XExpressionInClosure returns XExpression:
	//	{XBlockExpression} (expressions+=XExpressionOrVarDeclaration ";"?)*;
	public XbaseGrammarAccess.XExpressionInClosureElements getXExpressionInClosureAccess() {
		return gaXtend.getXExpressionInClosureAccess();
	}
	
	public ParserRule getXExpressionInClosureRule() {
		return getXExpressionInClosureAccess().getRule();
	}

	//XShortClosure returns XExpression:
	//	=> ({XClosure} (declaredFormalParameters+=JvmFormalParameter ("," declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?="|") expression=XExpression;
	public XbaseGrammarAccess.XShortClosureElements getXShortClosureAccess() {
		return gaXtend.getXShortClosureAccess();
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}

	//XParenthesizedExpression returns XExpression:
	//	"(" XExpression ")";
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaXtend.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}

	//XIfExpression returns XExpression:
	//	{XIfExpression} "if" "(" if=XExpression ")" then=XExpression ("else" else=XExpression)?;
	public XbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaXtend.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}

	//XCasePart:
	//	{XCasePart} typeGuard=JvmTypeReference? ("case" case=XExpression)? (":" then=XExpression | fallThrough?=",");
	public XbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaXtend.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}

	//XBasicForLoopExpression returns XExpression:
	//	{XBasicForLoopExpression} "for" "(" (initExpressions+=XExpressionOrVarDeclaration (","
	//	initExpressions+=XExpressionOrVarDeclaration)*)? ";" expression=XExpression? ";" (updateExpressions+=XExpression (","
	//	updateExpressions+=XExpression)*)? ")" eachExpression=XExpression;
	public XbaseGrammarAccess.XBasicForLoopExpressionElements getXBasicForLoopExpressionAccess() {
		return gaXtend.getXBasicForLoopExpressionAccess();
	}
	
	public ParserRule getXBasicForLoopExpressionRule() {
		return getXBasicForLoopExpressionAccess().getRule();
	}

	//XWhileExpression returns XExpression:
	//	{XWhileExpression} "while" "(" predicate=XExpression ")" body=XExpression;
	public XbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaXtend.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}

	//XDoWhileExpression returns XExpression:
	//	{XDoWhileExpression} "do" body=XExpression "while" "(" predicate=XExpression ")";
	public XbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaXtend.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}

	//XBlockExpression returns XExpression:
	//	{XBlockExpression} "{" (expressions+=XExpressionOrVarDeclaration ";"?)* "}";
	public XbaseGrammarAccess.XBlockExpressionElements getXBlockExpressionAccess() {
		return gaXtend.getXBlockExpressionAccess();
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}

	//XExpressionOrVarDeclaration returns XExpression:
	//	XVariableDeclaration | XExpression;
	public XbaseGrammarAccess.XExpressionOrVarDeclarationElements getXExpressionOrVarDeclarationAccess() {
		return gaXtend.getXExpressionOrVarDeclarationAccess();
	}
	
	public ParserRule getXExpressionOrVarDeclarationRule() {
		return getXExpressionOrVarDeclarationAccess().getRule();
	}

	//XFeatureCall returns XExpression:
	//	{XFeatureCall} ("<" typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?="(" (featureCallArguments+=XShortClosure
	//	| featureCallArguments+=XExpression ("," featureCallArguments+=XExpression)*)? ")")? featureCallArguments+=XClosure?;
	public XbaseGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaXtend.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}

	//IdOrSuper:
	//	FeatureCallID | "super";
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaXtend.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}

	//XBooleanLiteral returns XExpression:
	//	{XBooleanLiteral} ("false" | isTrue?="true");
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaXtend.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}

	//XNullLiteral returns XExpression:
	//	{XNullLiteral} "null";
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaXtend.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}

	//XNumberLiteral returns XExpression:
	//	{XNumberLiteral} value=Number;
	public XbaseGrammarAccess.XNumberLiteralElements getXNumberLiteralAccess() {
		return gaXtend.getXNumberLiteralAccess();
	}
	
	public ParserRule getXNumberLiteralRule() {
		return getXNumberLiteralAccess().getRule();
	}

	//XTypeLiteral returns XExpression:
	//	{XTypeLiteral} "typeof" "(" type=[types::JvmType|QualifiedName] arrayDimensions+=ArrayBrackets* ")";
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaXtend.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}

	//XThrowExpression returns XExpression:
	//	{XThrowExpression} "throw" expression=XExpression;
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaXtend.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}

	//XReturnExpression returns XExpression:
	//	{XReturnExpression} "return" -> expression=XExpression?;
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaXtend.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}

	//XTryCatchFinallyExpression returns XExpression:
	//	{XTryCatchFinallyExpression} "try" expression=XExpression (catchClauses+=XCatchClause+ ("finally"
	//	finallyExpression=XExpression)? | "finally" finallyExpression=XExpression);
	public XbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaXtend.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}

	//XSynchronizedExpression returns XExpression:
	//	=> ({XSynchronizedExpression} "synchronized" "(") param=XExpression ")" expression=XExpression;
	public XbaseGrammarAccess.XSynchronizedExpressionElements getXSynchronizedExpressionAccess() {
		return gaXtend.getXSynchronizedExpressionAccess();
	}
	
	public ParserRule getXSynchronizedExpressionRule() {
		return getXSynchronizedExpressionAccess().getRule();
	}

	//XCatchClause:
	//	"catch" "(" declaredParam=FullJvmFormalParameter ")" expression=XExpression;
	public XbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaXtend.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}

	//QualifiedName:
	//	ValidID ("." ValidID)*;
	public XbaseGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaXtend.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//Number hidden():
	//	HEX | (INT | DECIMAL) ("." (INT | DECIMAL))?;
	public XbaseGrammarAccess.NumberElements getNumberAccess() {
		return gaXtend.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}

	/// **
	// * Dummy rule, for "better" downwards compatibility, since GrammarAccess generates non-static inner classes, 
	// * which makes downstream grammars break on classloading, when a rule is removed.
	// * / StaticQualifier:
	//	(ValidID "::")+;
	public XbaseGrammarAccess.StaticQualifierElements getStaticQualifierAccess() {
		return gaXtend.getStaticQualifierAccess();
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}

	//terminal HEX:
	//	("0x" | "0X") ("0".."9" | "a".."f" | "A".."F" | "_")+ ("#" (("b" | "B") ("i" | "I") | ("l" | "L")))?;
	public TerminalRule getHEXRule() {
		return gaXtend.getHEXRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9" ("0".."9" | "_")*;
	public TerminalRule getINTRule() {
		return gaXtend.getINTRule();
	} 

	//terminal DECIMAL:
	//	INT (("e" | "E") ("+" | "-")? INT)? (("b" | "B") ("i" | "I" | "d" | "D") | ("l" | "L" | "d" | "D" | "f" | "F"))?;
	public TerminalRule getDECIMALRule() {
		return gaXtend.getDECIMALRule();
	} 

	//JvmTypeReference:
	//	JvmParameterizedTypeReference => ({JvmGenericArrayTypeReference.componentType=current} ArrayBrackets)* |
	//	XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaXtend.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}

	//ArrayBrackets:
	//	"[" "]";
	public XtypeGrammarAccess.ArrayBracketsElements getArrayBracketsAccess() {
		return gaXtend.getArrayBracketsAccess();
	}
	
	public ParserRule getArrayBracketsRule() {
		return getArrayBracketsAccess().getRule();
	}

	//XFunctionTypeRef:
	//	("(" (paramTypes+=JvmTypeReference ("," paramTypes+=JvmTypeReference)*)? ")")? "=>" returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaXtend.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}

	//JvmParameterizedTypeReference:
	//	type=[JvmType|QualifiedName] ("<" arguments+=JvmArgumentTypeReference ("," arguments+=JvmArgumentTypeReference)* ">"
	//	(=> ({JvmInnerTypeReference.outer=current} ".") type=[JvmType|ValidID] ("<" arguments+=JvmArgumentTypeReference (","
	//	arguments+=JvmArgumentTypeReference)* ">")?)*)?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaXtend.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}

	//JvmArgumentTypeReference returns JvmTypeReference:
	//	JvmTypeReference | JvmWildcardTypeReference;
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaXtend.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}

	//JvmWildcardTypeReference:
	//	{JvmWildcardTypeReference} "?" (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded* |
	//	constraints+=JvmLowerBound constraints+=JvmLowerBoundAnded*)?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaXtend.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}

	//JvmUpperBound:
	//	"extends" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaXtend.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}

	//JvmUpperBoundAnded returns JvmUpperBound:
	//	"&" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaXtend.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}

	//JvmLowerBound:
	//	"super" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaXtend.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}

	//JvmLowerBoundAnded returns JvmLowerBound:
	//	"&" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundAndedElements getJvmLowerBoundAndedAccess() {
		return gaXtend.getJvmLowerBoundAndedAccess();
	}
	
	public ParserRule getJvmLowerBoundAndedRule() {
		return getJvmLowerBoundAndedAccess().getRule();
	}

	//JvmTypeParameter:
	//	name=ValidID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded*)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaXtend.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}

	//QualifiedNameWithWildcard:
	//	QualifiedName "." "*";
	public XtypeGrammarAccess.QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return gaXtend.getQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}

	//XImportSection:
	//	importDeclarations+=XImportDeclaration+;
	public XtypeGrammarAccess.XImportSectionElements getXImportSectionAccess() {
		return gaXtend.getXImportSectionAccess();
	}
	
	public ParserRule getXImportSectionRule() {
		return getXImportSectionAccess().getRule();
	}

	//XImportDeclaration:
	//	"import" (static?="static" extension?="extension"? importedType=[JvmDeclaredType|QualifiedNameInStaticImport]
	//	(wildcard?="*" | memberName=ValidID) | importedType=[JvmDeclaredType|QualifiedName] |
	//	importedNamespace=QualifiedNameWithWildcard) ";"?;
	public XtypeGrammarAccess.XImportDeclarationElements getXImportDeclarationAccess() {
		return gaXtend.getXImportDeclarationAccess();
	}
	
	public ParserRule getXImportDeclarationRule() {
		return getXImportDeclarationAccess().getRule();
	}

	//QualifiedNameInStaticImport:
	//	(ValidID ".")+;
	public XtypeGrammarAccess.QualifiedNameInStaticImportElements getQualifiedNameInStaticImportAccess() {
		return gaXtend.getQualifiedNameInStaticImportAccess();
	}
	
	public ParserRule getQualifiedNameInStaticImportRule() {
		return getQualifiedNameInStaticImportAccess().getRule();
	}

	//terminal STRING:
	//	"\"" ("\\" . / * ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') * / | !("\\" | "\""))* "\""? | "\'" ("\\" .
	//	/ * ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') * / | !("\\" | "\'"))* "\'"?;
	public TerminalRule getSTRINGRule() {
		return gaXtend.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaXtend.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXtend.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaXtend.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaXtend.getANY_OTHERRule();
	} 
}
