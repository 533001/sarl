/*
* generated by Xtext
*/
package io.sarl.lang.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class SARLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class SarlScriptElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SarlScript");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cPackageKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cImportSectionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportSectionXImportSectionParserRuleCall_1_0 = (RuleCall)cImportSectionAssignment_1.eContents().get(0);
		private final Assignment cElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementsTopElementParserRuleCall_2_0 = (RuleCall)cElementsAssignment_2.eContents().get(0);
		
		//SarlScript:
		//	("package" name=QualifiedName ";"?)? importSection=XImportSection? elements+=TopElement*;
		public ParserRule getRule() { return rule; }

		//("package" name=QualifiedName ";"?)? importSection=XImportSection? elements+=TopElement*
		public Group getGroup() { return cGroup; }

		//("package" name=QualifiedName ";"?)?
		public Group getGroup_0() { return cGroup_0; }

		//"package"
		public Keyword getPackageKeyword_0_0() { return cPackageKeyword_0_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_0_1_0() { return cNameQualifiedNameParserRuleCall_0_1_0; }

		//";"?
		public Keyword getSemicolonKeyword_0_2() { return cSemicolonKeyword_0_2; }

		//importSection=XImportSection?
		public Assignment getImportSectionAssignment_1() { return cImportSectionAssignment_1; }

		//XImportSection
		public RuleCall getImportSectionXImportSectionParserRuleCall_1_0() { return cImportSectionXImportSectionParserRuleCall_1_0; }

		//elements+=TopElement*
		public Assignment getElementsAssignment_2() { return cElementsAssignment_2; }

		//TopElement
		public RuleCall getElementsTopElementParserRuleCall_2_0() { return cElementsTopElementParserRuleCall_2_0; }
	}

	public class TopElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TopElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEventParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCapacityParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAgentParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cBehaviorParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cSkillParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//TopElement:
		//	Event | Capacity | Agent | Behavior | Skill;
		public ParserRule getRule() { return rule; }

		//Event | Capacity | Agent | Behavior | Skill
		public Alternatives getAlternatives() { return cAlternatives; }

		//Event
		public RuleCall getEventParserRuleCall_0() { return cEventParserRuleCall_0; }

		//Capacity
		public RuleCall getCapacityParserRuleCall_1() { return cCapacityParserRuleCall_1; }

		//Agent
		public RuleCall getAgentParserRuleCall_2() { return cAgentParserRuleCall_2; }

		//Behavior
		public RuleCall getBehaviorParserRuleCall_3() { return cBehaviorParserRuleCall_3; }

		//Skill
		public RuleCall getSkillParserRuleCall_4() { return cSkillParserRuleCall_4; }
	}

	public class NamedElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NamedElement");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//// Define an interface that is providing the 'name' feature.
		//// This rule is declared only for generated the Java interface
		//// with the expected features.
		//// YOU SHOULD NEVER USE THIS RULE IN THE BODY OF ANOTHER RULE.
		//NamedElement:
		//	name=ValidID;
		public ParserRule getRule() { return rule; }

		//name=ValidID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_0() { return cNameValidIDParserRuleCall_0; }
	}

	public class FeatureContainerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FeatureContainer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFeatureContainerAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cFeaturesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFeaturesFeatureParserRuleCall_1_0 = (RuleCall)cFeaturesAssignment_1.eContents().get(0);
		
		//// Define an interface that is providing the 'features' feature.
		//// This rule is declared only for generated the Java interface
		//// with the expected features.
		//// YOU SHOULD NEVER USE THIS RULE IN THE BODY OF ANOTHER RULE.
		//FeatureContainer returns NamedElement:
		//	{FeatureContainer} features+=Feature;
		public ParserRule getRule() { return rule; }

		//{FeatureContainer} features+=Feature
		public Group getGroup() { return cGroup; }

		//{FeatureContainer}
		public Action getFeatureContainerAction_0() { return cFeatureContainerAction_0; }

		//features+=Feature
		public Assignment getFeaturesAssignment_1() { return cFeaturesAssignment_1; }

		//Feature
		public RuleCall getFeaturesFeatureParserRuleCall_1_0() { return cFeaturesFeatureParserRuleCall_1_0; }
	}

	public class FeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Feature");
		private final Action cFeatureAction = (Action)rule.eContents().get(1);
		
		//// Define an interface that is a feature.
		//// This rule is declared only for generated the Java interface
		//// with the expected features.
		//// YOU SHOULD NEVER USE THIS RULE IN THE BODY OF ANOTHER RULE.
		//Feature:
		//	{Feature};
		public ParserRule getRule() { return rule; }

		//{Feature}
		public Action getFeatureAction() { return cFeatureAction; }
	}

	public class ParameterizedFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterizedFeature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParameterizedFeatureAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cParamsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cParamsFormalParameterParserRuleCall_1_0 = (RuleCall)cParamsAssignment_1.eContents().get(0);
		private final Assignment cVarargsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVarargsIDTerminalRuleCall_2_0 = (RuleCall)cVarargsAssignment_2.eContents().get(0);
		
		//// Define an interface that is a feature with parameters.
		//// This rule is declared only for generated the Java interface
		//// with the expected features.
		//// YOU SHOULD NEVER USE THIS RULE IN THE BODY OF ANOTHER RULE.
		//ParameterizedFeature returns Feature:
		//	{ParameterizedFeature} params+=FormalParameter varargs?=ID;
		public ParserRule getRule() { return rule; }

		//{ParameterizedFeature} params+=FormalParameter varargs?=ID
		public Group getGroup() { return cGroup; }

		//{ParameterizedFeature}
		public Action getParameterizedFeatureAction_0() { return cParameterizedFeatureAction_0; }

		//params+=FormalParameter
		public Assignment getParamsAssignment_1() { return cParamsAssignment_1; }

		//FormalParameter
		public RuleCall getParamsFormalParameterParserRuleCall_1_0() { return cParamsFormalParameterParserRuleCall_1_0; }

		//varargs?=ID
		public Assignment getVarargsAssignment_2() { return cVarargsAssignment_2; }

		//ID
		public RuleCall getVarargsIDTerminalRuleCall_2_0() { return cVarargsIDTerminalRuleCall_2_0; }
	}

	public class InheritingElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InheritingElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInheritingElementAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cSuperTypesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSuperTypesJvmParameterizedTypeReferenceParserRuleCall_1_0 = (RuleCall)cSuperTypesAssignment_1.eContents().get(0);
		
		//// Define an interface that is providing the 'superTypes' feature.
		//// This rule is declared only for generated the Java interface
		//// with the expected features.
		//// YOU SHOULD NEVER USE THIS RULE IN THE BODY OF ANTHOER RULE.
		//InheritingElement returns FeatureContainer:
		//	{InheritingElement} superTypes+=JvmParameterizedTypeReference;
		public ParserRule getRule() { return rule; }

		//{InheritingElement} superTypes+=JvmParameterizedTypeReference
		public Group getGroup() { return cGroup; }

		//{InheritingElement}
		public Action getInheritingElementAction_0() { return cInheritingElementAction_0; }

		//superTypes+=JvmParameterizedTypeReference
		public Assignment getSuperTypesAssignment_1() { return cSuperTypesAssignment_1; }

		//JvmParameterizedTypeReference
		public RuleCall getSuperTypesJvmParameterizedTypeReferenceParserRuleCall_1_0() { return cSuperTypesJvmParameterizedTypeReferenceParserRuleCall_1_0; }
	}

	public class ImplementingElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ImplementingElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cImplementingElementAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cImplementedTypesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImplementedTypesJvmParameterizedTypeReferenceParserRuleCall_1_0 = (RuleCall)cImplementedTypesAssignment_1.eContents().get(0);
		
		//// Define an interface that is providing the 'implementedTypes' feature.
		//// This rule is declared only for generated the Java interface
		//// with the expected features.
		//// YOU SHOULD NEVER USE THIS RULE IN THE BODY OF ANTHOER RULE.
		//ImplementingElement returns InheritingElement:
		//	{ImplementingElement} implementedTypes+=JvmParameterizedTypeReference;
		public ParserRule getRule() { return rule; }

		//{ImplementingElement} implementedTypes+=JvmParameterizedTypeReference
		public Group getGroup() { return cGroup; }

		//{ImplementingElement}
		public Action getImplementingElementAction_0() { return cImplementingElementAction_0; }

		//implementedTypes+=JvmParameterizedTypeReference
		public Assignment getImplementedTypesAssignment_1() { return cImplementedTypesAssignment_1; }

		//JvmParameterizedTypeReference
		public RuleCall getImplementedTypesJvmParameterizedTypeReferenceParserRuleCall_1_0() { return cImplementedTypesJvmParameterizedTypeReferenceParserRuleCall_1_0; }
	}

	public class EventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Event");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEventAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cEventKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameValidIDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cExtendsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSuperTypesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cSuperTypesJvmParameterizedTypeReferenceParserRuleCall_3_1_0 = (RuleCall)cSuperTypesAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cFeaturesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cFeaturesEventFeatureParserRuleCall_4_1_0 = (RuleCall)cFeaturesAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		
		//Event returns InheritingElement:
		//	{Event} "event" name=ValidID ("extends" superTypes+=JvmParameterizedTypeReference)? ("{" features+=EventFeature*
		//	"}")?;
		public ParserRule getRule() { return rule; }

		//{Event} "event" name=ValidID ("extends" superTypes+=JvmParameterizedTypeReference)? ("{" features+=EventFeature* "}")?
		public Group getGroup() { return cGroup; }

		//{Event}
		public Action getEventAction_0() { return cEventAction_0; }

		//"event"
		public Keyword getEventKeyword_1() { return cEventKeyword_1; }

		//name=ValidID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_0() { return cNameValidIDParserRuleCall_2_0; }

		//("extends" superTypes+=JvmParameterizedTypeReference)?
		public Group getGroup_3() { return cGroup_3; }

		//"extends"
		public Keyword getExtendsKeyword_3_0() { return cExtendsKeyword_3_0; }

		//superTypes+=JvmParameterizedTypeReference
		public Assignment getSuperTypesAssignment_3_1() { return cSuperTypesAssignment_3_1; }

		//JvmParameterizedTypeReference
		public RuleCall getSuperTypesJvmParameterizedTypeReferenceParserRuleCall_3_1_0() { return cSuperTypesJvmParameterizedTypeReferenceParserRuleCall_3_1_0; }

		//("{" features+=EventFeature* "}")?
		public Group getGroup_4() { return cGroup_4; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4_0() { return cLeftCurlyBracketKeyword_4_0; }

		//features+=EventFeature*
		public Assignment getFeaturesAssignment_4_1() { return cFeaturesAssignment_4_1; }

		//EventFeature
		public RuleCall getFeaturesEventFeatureParserRuleCall_4_1_0() { return cFeaturesEventFeatureParserRuleCall_4_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4_2() { return cRightCurlyBracketKeyword_4_2; }
	}

	public class CapacityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Capacity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCapacityAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCapacityKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameValidIDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cExtendsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSuperTypesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cSuperTypesJvmParameterizedTypeReferenceParserRuleCall_3_1_0 = (RuleCall)cSuperTypesAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cSuperTypesAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cSuperTypesJvmParameterizedTypeReferenceParserRuleCall_3_2_1_0 = (RuleCall)cSuperTypesAssignment_3_2_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cFeaturesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cFeaturesActionSignatureParserRuleCall_5_0 = (RuleCall)cFeaturesAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Capacity returns InheritingElement:
		//	{Capacity} "capacity" name=ValidID ("extends" superTypes+=JvmParameterizedTypeReference (","
		//	superTypes+=JvmParameterizedTypeReference)*)? "{" features+=ActionSignature* "}";
		public ParserRule getRule() { return rule; }

		//{Capacity} "capacity" name=ValidID ("extends" superTypes+=JvmParameterizedTypeReference (","
		//superTypes+=JvmParameterizedTypeReference)*)? "{" features+=ActionSignature* "}"
		public Group getGroup() { return cGroup; }

		//{Capacity}
		public Action getCapacityAction_0() { return cCapacityAction_0; }

		//"capacity"
		public Keyword getCapacityKeyword_1() { return cCapacityKeyword_1; }

		//name=ValidID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_0() { return cNameValidIDParserRuleCall_2_0; }

		//("extends" superTypes+=JvmParameterizedTypeReference ("," superTypes+=JvmParameterizedTypeReference)*)?
		public Group getGroup_3() { return cGroup_3; }

		//"extends"
		public Keyword getExtendsKeyword_3_0() { return cExtendsKeyword_3_0; }

		//superTypes+=JvmParameterizedTypeReference
		public Assignment getSuperTypesAssignment_3_1() { return cSuperTypesAssignment_3_1; }

		//JvmParameterizedTypeReference
		public RuleCall getSuperTypesJvmParameterizedTypeReferenceParserRuleCall_3_1_0() { return cSuperTypesJvmParameterizedTypeReferenceParserRuleCall_3_1_0; }

		//("," superTypes+=JvmParameterizedTypeReference)*
		public Group getGroup_3_2() { return cGroup_3_2; }

		//","
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }

		//superTypes+=JvmParameterizedTypeReference
		public Assignment getSuperTypesAssignment_3_2_1() { return cSuperTypesAssignment_3_2_1; }

		//JvmParameterizedTypeReference
		public RuleCall getSuperTypesJvmParameterizedTypeReferenceParserRuleCall_3_2_1_0() { return cSuperTypesJvmParameterizedTypeReferenceParserRuleCall_3_2_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//features+=ActionSignature*
		public Assignment getFeaturesAssignment_5() { return cFeaturesAssignment_5; }

		//ActionSignature
		public RuleCall getFeaturesActionSignatureParserRuleCall_5_0() { return cFeaturesActionSignatureParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class AgentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Agent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAgentAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAgentKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameValidIDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cExtendsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSuperTypesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cSuperTypesJvmParameterizedTypeReferenceParserRuleCall_3_1_0 = (RuleCall)cSuperTypesAssignment_3_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cFeaturesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cFeaturesAgentFeatureParserRuleCall_5_0 = (RuleCall)cFeaturesAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Agent returns InheritingElement:
		//	{Agent} "agent" name=ValidID ("extends" superTypes+=JvmParameterizedTypeReference)? "{" features+=AgentFeature* "}";
		public ParserRule getRule() { return rule; }

		//{Agent} "agent" name=ValidID ("extends" superTypes+=JvmParameterizedTypeReference)? "{" features+=AgentFeature* "}"
		public Group getGroup() { return cGroup; }

		//{Agent}
		public Action getAgentAction_0() { return cAgentAction_0; }

		//"agent"
		public Keyword getAgentKeyword_1() { return cAgentKeyword_1; }

		//name=ValidID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_0() { return cNameValidIDParserRuleCall_2_0; }

		//("extends" superTypes+=JvmParameterizedTypeReference)?
		public Group getGroup_3() { return cGroup_3; }

		//"extends"
		public Keyword getExtendsKeyword_3_0() { return cExtendsKeyword_3_0; }

		//superTypes+=JvmParameterizedTypeReference
		public Assignment getSuperTypesAssignment_3_1() { return cSuperTypesAssignment_3_1; }

		//JvmParameterizedTypeReference
		public RuleCall getSuperTypesJvmParameterizedTypeReferenceParserRuleCall_3_1_0() { return cSuperTypesJvmParameterizedTypeReferenceParserRuleCall_3_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//features+=AgentFeature*
		public Assignment getFeaturesAssignment_5() { return cFeaturesAssignment_5; }

		//AgentFeature
		public RuleCall getFeaturesAgentFeatureParserRuleCall_5_0() { return cFeaturesAgentFeatureParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class BehaviorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Behavior");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBehaviorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBehaviorKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameValidIDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cExtendsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSuperTypesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cSuperTypesJvmParameterizedTypeReferenceParserRuleCall_3_1_0 = (RuleCall)cSuperTypesAssignment_3_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cFeaturesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cFeaturesBehaviorFeatureParserRuleCall_5_0 = (RuleCall)cFeaturesAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Behavior returns InheritingElement:
		//	{Behavior} "behavior" name=ValidID ("extends" superTypes+=JvmParameterizedTypeReference)? "{"
		//	features+=BehaviorFeature* "}";
		public ParserRule getRule() { return rule; }

		//{Behavior} "behavior" name=ValidID ("extends" superTypes+=JvmParameterizedTypeReference)? "{" features+=BehaviorFeature*
		//"}"
		public Group getGroup() { return cGroup; }

		//{Behavior}
		public Action getBehaviorAction_0() { return cBehaviorAction_0; }

		//"behavior"
		public Keyword getBehaviorKeyword_1() { return cBehaviorKeyword_1; }

		//name=ValidID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_0() { return cNameValidIDParserRuleCall_2_0; }

		//("extends" superTypes+=JvmParameterizedTypeReference)?
		public Group getGroup_3() { return cGroup_3; }

		//"extends"
		public Keyword getExtendsKeyword_3_0() { return cExtendsKeyword_3_0; }

		//superTypes+=JvmParameterizedTypeReference
		public Assignment getSuperTypesAssignment_3_1() { return cSuperTypesAssignment_3_1; }

		//JvmParameterizedTypeReference
		public RuleCall getSuperTypesJvmParameterizedTypeReferenceParserRuleCall_3_1_0() { return cSuperTypesJvmParameterizedTypeReferenceParserRuleCall_3_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//features+=BehaviorFeature*
		public Assignment getFeaturesAssignment_5() { return cFeaturesAssignment_5; }

		//BehaviorFeature
		public RuleCall getFeaturesBehaviorFeatureParserRuleCall_5_0() { return cFeaturesBehaviorFeatureParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class SkillElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Skill");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSkillAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSkillKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameValidIDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_3 = (UnorderedGroup)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cUnorderedGroup_3.eContents().get(0);
		private final Keyword cExtendsKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cSuperTypesAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cSuperTypesJvmParameterizedTypeReferenceParserRuleCall_3_0_1_0 = (RuleCall)cSuperTypesAssignment_3_0_1.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cUnorderedGroup_3.eContents().get(1);
		private final Keyword cImplementsKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cImplementedTypesAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cImplementedTypesJvmParameterizedTypeReferenceParserRuleCall_3_1_1_0 = (RuleCall)cImplementedTypesAssignment_3_1_1.eContents().get(0);
		private final Group cGroup_3_1_2 = (Group)cGroup_3_1.eContents().get(2);
		private final Keyword cCommaKeyword_3_1_2_0 = (Keyword)cGroup_3_1_2.eContents().get(0);
		private final Assignment cImplementedTypesAssignment_3_1_2_1 = (Assignment)cGroup_3_1_2.eContents().get(1);
		private final RuleCall cImplementedTypesJvmParameterizedTypeReferenceParserRuleCall_3_1_2_1_0 = (RuleCall)cImplementedTypesAssignment_3_1_2_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cFeaturesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cFeaturesSkillFeatureParserRuleCall_5_0 = (RuleCall)cFeaturesAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Skill returns ImplementingElement:
		//	{Skill} "skill" name=ValidID (("extends" superTypes+=JvmParameterizedTypeReference)? & ("implements"
		//	implementedTypes+=JvmParameterizedTypeReference ("," implementedTypes+=JvmParameterizedTypeReference)*)?) "{"
		//	features+=SkillFeature* "}";
		public ParserRule getRule() { return rule; }

		//{Skill} "skill" name=ValidID (("extends" superTypes+=JvmParameterizedTypeReference)? & ("implements"
		//implementedTypes+=JvmParameterizedTypeReference ("," implementedTypes+=JvmParameterizedTypeReference)*)?) "{"
		//features+=SkillFeature* "}"
		public Group getGroup() { return cGroup; }

		//{Skill}
		public Action getSkillAction_0() { return cSkillAction_0; }

		//"skill"
		public Keyword getSkillKeyword_1() { return cSkillKeyword_1; }

		//name=ValidID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_0() { return cNameValidIDParserRuleCall_2_0; }

		//("extends" superTypes+=JvmParameterizedTypeReference)? & ("implements" implementedTypes+=JvmParameterizedTypeReference
		//("," implementedTypes+=JvmParameterizedTypeReference)*)?
		public UnorderedGroup getUnorderedGroup_3() { return cUnorderedGroup_3; }

		//("extends" superTypes+=JvmParameterizedTypeReference)?
		public Group getGroup_3_0() { return cGroup_3_0; }

		//"extends"
		public Keyword getExtendsKeyword_3_0_0() { return cExtendsKeyword_3_0_0; }

		//superTypes+=JvmParameterizedTypeReference
		public Assignment getSuperTypesAssignment_3_0_1() { return cSuperTypesAssignment_3_0_1; }

		//JvmParameterizedTypeReference
		public RuleCall getSuperTypesJvmParameterizedTypeReferenceParserRuleCall_3_0_1_0() { return cSuperTypesJvmParameterizedTypeReferenceParserRuleCall_3_0_1_0; }

		//("implements" implementedTypes+=JvmParameterizedTypeReference ("," implementedTypes+=JvmParameterizedTypeReference)*)?
		public Group getGroup_3_1() { return cGroup_3_1; }

		//"implements"
		public Keyword getImplementsKeyword_3_1_0() { return cImplementsKeyword_3_1_0; }

		//implementedTypes+=JvmParameterizedTypeReference
		public Assignment getImplementedTypesAssignment_3_1_1() { return cImplementedTypesAssignment_3_1_1; }

		//JvmParameterizedTypeReference
		public RuleCall getImplementedTypesJvmParameterizedTypeReferenceParserRuleCall_3_1_1_0() { return cImplementedTypesJvmParameterizedTypeReferenceParserRuleCall_3_1_1_0; }

		//("," implementedTypes+=JvmParameterizedTypeReference)*
		public Group getGroup_3_1_2() { return cGroup_3_1_2; }

		//","
		public Keyword getCommaKeyword_3_1_2_0() { return cCommaKeyword_3_1_2_0; }

		//implementedTypes+=JvmParameterizedTypeReference
		public Assignment getImplementedTypesAssignment_3_1_2_1() { return cImplementedTypesAssignment_3_1_2_1; }

		//JvmParameterizedTypeReference
		public RuleCall getImplementedTypesJvmParameterizedTypeReferenceParserRuleCall_3_1_2_1_0() { return cImplementedTypesJvmParameterizedTypeReferenceParserRuleCall_3_1_2_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//features+=SkillFeature*
		public Assignment getFeaturesAssignment_5() { return cFeaturesAssignment_5; }

		//SkillFeature
		public RuleCall getFeaturesSkillFeatureParserRuleCall_5_0() { return cFeaturesSkillFeatureParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class EventFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EventFeature");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAttributeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cConstructorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EventFeature:
		//	Attribute | Constructor;
		public ParserRule getRule() { return rule; }

		//Attribute | Constructor
		public Alternatives getAlternatives() { return cAlternatives; }

		//Attribute
		public RuleCall getAttributeParserRuleCall_0() { return cAttributeParserRuleCall_0; }

		//Constructor
		public RuleCall getConstructorParserRuleCall_1() { return cConstructorParserRuleCall_1; }
	}

	public class AgentFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AgentFeature");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAttributeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBehaviorUnitParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cActionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cCapacityUsesParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cRequiredCapacityParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//AgentFeature:
		//	Attribute | BehaviorUnit | Action | CapacityUses | RequiredCapacity;
		public ParserRule getRule() { return rule; }

		//Attribute | BehaviorUnit | Action | CapacityUses | RequiredCapacity
		public Alternatives getAlternatives() { return cAlternatives; }

		//Attribute
		public RuleCall getAttributeParserRuleCall_0() { return cAttributeParserRuleCall_0; }

		//BehaviorUnit
		public RuleCall getBehaviorUnitParserRuleCall_1() { return cBehaviorUnitParserRuleCall_1; }

		//Action
		public RuleCall getActionParserRuleCall_2() { return cActionParserRuleCall_2; }

		//CapacityUses
		public RuleCall getCapacityUsesParserRuleCall_3() { return cCapacityUsesParserRuleCall_3; }

		//RequiredCapacity
		public RuleCall getRequiredCapacityParserRuleCall_4() { return cRequiredCapacityParserRuleCall_4; }
	}

	public class BehaviorFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BehaviorFeature");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAttributeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBehaviorUnitParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cActionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cCapacityUsesParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cRequiredCapacityParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cConstructorParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//BehaviorFeature:
		//	Attribute | BehaviorUnit | Action | CapacityUses | RequiredCapacity | Constructor;
		public ParserRule getRule() { return rule; }

		//Attribute | BehaviorUnit | Action | CapacityUses | RequiredCapacity | Constructor
		public Alternatives getAlternatives() { return cAlternatives; }

		//Attribute
		public RuleCall getAttributeParserRuleCall_0() { return cAttributeParserRuleCall_0; }

		//BehaviorUnit
		public RuleCall getBehaviorUnitParserRuleCall_1() { return cBehaviorUnitParserRuleCall_1; }

		//Action
		public RuleCall getActionParserRuleCall_2() { return cActionParserRuleCall_2; }

		//CapacityUses
		public RuleCall getCapacityUsesParserRuleCall_3() { return cCapacityUsesParserRuleCall_3; }

		//RequiredCapacity
		public RuleCall getRequiredCapacityParserRuleCall_4() { return cRequiredCapacityParserRuleCall_4; }

		//Constructor
		public RuleCall getConstructorParserRuleCall_5() { return cConstructorParserRuleCall_5; }
	}

	public class SkillFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SkillFeature");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAttributeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cActionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cRequiredCapacityParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cConstructorParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cCapacityUsesParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//SkillFeature:
		//	Attribute | Action | RequiredCapacity | Constructor | CapacityUses;
		public ParserRule getRule() { return rule; }

		//Attribute | Action | RequiredCapacity | Constructor | CapacityUses
		public Alternatives getAlternatives() { return cAlternatives; }

		//Attribute
		public RuleCall getAttributeParserRuleCall_0() { return cAttributeParserRuleCall_0; }

		//Action
		public RuleCall getActionParserRuleCall_1() { return cActionParserRuleCall_1; }

		//RequiredCapacity
		public RuleCall getRequiredCapacityParserRuleCall_2() { return cRequiredCapacityParserRuleCall_2; }

		//Constructor
		public RuleCall getConstructorParserRuleCall_3() { return cConstructorParserRuleCall_3; }

		//CapacityUses
		public RuleCall getCapacityUsesParserRuleCall_4() { return cCapacityUsesParserRuleCall_4; }
	}

	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAttributeAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cWriteableAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final Keyword cWriteableVarKeyword_1_0_0 = (Keyword)cWriteableAssignment_1_0.eContents().get(0);
		private final Keyword cValKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Group cGroup_2_0_0 = (Group)cGroup_2_0.eContents().get(0);
		private final Assignment cNameAssignment_2_0_0_0 = (Assignment)cGroup_2_0_0.eContents().get(0);
		private final RuleCall cNameValidIDParserRuleCall_2_0_0_0_0 = (RuleCall)cNameAssignment_2_0_0_0.eContents().get(0);
		private final Keyword cColonKeyword_2_0_0_1 = (Keyword)cGroup_2_0_0.eContents().get(1);
		private final Assignment cTypeAssignment_2_0_0_2 = (Assignment)cGroup_2_0_0.eContents().get(2);
		private final RuleCall cTypeJvmTypeReferenceParserRuleCall_2_0_0_2_0 = (RuleCall)cTypeAssignment_2_0_0_2.eContents().get(0);
		private final Assignment cNameAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_2_1_0 = (RuleCall)cNameAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cInitialValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cInitialValueXExpressionParserRuleCall_3_1_0 = (RuleCall)cInitialValueAssignment_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Attribute returns Feature:
		//	{Attribute} (writeable?="var" | "val") (=> (name=ValidID ":" type=JvmTypeReference) | name=ValidID) ("="
		//	initialValue=XExpression)? ";"?;
		public ParserRule getRule() { return rule; }

		//{Attribute} (writeable?="var" | "val") (=> (name=ValidID ":" type=JvmTypeReference) | name=ValidID) ("="
		//initialValue=XExpression)? ";"?
		public Group getGroup() { return cGroup; }

		//{Attribute}
		public Action getAttributeAction_0() { return cAttributeAction_0; }

		//writeable?="var" | "val"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//writeable?="var"
		public Assignment getWriteableAssignment_1_0() { return cWriteableAssignment_1_0; }

		//"var"
		public Keyword getWriteableVarKeyword_1_0_0() { return cWriteableVarKeyword_1_0_0; }

		//"val"
		public Keyword getValKeyword_1_1() { return cValKeyword_1_1; }

		//=> (name=ValidID ":" type=JvmTypeReference) | name=ValidID
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//=> (name=ValidID ":" type=JvmTypeReference)
		public Group getGroup_2_0() { return cGroup_2_0; }

		//name=ValidID ":" type=JvmTypeReference
		public Group getGroup_2_0_0() { return cGroup_2_0_0; }

		//name=ValidID
		public Assignment getNameAssignment_2_0_0_0() { return cNameAssignment_2_0_0_0; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_0_0_0_0() { return cNameValidIDParserRuleCall_2_0_0_0_0; }

		//":"
		public Keyword getColonKeyword_2_0_0_1() { return cColonKeyword_2_0_0_1; }

		//type=JvmTypeReference
		public Assignment getTypeAssignment_2_0_0_2() { return cTypeAssignment_2_0_0_2; }

		//JvmTypeReference
		public RuleCall getTypeJvmTypeReferenceParserRuleCall_2_0_0_2_0() { return cTypeJvmTypeReferenceParserRuleCall_2_0_0_2_0; }

		//name=ValidID
		public Assignment getNameAssignment_2_1() { return cNameAssignment_2_1; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_1_0() { return cNameValidIDParserRuleCall_2_1_0; }

		//("=" initialValue=XExpression)?
		public Group getGroup_3() { return cGroup_3; }

		//"="
		public Keyword getEqualsSignKeyword_3_0() { return cEqualsSignKeyword_3_0; }

		//initialValue=XExpression
		public Assignment getInitialValueAssignment_3_1() { return cInitialValueAssignment_3_1; }

		//XExpression
		public RuleCall getInitialValueXExpressionParserRuleCall_3_1_0() { return cInitialValueXExpressionParserRuleCall_3_1_0; }

		//";"?
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class CapacityUsesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CapacityUses");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCapacityUsesAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cUsesKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCapacitiesUsedAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCapacitiesUsedJvmParameterizedTypeReferenceParserRuleCall_2_0 = (RuleCall)cCapacitiesUsedAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cCapacitiesUsedAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cCapacitiesUsedJvmParameterizedTypeReferenceParserRuleCall_3_1_0 = (RuleCall)cCapacitiesUsedAssignment_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//CapacityUses returns Feature:
		//	{CapacityUses} "uses" capacitiesUsed+=JvmParameterizedTypeReference (","
		//	capacitiesUsed+=JvmParameterizedTypeReference)* ";"?;
		public ParserRule getRule() { return rule; }

		//{CapacityUses} "uses" capacitiesUsed+=JvmParameterizedTypeReference ("," capacitiesUsed+=JvmParameterizedTypeReference)*
		//";"?
		public Group getGroup() { return cGroup; }

		//{CapacityUses}
		public Action getCapacityUsesAction_0() { return cCapacityUsesAction_0; }

		//"uses"
		public Keyword getUsesKeyword_1() { return cUsesKeyword_1; }

		//capacitiesUsed+=JvmParameterizedTypeReference
		public Assignment getCapacitiesUsedAssignment_2() { return cCapacitiesUsedAssignment_2; }

		//JvmParameterizedTypeReference
		public RuleCall getCapacitiesUsedJvmParameterizedTypeReferenceParserRuleCall_2_0() { return cCapacitiesUsedJvmParameterizedTypeReferenceParserRuleCall_2_0; }

		//("," capacitiesUsed+=JvmParameterizedTypeReference)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//capacitiesUsed+=JvmParameterizedTypeReference
		public Assignment getCapacitiesUsedAssignment_3_1() { return cCapacitiesUsedAssignment_3_1; }

		//JvmParameterizedTypeReference
		public RuleCall getCapacitiesUsedJvmParameterizedTypeReferenceParserRuleCall_3_1_0() { return cCapacitiesUsedJvmParameterizedTypeReferenceParserRuleCall_3_1_0; }

		//";"?
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class RequiredCapacityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RequiredCapacity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRequiredCapacityAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRequiresKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRequiredCapacitiesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRequiredCapacitiesJvmParameterizedTypeReferenceParserRuleCall_2_0 = (RuleCall)cRequiredCapacitiesAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cRequiredCapacitiesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cRequiredCapacitiesJvmParameterizedTypeReferenceParserRuleCall_3_1_0 = (RuleCall)cRequiredCapacitiesAssignment_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//RequiredCapacity returns Feature:
		//	{RequiredCapacity} "requires" requiredCapacities+=JvmParameterizedTypeReference (","
		//	requiredCapacities+=JvmParameterizedTypeReference)* ";"?;
		public ParserRule getRule() { return rule; }

		//{RequiredCapacity} "requires" requiredCapacities+=JvmParameterizedTypeReference (","
		//requiredCapacities+=JvmParameterizedTypeReference)* ";"?
		public Group getGroup() { return cGroup; }

		//{RequiredCapacity}
		public Action getRequiredCapacityAction_0() { return cRequiredCapacityAction_0; }

		//"requires"
		public Keyword getRequiresKeyword_1() { return cRequiresKeyword_1; }

		//requiredCapacities+=JvmParameterizedTypeReference
		public Assignment getRequiredCapacitiesAssignment_2() { return cRequiredCapacitiesAssignment_2; }

		//JvmParameterizedTypeReference
		public RuleCall getRequiredCapacitiesJvmParameterizedTypeReferenceParserRuleCall_2_0() { return cRequiredCapacitiesJvmParameterizedTypeReferenceParserRuleCall_2_0; }

		//("," requiredCapacities+=JvmParameterizedTypeReference)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//requiredCapacities+=JvmParameterizedTypeReference
		public Assignment getRequiredCapacitiesAssignment_3_1() { return cRequiredCapacitiesAssignment_3_1; }

		//JvmParameterizedTypeReference
		public RuleCall getRequiredCapacitiesJvmParameterizedTypeReferenceParserRuleCall_3_1_0() { return cRequiredCapacitiesJvmParameterizedTypeReferenceParserRuleCall_3_1_0; }

		//";"?
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class BehaviorUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BehaviorUnit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBehaviorUnitAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cOnKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameJvmParameterizedTypeReferenceParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftSquareBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cGuardAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cGuardXExpressionParserRuleCall_3_1_0 = (RuleCall)cGuardAssignment_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cBodyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBodyXBlockExpressionParserRuleCall_4_0 = (RuleCall)cBodyAssignment_4.eContents().get(0);
		
		//BehaviorUnit returns Feature:
		//	{BehaviorUnit} "on" name=JvmParameterizedTypeReference ("[" guard=XExpression "]")? body=XBlockExpression;
		public ParserRule getRule() { return rule; }

		//{BehaviorUnit} "on" name=JvmParameterizedTypeReference ("[" guard=XExpression "]")? body=XBlockExpression
		public Group getGroup() { return cGroup; }

		//{BehaviorUnit}
		public Action getBehaviorUnitAction_0() { return cBehaviorUnitAction_0; }

		//"on"
		public Keyword getOnKeyword_1() { return cOnKeyword_1; }

		//name=JvmParameterizedTypeReference
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//JvmParameterizedTypeReference
		public RuleCall getNameJvmParameterizedTypeReferenceParserRuleCall_2_0() { return cNameJvmParameterizedTypeReferenceParserRuleCall_2_0; }

		//(=> "[" guard=XExpression "]")?
		public Group getGroup_3() { return cGroup_3; }

		//=> "["
		public Keyword getLeftSquareBracketKeyword_3_0() { return cLeftSquareBracketKeyword_3_0; }

		//guard=XExpression
		public Assignment getGuardAssignment_3_1() { return cGuardAssignment_3_1; }

		//XExpression
		public RuleCall getGuardXExpressionParserRuleCall_3_1_0() { return cGuardXExpressionParserRuleCall_3_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3_2() { return cRightSquareBracketKeyword_3_2; }

		//body=XBlockExpression
		public Assignment getBodyAssignment_4() { return cBodyAssignment_4; }

		//XBlockExpression
		public RuleCall getBodyXBlockExpressionParserRuleCall_4_0() { return cBodyXBlockExpressionParserRuleCall_4_0; }
	}

	public class ActionSignatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ActionSignature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cActionSignatureAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDefKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameValidIDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Assignment cParamsAssignment_3_1_0 = (Assignment)cGroup_3_1.eContents().get(0);
		private final RuleCall cParamsFormalParameterParserRuleCall_3_1_0_0 = (RuleCall)cParamsAssignment_3_1_0.eContents().get(0);
		private final Group cGroup_3_1_1 = (Group)cGroup_3_1.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_1_0 = (Keyword)cGroup_3_1_1.eContents().get(0);
		private final Assignment cParamsAssignment_3_1_1_1 = (Assignment)cGroup_3_1_1.eContents().get(1);
		private final RuleCall cParamsFormalParameterParserRuleCall_3_1_1_1_0 = (RuleCall)cParamsAssignment_3_1_1_1.eContents().get(0);
		private final Assignment cVarargsAssignment_3_1_2 = (Assignment)cGroup_3_1.eContents().get(2);
		private final RuleCall cVarargsVarArgTokenParserRuleCall_3_1_2_0 = (RuleCall)cVarargsAssignment_3_1_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cColonKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cTypeAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cTypeJvmTypeReferenceParserRuleCall_4_1_0 = (RuleCall)cTypeAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cFiresKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cFiredEventsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cFiredEventsJvmParameterizedTypeReferenceParserRuleCall_5_1_0 = (RuleCall)cFiredEventsAssignment_5_1.eContents().get(0);
		private final Group cGroup_5_2 = (Group)cGroup_5.eContents().get(2);
		private final Keyword cCommaKeyword_5_2_0 = (Keyword)cGroup_5_2.eContents().get(0);
		private final Assignment cFiredEventsAssignment_5_2_1 = (Assignment)cGroup_5_2.eContents().get(1);
		private final RuleCall cFiredEventsJvmParameterizedTypeReferenceParserRuleCall_5_2_1_0 = (RuleCall)cFiredEventsAssignment_5_2_1.eContents().get(0);
		
		//ActionSignature returns ParameterizedFeature:
		//	{ActionSignature} "def" name=ValidID ("(" (params+=FormalParameter ("," params+=FormalParameter)*
		//	varargs?=VarArgToken?)? ")")? (":" type=JvmTypeReference)? ("fires" firedEvents+=JvmParameterizedTypeReference (","
		//	firedEvents+=JvmParameterizedTypeReference)*)?;
		public ParserRule getRule() { return rule; }

		//{ActionSignature} "def" name=ValidID ("(" (params+=FormalParameter ("," params+=FormalParameter)*
		//varargs?=VarArgToken?)? ")")? (":" type=JvmTypeReference)? ("fires" firedEvents+=JvmParameterizedTypeReference (","
		//firedEvents+=JvmParameterizedTypeReference)*)?
		public Group getGroup() { return cGroup; }

		//{ActionSignature}
		public Action getActionSignatureAction_0() { return cActionSignatureAction_0; }

		//"def"
		public Keyword getDefKeyword_1() { return cDefKeyword_1; }

		//name=ValidID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_0() { return cNameValidIDParserRuleCall_2_0; }

		//(=> "(" (params+=FormalParameter ("," params+=FormalParameter)* varargs?=VarArgToken?)? ")")?
		public Group getGroup_3() { return cGroup_3; }

		//=> "("
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }

		//(params+=FormalParameter ("," params+=FormalParameter)* varargs?=VarArgToken?)?
		public Group getGroup_3_1() { return cGroup_3_1; }

		//params+=FormalParameter
		public Assignment getParamsAssignment_3_1_0() { return cParamsAssignment_3_1_0; }

		//FormalParameter
		public RuleCall getParamsFormalParameterParserRuleCall_3_1_0_0() { return cParamsFormalParameterParserRuleCall_3_1_0_0; }

		//(=> "," params+=FormalParameter)*
		public Group getGroup_3_1_1() { return cGroup_3_1_1; }

		//=> ","
		public Keyword getCommaKeyword_3_1_1_0() { return cCommaKeyword_3_1_1_0; }

		//params+=FormalParameter
		public Assignment getParamsAssignment_3_1_1_1() { return cParamsAssignment_3_1_1_1; }

		//FormalParameter
		public RuleCall getParamsFormalParameterParserRuleCall_3_1_1_1_0() { return cParamsFormalParameterParserRuleCall_3_1_1_1_0; }

		//varargs?=VarArgToken?
		public Assignment getVarargsAssignment_3_1_2() { return cVarargsAssignment_3_1_2; }

		//VarArgToken
		public RuleCall getVarargsVarArgTokenParserRuleCall_3_1_2_0() { return cVarargsVarArgTokenParserRuleCall_3_1_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3_2() { return cRightParenthesisKeyword_3_2; }

		//(":" type=JvmTypeReference)?
		public Group getGroup_4() { return cGroup_4; }

		//":"
		public Keyword getColonKeyword_4_0() { return cColonKeyword_4_0; }

		//type=JvmTypeReference
		public Assignment getTypeAssignment_4_1() { return cTypeAssignment_4_1; }

		//JvmTypeReference
		public RuleCall getTypeJvmTypeReferenceParserRuleCall_4_1_0() { return cTypeJvmTypeReferenceParserRuleCall_4_1_0; }

		//("fires" firedEvents+=JvmParameterizedTypeReference ("," firedEvents+=JvmParameterizedTypeReference)*)?
		public Group getGroup_5() { return cGroup_5; }

		//"fires"
		public Keyword getFiresKeyword_5_0() { return cFiresKeyword_5_0; }

		//firedEvents+=JvmParameterizedTypeReference
		public Assignment getFiredEventsAssignment_5_1() { return cFiredEventsAssignment_5_1; }

		//JvmParameterizedTypeReference
		public RuleCall getFiredEventsJvmParameterizedTypeReferenceParserRuleCall_5_1_0() { return cFiredEventsJvmParameterizedTypeReferenceParserRuleCall_5_1_0; }

		//("," firedEvents+=JvmParameterizedTypeReference)*
		public Group getGroup_5_2() { return cGroup_5_2; }

		//","
		public Keyword getCommaKeyword_5_2_0() { return cCommaKeyword_5_2_0; }

		//firedEvents+=JvmParameterizedTypeReference
		public Assignment getFiredEventsAssignment_5_2_1() { return cFiredEventsAssignment_5_2_1; }

		//JvmParameterizedTypeReference
		public RuleCall getFiredEventsJvmParameterizedTypeReferenceParserRuleCall_5_2_1_0() { return cFiredEventsJvmParameterizedTypeReferenceParserRuleCall_5_2_1_0; }
	}

	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Action");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cActionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDefKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameValidIDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Assignment cParamsAssignment_3_1_0 = (Assignment)cGroup_3_1.eContents().get(0);
		private final RuleCall cParamsFormalParameterParserRuleCall_3_1_0_0 = (RuleCall)cParamsAssignment_3_1_0.eContents().get(0);
		private final Group cGroup_3_1_1 = (Group)cGroup_3_1.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_1_0 = (Keyword)cGroup_3_1_1.eContents().get(0);
		private final Assignment cParamsAssignment_3_1_1_1 = (Assignment)cGroup_3_1_1.eContents().get(1);
		private final RuleCall cParamsFormalParameterParserRuleCall_3_1_1_1_0 = (RuleCall)cParamsAssignment_3_1_1_1.eContents().get(0);
		private final Assignment cVarargsAssignment_3_1_2 = (Assignment)cGroup_3_1.eContents().get(2);
		private final RuleCall cVarargsVarArgTokenParserRuleCall_3_1_2_0 = (RuleCall)cVarargsAssignment_3_1_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cColonKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cTypeAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cTypeJvmTypeReferenceParserRuleCall_4_1_0 = (RuleCall)cTypeAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cFiresKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cFiredEventsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cFiredEventsJvmParameterizedTypeReferenceParserRuleCall_5_1_0 = (RuleCall)cFiredEventsAssignment_5_1.eContents().get(0);
		private final Group cGroup_5_2 = (Group)cGroup_5.eContents().get(2);
		private final Keyword cCommaKeyword_5_2_0 = (Keyword)cGroup_5_2.eContents().get(0);
		private final Assignment cFiredEventsAssignment_5_2_1 = (Assignment)cGroup_5_2.eContents().get(1);
		private final RuleCall cFiredEventsJvmParameterizedTypeReferenceParserRuleCall_5_2_1_0 = (RuleCall)cFiredEventsAssignment_5_2_1.eContents().get(0);
		private final Assignment cBodyAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cBodyXBlockExpressionParserRuleCall_6_0 = (RuleCall)cBodyAssignment_6.eContents().get(0);
		
		//Action returns ParameterizedFeature:
		//	{Action} "def" name=ValidID ("(" (params+=FormalParameter ("," params+=FormalParameter)* varargs?=VarArgToken?)? ")")?
		//	(":" type=JvmTypeReference)? ("fires" firedEvents+=JvmParameterizedTypeReference (","
		//	firedEvents+=JvmParameterizedTypeReference)*)? body=XBlockExpression;
		public ParserRule getRule() { return rule; }

		//{Action} "def" name=ValidID ("(" (params+=FormalParameter ("," params+=FormalParameter)* varargs?=VarArgToken?)? ")")?
		//(":" type=JvmTypeReference)? ("fires" firedEvents+=JvmParameterizedTypeReference (","
		//firedEvents+=JvmParameterizedTypeReference)*)? body=XBlockExpression
		public Group getGroup() { return cGroup; }

		//{Action}
		public Action getActionAction_0() { return cActionAction_0; }

		//"def"
		public Keyword getDefKeyword_1() { return cDefKeyword_1; }

		//name=ValidID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_0() { return cNameValidIDParserRuleCall_2_0; }

		//(=> "(" (params+=FormalParameter ("," params+=FormalParameter)* varargs?=VarArgToken?)? ")")?
		public Group getGroup_3() { return cGroup_3; }

		//=> "("
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }

		//(params+=FormalParameter ("," params+=FormalParameter)* varargs?=VarArgToken?)?
		public Group getGroup_3_1() { return cGroup_3_1; }

		//params+=FormalParameter
		public Assignment getParamsAssignment_3_1_0() { return cParamsAssignment_3_1_0; }

		//FormalParameter
		public RuleCall getParamsFormalParameterParserRuleCall_3_1_0_0() { return cParamsFormalParameterParserRuleCall_3_1_0_0; }

		//(=> "," params+=FormalParameter)*
		public Group getGroup_3_1_1() { return cGroup_3_1_1; }

		//=> ","
		public Keyword getCommaKeyword_3_1_1_0() { return cCommaKeyword_3_1_1_0; }

		//params+=FormalParameter
		public Assignment getParamsAssignment_3_1_1_1() { return cParamsAssignment_3_1_1_1; }

		//FormalParameter
		public RuleCall getParamsFormalParameterParserRuleCall_3_1_1_1_0() { return cParamsFormalParameterParserRuleCall_3_1_1_1_0; }

		//varargs?=VarArgToken?
		public Assignment getVarargsAssignment_3_1_2() { return cVarargsAssignment_3_1_2; }

		//VarArgToken
		public RuleCall getVarargsVarArgTokenParserRuleCall_3_1_2_0() { return cVarargsVarArgTokenParserRuleCall_3_1_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3_2() { return cRightParenthesisKeyword_3_2; }

		//(":" type=JvmTypeReference)?
		public Group getGroup_4() { return cGroup_4; }

		//":"
		public Keyword getColonKeyword_4_0() { return cColonKeyword_4_0; }

		//type=JvmTypeReference
		public Assignment getTypeAssignment_4_1() { return cTypeAssignment_4_1; }

		//JvmTypeReference
		public RuleCall getTypeJvmTypeReferenceParserRuleCall_4_1_0() { return cTypeJvmTypeReferenceParserRuleCall_4_1_0; }

		//("fires" firedEvents+=JvmParameterizedTypeReference ("," firedEvents+=JvmParameterizedTypeReference)*)?
		public Group getGroup_5() { return cGroup_5; }

		//"fires"
		public Keyword getFiresKeyword_5_0() { return cFiresKeyword_5_0; }

		//firedEvents+=JvmParameterizedTypeReference
		public Assignment getFiredEventsAssignment_5_1() { return cFiredEventsAssignment_5_1; }

		//JvmParameterizedTypeReference
		public RuleCall getFiredEventsJvmParameterizedTypeReferenceParserRuleCall_5_1_0() { return cFiredEventsJvmParameterizedTypeReferenceParserRuleCall_5_1_0; }

		//("," firedEvents+=JvmParameterizedTypeReference)*
		public Group getGroup_5_2() { return cGroup_5_2; }

		//","
		public Keyword getCommaKeyword_5_2_0() { return cCommaKeyword_5_2_0; }

		//firedEvents+=JvmParameterizedTypeReference
		public Assignment getFiredEventsAssignment_5_2_1() { return cFiredEventsAssignment_5_2_1; }

		//JvmParameterizedTypeReference
		public RuleCall getFiredEventsJvmParameterizedTypeReferenceParserRuleCall_5_2_1_0() { return cFiredEventsJvmParameterizedTypeReferenceParserRuleCall_5_2_1_0; }

		//body=XBlockExpression
		public Assignment getBodyAssignment_6() { return cBodyAssignment_6; }

		//XBlockExpression
		public RuleCall getBodyXBlockExpressionParserRuleCall_6_0() { return cBodyXBlockExpressionParserRuleCall_6_0; }
	}

	public class VarArgTokenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VarArgToken");
		private final Keyword cAsteriskKeyword = (Keyword)rule.eContents().get(1);
		
		//VarArgToken:
		//	"*";
		public ParserRule getRule() { return rule; }

		//"*"
		public Keyword getAsteriskKeyword() { return cAsteriskKeyword; }
	}

	public class ConstructorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Constructor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConstructorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNewKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Assignment cParamsAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cParamsFormalParameterParserRuleCall_2_1_0_0 = (RuleCall)cParamsAssignment_2_1_0.eContents().get(0);
		private final Group cGroup_2_1_1 = (Group)cGroup_2_1.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_1_0 = (Keyword)cGroup_2_1_1.eContents().get(0);
		private final Assignment cParamsAssignment_2_1_1_1 = (Assignment)cGroup_2_1_1.eContents().get(1);
		private final RuleCall cParamsFormalParameterParserRuleCall_2_1_1_1_0 = (RuleCall)cParamsAssignment_2_1_1_1.eContents().get(0);
		private final Assignment cVarargsAssignment_2_1_2 = (Assignment)cGroup_2_1.eContents().get(2);
		private final RuleCall cVarargsVarArgTokenParserRuleCall_2_1_2_0 = (RuleCall)cVarargsAssignment_2_1_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cBodyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBodyXBlockExpressionParserRuleCall_3_0 = (RuleCall)cBodyAssignment_3.eContents().get(0);
		
		//Constructor returns ParameterizedFeature:
		//	{Constructor} "new" ("(" (params+=FormalParameter ("," params+=FormalParameter)* varargs?=VarArgToken?)? ")")?
		//	body=XBlockExpression;
		public ParserRule getRule() { return rule; }

		//{Constructor} "new" ("(" (params+=FormalParameter ("," params+=FormalParameter)* varargs?=VarArgToken?)? ")")?
		//body=XBlockExpression
		public Group getGroup() { return cGroup; }

		//{Constructor}
		public Action getConstructorAction_0() { return cConstructorAction_0; }

		//"new"
		public Keyword getNewKeyword_1() { return cNewKeyword_1; }

		//(=> "(" (params+=FormalParameter ("," params+=FormalParameter)* varargs?=VarArgToken?)? ")")?
		public Group getGroup_2() { return cGroup_2; }

		//=> "("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//(params+=FormalParameter ("," params+=FormalParameter)* varargs?=VarArgToken?)?
		public Group getGroup_2_1() { return cGroup_2_1; }

		//params+=FormalParameter
		public Assignment getParamsAssignment_2_1_0() { return cParamsAssignment_2_1_0; }

		//FormalParameter
		public RuleCall getParamsFormalParameterParserRuleCall_2_1_0_0() { return cParamsFormalParameterParserRuleCall_2_1_0_0; }

		//(=> "," params+=FormalParameter)*
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }

		//=> ","
		public Keyword getCommaKeyword_2_1_1_0() { return cCommaKeyword_2_1_1_0; }

		//params+=FormalParameter
		public Assignment getParamsAssignment_2_1_1_1() { return cParamsAssignment_2_1_1_1; }

		//FormalParameter
		public RuleCall getParamsFormalParameterParserRuleCall_2_1_1_1_0() { return cParamsFormalParameterParserRuleCall_2_1_1_1_0; }

		//varargs?=VarArgToken?
		public Assignment getVarargsAssignment_2_1_2() { return cVarargsAssignment_2_1_2; }

		//VarArgToken
		public RuleCall getVarargsVarArgTokenParserRuleCall_2_1_2_0() { return cVarargsVarArgTokenParserRuleCall_2_1_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }

		//body=XBlockExpression
		public Assignment getBodyAssignment_3() { return cBodyAssignment_3; }

		//XBlockExpression
		public RuleCall getBodyXBlockExpressionParserRuleCall_3_0() { return cBodyXBlockExpressionParserRuleCall_3_0; }
	}

	public class FormalParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FormalParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameValidIDParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cParameterTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParameterTypeJvmTypeReferenceParserRuleCall_2_0 = (RuleCall)cParameterTypeAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cDefaultValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cDefaultValueDefaultParameterValueParserRuleCall_3_1_0 = (RuleCall)cDefaultValueAssignment_3_1.eContents().get(0);
		
		//FormalParameter:
		//	name=ValidID ":" parameterType=JvmTypeReference ("=" defaultValue=DefaultParameterValue)?;
		public ParserRule getRule() { return rule; }

		//name=ValidID ":" parameterType=JvmTypeReference ("=" defaultValue=DefaultParameterValue)?
		public Group getGroup() { return cGroup; }

		//name=ValidID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_0_0() { return cNameValidIDParserRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//parameterType=JvmTypeReference
		public Assignment getParameterTypeAssignment_2() { return cParameterTypeAssignment_2; }

		//JvmTypeReference
		public RuleCall getParameterTypeJvmTypeReferenceParserRuleCall_2_0() { return cParameterTypeJvmTypeReferenceParserRuleCall_2_0; }

		//("=" defaultValue=DefaultParameterValue)?
		public Group getGroup_3() { return cGroup_3; }

		//"="
		public Keyword getEqualsSignKeyword_3_0() { return cEqualsSignKeyword_3_0; }

		//defaultValue=DefaultParameterValue
		public Assignment getDefaultValueAssignment_3_1() { return cDefaultValueAssignment_3_1; }

		//DefaultParameterValue
		public RuleCall getDefaultValueDefaultParameterValueParserRuleCall_3_1_0() { return cDefaultValueDefaultParameterValueParserRuleCall_3_1_0; }
	}

	public class DefaultParameterValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DefaultParameterValue");
		private final RuleCall cXLiteralParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//DefaultParameterValue returns xbase::XExpression:
		//	XLiteral;
		public ParserRule getRule() { return rule; }

		//XLiteral
		public RuleCall getXLiteralParserRuleCall() { return cXLiteralParserRuleCall; }
	}

	public class XVariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XVariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXVariableDeclarationAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cWriteableAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final Keyword cWriteableVarKeyword_1_0_0 = (Keyword)cWriteableAssignment_1_0.eContents().get(0);
		private final Keyword cValKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Group cGroup_2_0_0 = (Group)cGroup_2_0.eContents().get(0);
		private final Assignment cNameAssignment_2_0_0_0 = (Assignment)cGroup_2_0_0.eContents().get(0);
		private final RuleCall cNameValidIDParserRuleCall_2_0_0_0_0 = (RuleCall)cNameAssignment_2_0_0_0.eContents().get(0);
		private final Keyword cColonKeyword_2_0_0_1 = (Keyword)cGroup_2_0_0.eContents().get(1);
		private final Assignment cTypeAssignment_2_0_0_2 = (Assignment)cGroup_2_0_0.eContents().get(2);
		private final RuleCall cTypeJvmTypeReferenceParserRuleCall_2_0_0_2_0 = (RuleCall)cTypeAssignment_2_0_0_2.eContents().get(0);
		private final Assignment cNameAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_2_1_0 = (RuleCall)cNameAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cRightAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cRightXExpressionParserRuleCall_3_1_0 = (RuleCall)cRightAssignment_3_1.eContents().get(0);
		
		////-----------------------------------------------
		//// BELOW THIS POINT, THE RULES FROM XBASE ARE OVERLOADED
		//// Variable declaration according to the SARL syntax (not the Xtext/Xtend)
		//XVariableDeclaration returns xbase::XExpression:
		//	{xbase::XVariableDeclaration} (writeable?="var" | "val") (=> (name=ValidID ":" type=JvmTypeReference) | name=ValidID)
		//	("=" right=XExpression)?;
		public ParserRule getRule() { return rule; }

		//{xbase::XVariableDeclaration} (writeable?="var" | "val") (=> (name=ValidID ":" type=JvmTypeReference) | name=ValidID)
		//("=" right=XExpression)?
		public Group getGroup() { return cGroup; }

		//{xbase::XVariableDeclaration}
		public Action getXVariableDeclarationAction_0() { return cXVariableDeclarationAction_0; }

		//writeable?="var" | "val"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//writeable?="var"
		public Assignment getWriteableAssignment_1_0() { return cWriteableAssignment_1_0; }

		//"var"
		public Keyword getWriteableVarKeyword_1_0_0() { return cWriteableVarKeyword_1_0_0; }

		//"val"
		public Keyword getValKeyword_1_1() { return cValKeyword_1_1; }

		//=> (name=ValidID ":" type=JvmTypeReference) | name=ValidID
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//=> (name=ValidID ":" type=JvmTypeReference)
		public Group getGroup_2_0() { return cGroup_2_0; }

		//name=ValidID ":" type=JvmTypeReference
		public Group getGroup_2_0_0() { return cGroup_2_0_0; }

		//name=ValidID
		public Assignment getNameAssignment_2_0_0_0() { return cNameAssignment_2_0_0_0; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_0_0_0_0() { return cNameValidIDParserRuleCall_2_0_0_0_0; }

		//":"
		public Keyword getColonKeyword_2_0_0_1() { return cColonKeyword_2_0_0_1; }

		//type=JvmTypeReference
		public Assignment getTypeAssignment_2_0_0_2() { return cTypeAssignment_2_0_0_2; }

		//JvmTypeReference
		public RuleCall getTypeJvmTypeReferenceParserRuleCall_2_0_0_2_0() { return cTypeJvmTypeReferenceParserRuleCall_2_0_0_2_0; }

		//name=ValidID
		public Assignment getNameAssignment_2_1() { return cNameAssignment_2_1; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_1_0() { return cNameValidIDParserRuleCall_2_1_0; }

		//("=" right=XExpression)?
		public Group getGroup_3() { return cGroup_3; }

		//"="
		public Keyword getEqualsSignKeyword_3_0() { return cEqualsSignKeyword_3_0; }

		//right=XExpression
		public Assignment getRightAssignment_3_1() { return cRightAssignment_3_1; }

		//XExpression
		public RuleCall getRightXExpressionParserRuleCall_3_1_0() { return cRightXExpressionParserRuleCall_3_1_0; }
	}

	public class JvmFormalParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JvmFormalParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cJvmFormalParameterAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cParameterTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cParameterTypeJvmTypeReferenceParserRuleCall_2_1_0 = (RuleCall)cParameterTypeAssignment_2_1.eContents().get(0);
		
		//// Formal parameter declaration according to the SARL syntax (not the Xtext/Xtend)
		//JvmFormalParameter returns jvm::JvmFormalParameter:
		//	{jvm::JvmFormalParameter} name=ValidID (":" parameterType=JvmTypeReference)?;
		public ParserRule getRule() { return rule; }

		//{jvm::JvmFormalParameter} name=ValidID (":" parameterType=JvmTypeReference)?
		public Group getGroup() { return cGroup; }

		//{jvm::JvmFormalParameter}
		public Action getJvmFormalParameterAction_0() { return cJvmFormalParameterAction_0; }

		//name=ValidID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_0() { return cNameValidIDParserRuleCall_1_0; }

		//(=> ":" parameterType=JvmTypeReference)?
		public Group getGroup_2() { return cGroup_2; }

		//=> ":"
		public Keyword getColonKeyword_2_0() { return cColonKeyword_2_0; }

		//parameterType=JvmTypeReference
		public Assignment getParameterTypeAssignment_2_1() { return cParameterTypeAssignment_2_1; }

		//JvmTypeReference
		public RuleCall getParameterTypeJvmTypeReferenceParserRuleCall_2_1_0() { return cParameterTypeJvmTypeReferenceParserRuleCall_2_1_0; }
	}

	public class FullJvmFormalParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FullJvmFormalParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cJvmFormalParameterAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cParameterTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cParameterTypeJvmTypeReferenceParserRuleCall_3_0 = (RuleCall)cParameterTypeAssignment_3.eContents().get(0);
		
		//// Formal parameter declaration according to the SARL syntax (not the Xtext/Xtend)
		//FullJvmFormalParameter returns jvm::JvmFormalParameter:
		//	{jvm::JvmFormalParameter} name=ValidID ":" parameterType=JvmTypeReference;
		public ParserRule getRule() { return rule; }

		//{jvm::JvmFormalParameter} name=ValidID ":" parameterType=JvmTypeReference
		public Group getGroup() { return cGroup; }

		//{jvm::JvmFormalParameter}
		public Action getJvmFormalParameterAction_0() { return cJvmFormalParameterAction_0; }

		//name=ValidID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_0() { return cNameValidIDParserRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//parameterType=JvmTypeReference
		public Assignment getParameterTypeAssignment_3() { return cParameterTypeAssignment_3; }

		//JvmTypeReference
		public RuleCall getParameterTypeJvmTypeReferenceParserRuleCall_3_0() { return cParameterTypeJvmTypeReferenceParserRuleCall_3_0; }
	}

	public class XXLoopFormalParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XXLoopFormalParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cJvmFormalParameterAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cAsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cParameterTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cParameterTypeJvmTypeReferenceParserRuleCall_2_1_0 = (RuleCall)cParameterTypeAssignment_2_1.eContents().get(0);
		
		//// The following rule is not provided by Xbase, but we use it
		//// in the overloaded version of XForLoopExpression
		//XXLoopFormalParameter returns jvm::JvmFormalParameter:
		//	{jvm::JvmFormalParameter} name=ValidID ("as" parameterType=JvmTypeReference)?;
		public ParserRule getRule() { return rule; }

		//{jvm::JvmFormalParameter} name=ValidID ("as" parameterType=JvmTypeReference)?
		public Group getGroup() { return cGroup; }

		//{jvm::JvmFormalParameter}
		public Action getJvmFormalParameterAction_0() { return cJvmFormalParameterAction_0; }

		//name=ValidID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_0() { return cNameValidIDParserRuleCall_1_0; }

		//("as" parameterType=JvmTypeReference)?
		public Group getGroup_2() { return cGroup_2; }

		//"as"
		public Keyword getAsKeyword_2_0() { return cAsKeyword_2_0; }

		//parameterType=JvmTypeReference
		public Assignment getParameterTypeAssignment_2_1() { return cParameterTypeAssignment_2_1; }

		//JvmTypeReference
		public RuleCall getParameterTypeJvmTypeReferenceParserRuleCall_2_1_0() { return cParameterTypeJvmTypeReferenceParserRuleCall_2_1_0; }
	}

	public class XForLoopExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XForLoopExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cGroup_0.eContents().get(0);
		private final Action cXForLoopExpressionAction_0_0_0 = (Action)cGroup_0_0.eContents().get(0);
		private final Keyword cForKeyword_0_0_1 = (Keyword)cGroup_0_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0_0_2 = (Keyword)cGroup_0_0.eContents().get(2);
		private final Assignment cDeclaredParamAssignment_0_0_3 = (Assignment)cGroup_0_0.eContents().get(3);
		private final RuleCall cDeclaredParamXXLoopFormalParameterParserRuleCall_0_0_3_0 = (RuleCall)cDeclaredParamAssignment_0_0_3.eContents().get(0);
		private final Keyword cColonKeyword_0_0_4 = (Keyword)cGroup_0_0.eContents().get(4);
		private final Assignment cForExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cForExpressionXExpressionParserRuleCall_1_0 = (RuleCall)cForExpressionAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cEachExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEachExpressionXExpressionParserRuleCall_3_0 = (RuleCall)cEachExpressionAssignment_3.eContents().get(0);
		
		//// The type of the for-loop's variable is following the SARL syntax (not the Xtext/Xtend)
		//XForLoopExpression returns xbase::XExpression:
		//	=> ({xbase::XForLoopExpression} "for" "(" declaredParam=XXLoopFormalParameter ":") forExpression=XExpression ")"
		//	eachExpression=XExpression;
		public ParserRule getRule() { return rule; }

		//=> ({xbase::XForLoopExpression} "for" "(" declaredParam=XXLoopFormalParameter ":") forExpression=XExpression ")"
		//eachExpression=XExpression
		public Group getGroup() { return cGroup; }

		//=> ({xbase::XForLoopExpression} "for" "(" declaredParam=XXLoopFormalParameter ":")
		public Group getGroup_0() { return cGroup_0; }

		//{xbase::XForLoopExpression} "for" "(" declaredParam=XXLoopFormalParameter ":"
		public Group getGroup_0_0() { return cGroup_0_0; }

		//{xbase::XForLoopExpression}
		public Action getXForLoopExpressionAction_0_0_0() { return cXForLoopExpressionAction_0_0_0; }

		//"for"
		public Keyword getForKeyword_0_0_1() { return cForKeyword_0_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_0_2() { return cLeftParenthesisKeyword_0_0_2; }

		//declaredParam=XXLoopFormalParameter
		public Assignment getDeclaredParamAssignment_0_0_3() { return cDeclaredParamAssignment_0_0_3; }

		//XXLoopFormalParameter
		public RuleCall getDeclaredParamXXLoopFormalParameterParserRuleCall_0_0_3_0() { return cDeclaredParamXXLoopFormalParameterParserRuleCall_0_0_3_0; }

		//":"
		public Keyword getColonKeyword_0_0_4() { return cColonKeyword_0_0_4; }

		//forExpression=XExpression
		public Assignment getForExpressionAssignment_1() { return cForExpressionAssignment_1; }

		//XExpression
		public RuleCall getForExpressionXExpressionParserRuleCall_1_0() { return cForExpressionXExpressionParserRuleCall_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }

		//eachExpression=XExpression
		public Assignment getEachExpressionAssignment_3() { return cEachExpressionAssignment_3; }

		//XExpression
		public RuleCall getEachExpressionXExpressionParserRuleCall_3_0() { return cEachExpressionXExpressionParserRuleCall_3_0; }
	}
	
	
	private final SarlScriptElements pSarlScript;
	private final TopElementElements pTopElement;
	private final NamedElementElements pNamedElement;
	private final FeatureContainerElements pFeatureContainer;
	private final FeatureElements pFeature;
	private final ParameterizedFeatureElements pParameterizedFeature;
	private final InheritingElementElements pInheritingElement;
	private final ImplementingElementElements pImplementingElement;
	private final EventElements pEvent;
	private final CapacityElements pCapacity;
	private final AgentElements pAgent;
	private final BehaviorElements pBehavior;
	private final SkillElements pSkill;
	private final EventFeatureElements pEventFeature;
	private final AgentFeatureElements pAgentFeature;
	private final BehaviorFeatureElements pBehaviorFeature;
	private final SkillFeatureElements pSkillFeature;
	private final AttributeElements pAttribute;
	private final CapacityUsesElements pCapacityUses;
	private final RequiredCapacityElements pRequiredCapacity;
	private final BehaviorUnitElements pBehaviorUnit;
	private final ActionSignatureElements pActionSignature;
	private final ActionElements pAction;
	private final VarArgTokenElements pVarArgToken;
	private final ConstructorElements pConstructor;
	private final FormalParameterElements pFormalParameter;
	private final DefaultParameterValueElements pDefaultParameterValue;
	private final XVariableDeclarationElements pXVariableDeclaration;
	private final JvmFormalParameterElements pJvmFormalParameter;
	private final FullJvmFormalParameterElements pFullJvmFormalParameter;
	private final XXLoopFormalParameterElements pXXLoopFormalParameter;
	private final XForLoopExpressionElements pXForLoopExpression;
	
	private final Grammar grammar;

	private final XbaseGrammarAccess gaXbase;

	@Inject
	public SARLGrammarAccess(GrammarProvider grammarProvider,
		XbaseGrammarAccess gaXbase) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaXbase = gaXbase;
		this.pSarlScript = new SarlScriptElements();
		this.pTopElement = new TopElementElements();
		this.pNamedElement = new NamedElementElements();
		this.pFeatureContainer = new FeatureContainerElements();
		this.pFeature = new FeatureElements();
		this.pParameterizedFeature = new ParameterizedFeatureElements();
		this.pInheritingElement = new InheritingElementElements();
		this.pImplementingElement = new ImplementingElementElements();
		this.pEvent = new EventElements();
		this.pCapacity = new CapacityElements();
		this.pAgent = new AgentElements();
		this.pBehavior = new BehaviorElements();
		this.pSkill = new SkillElements();
		this.pEventFeature = new EventFeatureElements();
		this.pAgentFeature = new AgentFeatureElements();
		this.pBehaviorFeature = new BehaviorFeatureElements();
		this.pSkillFeature = new SkillFeatureElements();
		this.pAttribute = new AttributeElements();
		this.pCapacityUses = new CapacityUsesElements();
		this.pRequiredCapacity = new RequiredCapacityElements();
		this.pBehaviorUnit = new BehaviorUnitElements();
		this.pActionSignature = new ActionSignatureElements();
		this.pAction = new ActionElements();
		this.pVarArgToken = new VarArgTokenElements();
		this.pConstructor = new ConstructorElements();
		this.pFormalParameter = new FormalParameterElements();
		this.pDefaultParameterValue = new DefaultParameterValueElements();
		this.pXVariableDeclaration = new XVariableDeclarationElements();
		this.pJvmFormalParameter = new JvmFormalParameterElements();
		this.pFullJvmFormalParameter = new FullJvmFormalParameterElements();
		this.pXXLoopFormalParameter = new XXLoopFormalParameterElements();
		this.pXForLoopExpression = new XForLoopExpressionElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("io.sarl.lang.SARL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public XbaseGrammarAccess getXbaseGrammarAccess() {
		return gaXbase;
	}

	
	//SarlScript:
	//	("package" name=QualifiedName ";"?)? importSection=XImportSection? elements+=TopElement*;
	public SarlScriptElements getSarlScriptAccess() {
		return pSarlScript;
	}
	
	public ParserRule getSarlScriptRule() {
		return getSarlScriptAccess().getRule();
	}

	//TopElement:
	//	Event | Capacity | Agent | Behavior | Skill;
	public TopElementElements getTopElementAccess() {
		return pTopElement;
	}
	
	public ParserRule getTopElementRule() {
		return getTopElementAccess().getRule();
	}

	//// Define an interface that is providing the 'name' feature.
	//// This rule is declared only for generated the Java interface
	//// with the expected features.
	//// YOU SHOULD NEVER USE THIS RULE IN THE BODY OF ANOTHER RULE.
	//NamedElement:
	//	name=ValidID;
	public NamedElementElements getNamedElementAccess() {
		return pNamedElement;
	}
	
	public ParserRule getNamedElementRule() {
		return getNamedElementAccess().getRule();
	}

	//// Define an interface that is providing the 'features' feature.
	//// This rule is declared only for generated the Java interface
	//// with the expected features.
	//// YOU SHOULD NEVER USE THIS RULE IN THE BODY OF ANOTHER RULE.
	//FeatureContainer returns NamedElement:
	//	{FeatureContainer} features+=Feature;
	public FeatureContainerElements getFeatureContainerAccess() {
		return pFeatureContainer;
	}
	
	public ParserRule getFeatureContainerRule() {
		return getFeatureContainerAccess().getRule();
	}

	//// Define an interface that is a feature.
	//// This rule is declared only for generated the Java interface
	//// with the expected features.
	//// YOU SHOULD NEVER USE THIS RULE IN THE BODY OF ANOTHER RULE.
	//Feature:
	//	{Feature};
	public FeatureElements getFeatureAccess() {
		return pFeature;
	}
	
	public ParserRule getFeatureRule() {
		return getFeatureAccess().getRule();
	}

	//// Define an interface that is a feature with parameters.
	//// This rule is declared only for generated the Java interface
	//// with the expected features.
	//// YOU SHOULD NEVER USE THIS RULE IN THE BODY OF ANOTHER RULE.
	//ParameterizedFeature returns Feature:
	//	{ParameterizedFeature} params+=FormalParameter varargs?=ID;
	public ParameterizedFeatureElements getParameterizedFeatureAccess() {
		return pParameterizedFeature;
	}
	
	public ParserRule getParameterizedFeatureRule() {
		return getParameterizedFeatureAccess().getRule();
	}

	//// Define an interface that is providing the 'superTypes' feature.
	//// This rule is declared only for generated the Java interface
	//// with the expected features.
	//// YOU SHOULD NEVER USE THIS RULE IN THE BODY OF ANTHOER RULE.
	//InheritingElement returns FeatureContainer:
	//	{InheritingElement} superTypes+=JvmParameterizedTypeReference;
	public InheritingElementElements getInheritingElementAccess() {
		return pInheritingElement;
	}
	
	public ParserRule getInheritingElementRule() {
		return getInheritingElementAccess().getRule();
	}

	//// Define an interface that is providing the 'implementedTypes' feature.
	//// This rule is declared only for generated the Java interface
	//// with the expected features.
	//// YOU SHOULD NEVER USE THIS RULE IN THE BODY OF ANTHOER RULE.
	//ImplementingElement returns InheritingElement:
	//	{ImplementingElement} implementedTypes+=JvmParameterizedTypeReference;
	public ImplementingElementElements getImplementingElementAccess() {
		return pImplementingElement;
	}
	
	public ParserRule getImplementingElementRule() {
		return getImplementingElementAccess().getRule();
	}

	//Event returns InheritingElement:
	//	{Event} "event" name=ValidID ("extends" superTypes+=JvmParameterizedTypeReference)? ("{" features+=EventFeature*
	//	"}")?;
	public EventElements getEventAccess() {
		return pEvent;
	}
	
	public ParserRule getEventRule() {
		return getEventAccess().getRule();
	}

	//Capacity returns InheritingElement:
	//	{Capacity} "capacity" name=ValidID ("extends" superTypes+=JvmParameterizedTypeReference (","
	//	superTypes+=JvmParameterizedTypeReference)*)? "{" features+=ActionSignature* "}";
	public CapacityElements getCapacityAccess() {
		return pCapacity;
	}
	
	public ParserRule getCapacityRule() {
		return getCapacityAccess().getRule();
	}

	//Agent returns InheritingElement:
	//	{Agent} "agent" name=ValidID ("extends" superTypes+=JvmParameterizedTypeReference)? "{" features+=AgentFeature* "}";
	public AgentElements getAgentAccess() {
		return pAgent;
	}
	
	public ParserRule getAgentRule() {
		return getAgentAccess().getRule();
	}

	//Behavior returns InheritingElement:
	//	{Behavior} "behavior" name=ValidID ("extends" superTypes+=JvmParameterizedTypeReference)? "{"
	//	features+=BehaviorFeature* "}";
	public BehaviorElements getBehaviorAccess() {
		return pBehavior;
	}
	
	public ParserRule getBehaviorRule() {
		return getBehaviorAccess().getRule();
	}

	//Skill returns ImplementingElement:
	//	{Skill} "skill" name=ValidID (("extends" superTypes+=JvmParameterizedTypeReference)? & ("implements"
	//	implementedTypes+=JvmParameterizedTypeReference ("," implementedTypes+=JvmParameterizedTypeReference)*)?) "{"
	//	features+=SkillFeature* "}";
	public SkillElements getSkillAccess() {
		return pSkill;
	}
	
	public ParserRule getSkillRule() {
		return getSkillAccess().getRule();
	}

	//EventFeature:
	//	Attribute | Constructor;
	public EventFeatureElements getEventFeatureAccess() {
		return pEventFeature;
	}
	
	public ParserRule getEventFeatureRule() {
		return getEventFeatureAccess().getRule();
	}

	//AgentFeature:
	//	Attribute | BehaviorUnit | Action | CapacityUses | RequiredCapacity;
	public AgentFeatureElements getAgentFeatureAccess() {
		return pAgentFeature;
	}
	
	public ParserRule getAgentFeatureRule() {
		return getAgentFeatureAccess().getRule();
	}

	//BehaviorFeature:
	//	Attribute | BehaviorUnit | Action | CapacityUses | RequiredCapacity | Constructor;
	public BehaviorFeatureElements getBehaviorFeatureAccess() {
		return pBehaviorFeature;
	}
	
	public ParserRule getBehaviorFeatureRule() {
		return getBehaviorFeatureAccess().getRule();
	}

	//SkillFeature:
	//	Attribute | Action | RequiredCapacity | Constructor | CapacityUses;
	public SkillFeatureElements getSkillFeatureAccess() {
		return pSkillFeature;
	}
	
	public ParserRule getSkillFeatureRule() {
		return getSkillFeatureAccess().getRule();
	}

	//Attribute returns Feature:
	//	{Attribute} (writeable?="var" | "val") (=> (name=ValidID ":" type=JvmTypeReference) | name=ValidID) ("="
	//	initialValue=XExpression)? ";"?;
	public AttributeElements getAttributeAccess() {
		return pAttribute;
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}

	//CapacityUses returns Feature:
	//	{CapacityUses} "uses" capacitiesUsed+=JvmParameterizedTypeReference (","
	//	capacitiesUsed+=JvmParameterizedTypeReference)* ";"?;
	public CapacityUsesElements getCapacityUsesAccess() {
		return pCapacityUses;
	}
	
	public ParserRule getCapacityUsesRule() {
		return getCapacityUsesAccess().getRule();
	}

	//RequiredCapacity returns Feature:
	//	{RequiredCapacity} "requires" requiredCapacities+=JvmParameterizedTypeReference (","
	//	requiredCapacities+=JvmParameterizedTypeReference)* ";"?;
	public RequiredCapacityElements getRequiredCapacityAccess() {
		return pRequiredCapacity;
	}
	
	public ParserRule getRequiredCapacityRule() {
		return getRequiredCapacityAccess().getRule();
	}

	//BehaviorUnit returns Feature:
	//	{BehaviorUnit} "on" name=JvmParameterizedTypeReference ("[" guard=XExpression "]")? body=XBlockExpression;
	public BehaviorUnitElements getBehaviorUnitAccess() {
		return pBehaviorUnit;
	}
	
	public ParserRule getBehaviorUnitRule() {
		return getBehaviorUnitAccess().getRule();
	}

	//ActionSignature returns ParameterizedFeature:
	//	{ActionSignature} "def" name=ValidID ("(" (params+=FormalParameter ("," params+=FormalParameter)*
	//	varargs?=VarArgToken?)? ")")? (":" type=JvmTypeReference)? ("fires" firedEvents+=JvmParameterizedTypeReference (","
	//	firedEvents+=JvmParameterizedTypeReference)*)?;
	public ActionSignatureElements getActionSignatureAccess() {
		return pActionSignature;
	}
	
	public ParserRule getActionSignatureRule() {
		return getActionSignatureAccess().getRule();
	}

	//Action returns ParameterizedFeature:
	//	{Action} "def" name=ValidID ("(" (params+=FormalParameter ("," params+=FormalParameter)* varargs?=VarArgToken?)? ")")?
	//	(":" type=JvmTypeReference)? ("fires" firedEvents+=JvmParameterizedTypeReference (","
	//	firedEvents+=JvmParameterizedTypeReference)*)? body=XBlockExpression;
	public ActionElements getActionAccess() {
		return pAction;
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}

	//VarArgToken:
	//	"*";
	public VarArgTokenElements getVarArgTokenAccess() {
		return pVarArgToken;
	}
	
	public ParserRule getVarArgTokenRule() {
		return getVarArgTokenAccess().getRule();
	}

	//Constructor returns ParameterizedFeature:
	//	{Constructor} "new" ("(" (params+=FormalParameter ("," params+=FormalParameter)* varargs?=VarArgToken?)? ")")?
	//	body=XBlockExpression;
	public ConstructorElements getConstructorAccess() {
		return pConstructor;
	}
	
	public ParserRule getConstructorRule() {
		return getConstructorAccess().getRule();
	}

	//FormalParameter:
	//	name=ValidID ":" parameterType=JvmTypeReference ("=" defaultValue=DefaultParameterValue)?;
	public FormalParameterElements getFormalParameterAccess() {
		return pFormalParameter;
	}
	
	public ParserRule getFormalParameterRule() {
		return getFormalParameterAccess().getRule();
	}

	//DefaultParameterValue returns xbase::XExpression:
	//	XLiteral;
	public DefaultParameterValueElements getDefaultParameterValueAccess() {
		return pDefaultParameterValue;
	}
	
	public ParserRule getDefaultParameterValueRule() {
		return getDefaultParameterValueAccess().getRule();
	}

	////-----------------------------------------------
	//// BELOW THIS POINT, THE RULES FROM XBASE ARE OVERLOADED
	//// Variable declaration according to the SARL syntax (not the Xtext/Xtend)
	//XVariableDeclaration returns xbase::XExpression:
	//	{xbase::XVariableDeclaration} (writeable?="var" | "val") (=> (name=ValidID ":" type=JvmTypeReference) | name=ValidID)
	//	("=" right=XExpression)?;
	public XVariableDeclarationElements getXVariableDeclarationAccess() {
		return pXVariableDeclaration;
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}

	//// Formal parameter declaration according to the SARL syntax (not the Xtext/Xtend)
	//JvmFormalParameter returns jvm::JvmFormalParameter:
	//	{jvm::JvmFormalParameter} name=ValidID (":" parameterType=JvmTypeReference)?;
	public JvmFormalParameterElements getJvmFormalParameterAccess() {
		return pJvmFormalParameter;
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}

	//// Formal parameter declaration according to the SARL syntax (not the Xtext/Xtend)
	//FullJvmFormalParameter returns jvm::JvmFormalParameter:
	//	{jvm::JvmFormalParameter} name=ValidID ":" parameterType=JvmTypeReference;
	public FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return pFullJvmFormalParameter;
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}

	//// The following rule is not provided by Xbase, but we use it
	//// in the overloaded version of XForLoopExpression
	//XXLoopFormalParameter returns jvm::JvmFormalParameter:
	//	{jvm::JvmFormalParameter} name=ValidID ("as" parameterType=JvmTypeReference)?;
	public XXLoopFormalParameterElements getXXLoopFormalParameterAccess() {
		return pXXLoopFormalParameter;
	}
	
	public ParserRule getXXLoopFormalParameterRule() {
		return getXXLoopFormalParameterAccess().getRule();
	}

	//// The type of the for-loop's variable is following the SARL syntax (not the Xtext/Xtend)
	//XForLoopExpression returns xbase::XExpression:
	//	=> ({xbase::XForLoopExpression} "for" "(" declaredParam=XXLoopFormalParameter ":") forExpression=XExpression ")"
	//	eachExpression=XExpression;
	public XForLoopExpressionElements getXForLoopExpressionAccess() {
		return pXForLoopExpression;
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}

	//XExpression:
	//	XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaXbase.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}

	//XAssignment returns XExpression:
	//	{XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment | XOrExpression
	//	(=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign])
	//	rightOperand=XAssignment)?;
	public XbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaXbase.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}

	//OpSingleAssign:
	//	"=";
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaXbase.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}

	//OpMultiAssign:
	//	"+=" | "-=" | "*=" | "/=" | "%=" | "<" "<" "=" | ">" ">"? ">=";
	public XbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaXbase.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}

	//XOrExpression returns XExpression:
	//	XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
	//	rightOperand=XAndExpression)*;
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaXbase.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}

	//OpOr:
	//	"||";
	public XbaseGrammarAccess.OpOrElements getOpOrAccess() {
		return gaXbase.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}

	//XAndExpression returns XExpression:
	//	XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
	//	rightOperand=XEqualityExpression)*;
	public XbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaXbase.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}

	//OpAnd:
	//	"&&";
	public XbaseGrammarAccess.OpAndElements getOpAndAccess() {
		return gaXbase.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}

	//XEqualityExpression returns XExpression:
	//	XRelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//	rightOperand=XRelationalExpression)*;
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaXbase.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}

	//OpEquality:
	//	"==" | "!=" | "===" | "!==";
	public XbaseGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaXbase.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}

	//XRelationalExpression returns XExpression:
	//	XOtherOperatorExpression (=> ({XInstanceOfExpression.expression=current} "instanceof") type=JvmTypeReference | =>
	//	({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
	//	rightOperand=XOtherOperatorExpression)*;
	public XbaseGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaXbase.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}

	//OpCompare:
	//	">=" | "<" "=" | ">" | "<";
	public XbaseGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaXbase.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}

	//XOtherOperatorExpression returns XExpression:
	//	XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//	rightOperand=XAdditiveExpression)*;
	public XbaseGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaXbase.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}

	//OpOther:
	//	"->" | "..<" | ">" ".." | ".." | "=>" | ">" (=> (">" ">") | ">") | "<" (=> ("<" "<") | "<" | "=>") | "<>" | "?:";
	public XbaseGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaXbase.getOpOtherAccess();
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}

	//XAdditiveExpression returns XExpression:
	//	XMultiplicativeExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//	rightOperand=XMultiplicativeExpression)*;
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaXbase.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}

	//OpAdd:
	//	"+" | "-";
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaXbase.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}

	//XMultiplicativeExpression returns XExpression:
	//	XUnaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti])
	//	rightOperand=XUnaryOperation)*;
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaXbase.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}

	//OpMulti:
	//	"*" | "**" | "/" | "%";
	public XbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaXbase.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}

	//XUnaryOperation returns XExpression:
	//	{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XUnaryOperation | XCastedExpression;
	public XbaseGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaXbase.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}

	//OpUnary:
	//	"!" | "-" | "+";
	public XbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaXbase.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}

	//XCastedExpression returns XExpression:
	//	XPostfixOperation (=> ({XCastedExpression.target=current} "as") type=JvmTypeReference)*;
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaXbase.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}

	//XPostfixOperation returns XExpression:
	//	XMemberFeatureCall => ({XPostfixOperation.operand=current} feature=[types::JvmIdentifiableElement|OpPostfix])?;
	public XbaseGrammarAccess.XPostfixOperationElements getXPostfixOperationAccess() {
		return gaXbase.getXPostfixOperationAccess();
	}
	
	public ParserRule getXPostfixOperationRule() {
		return getXPostfixOperationAccess().getRule();
	}

	//OpPostfix:
	//	"++" | "--";
	public XbaseGrammarAccess.OpPostfixElements getOpPostfixAccess() {
		return gaXbase.getOpPostfixAccess();
	}
	
	public ParserRule getOpPostfixRule() {
		return getOpPostfixAccess().getRule();
	}

	//XMemberFeatureCall returns XExpression:
	//	XPrimaryExpression (=> ({XAssignment.assignable=current} ("." | explicitStatic?="::")
	//	feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment | =>
	//	({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." | explicitStatic?="::")) ("<"
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?="(" (memberCallArguments+=XShortClosure |
	//	memberCallArguments+=XExpression ("," memberCallArguments+=XExpression)*)? ")")? memberCallArguments+=XClosure?)*;
	public XbaseGrammarAccess.XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return gaXbase.getXMemberFeatureCallAccess();
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}

	//XPrimaryExpression returns XExpression:
	//	XConstructorCall | XBlockExpression | XSwitchExpression | XSynchronizedExpression | XFeatureCall | XLiteral |
	//	XIfExpression | XForLoopExpression | XBasicForLoopExpression | XWhileExpression | XDoWhileExpression |
	//	XThrowExpression | XReturnExpression | XTryCatchFinallyExpression | XParenthesizedExpression;
	public XbaseGrammarAccess.XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return gaXbase.getXPrimaryExpressionAccess();
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}

	//XLiteral returns XExpression:
	//	XCollectionLiteral | XClosure | XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral | XTypeLiteral;
	public XbaseGrammarAccess.XLiteralElements getXLiteralAccess() {
		return gaXbase.getXLiteralAccess();
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}

	//XCollectionLiteral:
	//	XSetLiteral | XListLiteral;
	public XbaseGrammarAccess.XCollectionLiteralElements getXCollectionLiteralAccess() {
		return gaXbase.getXCollectionLiteralAccess();
	}
	
	public ParserRule getXCollectionLiteralRule() {
		return getXCollectionLiteralAccess().getRule();
	}

	//XSetLiteral:
	//	{XSetLiteral} "#" "{" (elements+=XExpression ("," elements+=XExpression)*)? "}";
	public XbaseGrammarAccess.XSetLiteralElements getXSetLiteralAccess() {
		return gaXbase.getXSetLiteralAccess();
	}
	
	public ParserRule getXSetLiteralRule() {
		return getXSetLiteralAccess().getRule();
	}

	//XListLiteral:
	//	{XListLiteral} "#" "[" (elements+=XExpression ("," elements+=XExpression)*)? "]";
	public XbaseGrammarAccess.XListLiteralElements getXListLiteralAccess() {
		return gaXbase.getXListLiteralAccess();
	}
	
	public ParserRule getXListLiteralRule() {
		return getXListLiteralAccess().getRule();
	}

	//XClosure returns XExpression:
	//	=> ({XClosure} "[") => ((declaredFormalParameters+=JvmFormalParameter (","
	//	declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?="|")? expression=XExpressionInClosure "]";
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaXbase.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}

	//XExpressionInClosure returns XExpression:
	//	{XBlockExpression} (expressions+=XExpressionOrVarDeclaration ";"?)*;
	public XbaseGrammarAccess.XExpressionInClosureElements getXExpressionInClosureAccess() {
		return gaXbase.getXExpressionInClosureAccess();
	}
	
	public ParserRule getXExpressionInClosureRule() {
		return getXExpressionInClosureAccess().getRule();
	}

	//XShortClosure returns XExpression:
	//	=> ({XClosure} (declaredFormalParameters+=JvmFormalParameter ("," declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?="|") expression=XExpression;
	public XbaseGrammarAccess.XShortClosureElements getXShortClosureAccess() {
		return gaXbase.getXShortClosureAccess();
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}

	//XParenthesizedExpression returns XExpression:
	//	"(" XExpression ")";
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaXbase.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}

	//XIfExpression returns XExpression:
	//	{XIfExpression} "if" "(" if=XExpression ")" then=XExpression ("else" else=XExpression)?;
	public XbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaXbase.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}

	//XSwitchExpression returns XExpression:
	//	{XSwitchExpression} "switch" (=> ("(" declaredParam=JvmFormalParameter ":") switch=XExpression ")" | =>
	//	(declaredParam=JvmFormalParameter ":")? switch=XExpression) "{" cases+=XCasePart* ("default" ":" default=XExpression)?
	//	"}";
	public XbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaXbase.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}

	//XCasePart:
	//	{XCasePart} typeGuard=JvmTypeReference? ("case" case=XExpression)? (":" then=XExpression | fallThrough?=",");
	public XbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaXbase.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}

	//XBasicForLoopExpression returns XExpression:
	//	{XBasicForLoopExpression} "for" "(" (initExpressions+=XExpressionOrVarDeclaration (","
	//	initExpressions+=XExpressionOrVarDeclaration)*)? ";" expression=XExpression? ";" (updateExpressions+=XExpression (","
	//	updateExpressions+=XExpression)*)? ")" eachExpression=XExpression;
	public XbaseGrammarAccess.XBasicForLoopExpressionElements getXBasicForLoopExpressionAccess() {
		return gaXbase.getXBasicForLoopExpressionAccess();
	}
	
	public ParserRule getXBasicForLoopExpressionRule() {
		return getXBasicForLoopExpressionAccess().getRule();
	}

	//XWhileExpression returns XExpression:
	//	{XWhileExpression} "while" "(" predicate=XExpression ")" body=XExpression;
	public XbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaXbase.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}

	//XDoWhileExpression returns XExpression:
	//	{XDoWhileExpression} "do" body=XExpression "while" "(" predicate=XExpression ")";
	public XbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaXbase.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}

	//XBlockExpression returns XExpression:
	//	{XBlockExpression} "{" (expressions+=XExpressionOrVarDeclaration ";"?)* "}";
	public XbaseGrammarAccess.XBlockExpressionElements getXBlockExpressionAccess() {
		return gaXbase.getXBlockExpressionAccess();
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}

	//XExpressionOrVarDeclaration returns XExpression:
	//	XVariableDeclaration | XExpression;
	public XbaseGrammarAccess.XExpressionOrVarDeclarationElements getXExpressionOrVarDeclarationAccess() {
		return gaXbase.getXExpressionOrVarDeclarationAccess();
	}
	
	public ParserRule getXExpressionOrVarDeclarationRule() {
		return getXExpressionOrVarDeclarationAccess().getRule();
	}

	//XFeatureCall returns XExpression:
	//	{XFeatureCall} ("<" typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?="(" (featureCallArguments+=XShortClosure
	//	| featureCallArguments+=XExpression ("," featureCallArguments+=XExpression)*)? ")")? featureCallArguments+=XClosure?;
	public XbaseGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaXbase.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}

	//FeatureCallID:
	//	ValidID | "extends" | "static" | "import" | "extension";
	public XbaseGrammarAccess.FeatureCallIDElements getFeatureCallIDAccess() {
		return gaXbase.getFeatureCallIDAccess();
	}
	
	public ParserRule getFeatureCallIDRule() {
		return getFeatureCallIDAccess().getRule();
	}

	//IdOrSuper:
	//	FeatureCallID | "super";
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaXbase.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}

	//XConstructorCall returns XExpression:
	//	{XConstructorCall} "new" constructor=[types::JvmConstructor|QualifiedName] ("<"
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")? (=>
	//	explicitConstructorCall?="(" (arguments+=XShortClosure | arguments+=XExpression ("," arguments+=XExpression)*)? ")")?
	//	arguments+=XClosure?;
	public XbaseGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaXbase.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}

	//XBooleanLiteral returns XExpression:
	//	{XBooleanLiteral} ("false" | isTrue?="true");
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaXbase.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}

	//XNullLiteral returns XExpression:
	//	{XNullLiteral} "null";
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaXbase.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}

	//XNumberLiteral returns XExpression:
	//	{XNumberLiteral} value=Number;
	public XbaseGrammarAccess.XNumberLiteralElements getXNumberLiteralAccess() {
		return gaXbase.getXNumberLiteralAccess();
	}
	
	public ParserRule getXNumberLiteralRule() {
		return getXNumberLiteralAccess().getRule();
	}

	//XStringLiteral returns XExpression:
	//	{XStringLiteral} value=STRING;
	public XbaseGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaXbase.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}

	//XTypeLiteral returns XExpression:
	//	{XTypeLiteral} "typeof" "(" type=[types::JvmType|QualifiedName] arrayDimensions+=ArrayBrackets* ")";
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaXbase.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}

	//XThrowExpression returns XExpression:
	//	{XThrowExpression} "throw" expression=XExpression;
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaXbase.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}

	//XReturnExpression returns XExpression:
	//	{XReturnExpression} "return" -> expression=XExpression?;
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaXbase.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}

	//XTryCatchFinallyExpression returns XExpression:
	//	{XTryCatchFinallyExpression} "try" expression=XExpression (catchClauses+=XCatchClause+ ("finally"
	//	finallyExpression=XExpression)? | "finally" finallyExpression=XExpression);
	public XbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaXbase.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}

	//XSynchronizedExpression returns XExpression:
	//	=> ({XSynchronizedExpression} "synchronized" "(") param=XExpression ")" expression=XExpression;
	public XbaseGrammarAccess.XSynchronizedExpressionElements getXSynchronizedExpressionAccess() {
		return gaXbase.getXSynchronizedExpressionAccess();
	}
	
	public ParserRule getXSynchronizedExpressionRule() {
		return getXSynchronizedExpressionAccess().getRule();
	}

	//XCatchClause:
	//	"catch" "(" declaredParam=FullJvmFormalParameter ")" expression=XExpression;
	public XbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaXbase.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}

	//QualifiedName:
	//	ValidID ("." ValidID)*;
	public XbaseGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaXbase.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//Number hidden():
	//	HEX | (INT | DECIMAL) ("." (INT | DECIMAL))?;
	public XbaseGrammarAccess.NumberElements getNumberAccess() {
		return gaXbase.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}

	/// **
	// * Dummy rule, for "better" downwards compatibility, since GrammarAccess generates non-static inner classes, 
	// * which makes downstream grammars break on classloading, when a rule is removed.
	// * / StaticQualifier:
	//	(ValidID "::")+;
	public XbaseGrammarAccess.StaticQualifierElements getStaticQualifierAccess() {
		return gaXbase.getStaticQualifierAccess();
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}

	//terminal HEX:
	//	("0x" | "0X") ("0".."9" | "a".."f" | "A".."F" | "_")+ ("#" (("b" | "B") ("i" | "I") | ("l" | "L")))?;
	public TerminalRule getHEXRule() {
		return gaXbase.getHEXRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9" ("0".."9" | "_")*;
	public TerminalRule getINTRule() {
		return gaXbase.getINTRule();
	} 

	//terminal DECIMAL:
	//	INT (("e" | "E") ("+" | "-")? INT)? (("b" | "B") ("i" | "I" | "d" | "D") | ("l" | "L" | "d" | "D" | "f" | "F"))?;
	public TerminalRule getDECIMALRule() {
		return gaXbase.getDECIMALRule();
	} 

	//JvmTypeReference:
	//	JvmParameterizedTypeReference => ({JvmGenericArrayTypeReference.componentType=current} ArrayBrackets)* |
	//	XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaXbase.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}

	//ArrayBrackets:
	//	"[" "]";
	public XtypeGrammarAccess.ArrayBracketsElements getArrayBracketsAccess() {
		return gaXbase.getArrayBracketsAccess();
	}
	
	public ParserRule getArrayBracketsRule() {
		return getArrayBracketsAccess().getRule();
	}

	//XFunctionTypeRef:
	//	("(" (paramTypes+=JvmTypeReference ("," paramTypes+=JvmTypeReference)*)? ")")? "=>" returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaXbase.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}

	//JvmParameterizedTypeReference:
	//	type=[JvmType|QualifiedName] ("<" arguments+=JvmArgumentTypeReference ("," arguments+=JvmArgumentTypeReference)* ">"
	//	(=> ({JvmInnerTypeReference.outer=current} ".") type=[JvmType|ValidID] ("<" arguments+=JvmArgumentTypeReference (","
	//	arguments+=JvmArgumentTypeReference)* ">")?)*)?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaXbase.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}

	//JvmArgumentTypeReference returns JvmTypeReference:
	//	JvmTypeReference | JvmWildcardTypeReference;
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaXbase.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}

	//JvmWildcardTypeReference:
	//	{JvmWildcardTypeReference} "?" (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded* |
	//	constraints+=JvmLowerBound constraints+=JvmLowerBoundAnded*)?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaXbase.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}

	//JvmUpperBound:
	//	"extends" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaXbase.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}

	//JvmUpperBoundAnded returns JvmUpperBound:
	//	"&" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaXbase.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}

	//JvmLowerBound:
	//	"super" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaXbase.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}

	//JvmLowerBoundAnded returns JvmLowerBound:
	//	"&" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundAndedElements getJvmLowerBoundAndedAccess() {
		return gaXbase.getJvmLowerBoundAndedAccess();
	}
	
	public ParserRule getJvmLowerBoundAndedRule() {
		return getJvmLowerBoundAndedAccess().getRule();
	}

	//JvmTypeParameter:
	//	name=ValidID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded*)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaXbase.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}

	//QualifiedNameWithWildcard:
	//	QualifiedName "." "*";
	public XtypeGrammarAccess.QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return gaXbase.getQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}

	//ValidID:
	//	ID;
	public XtypeGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaXbase.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}

	//XImportSection:
	//	importDeclarations+=XImportDeclaration+;
	public XtypeGrammarAccess.XImportSectionElements getXImportSectionAccess() {
		return gaXbase.getXImportSectionAccess();
	}
	
	public ParserRule getXImportSectionRule() {
		return getXImportSectionAccess().getRule();
	}

	//XImportDeclaration:
	//	"import" (static?="static" extension?="extension"? importedType=[JvmDeclaredType|QualifiedNameInStaticImport]
	//	(wildcard?="*" | memberName=ValidID) | importedType=[JvmDeclaredType|QualifiedName] |
	//	importedNamespace=QualifiedNameWithWildcard) ";"?;
	public XtypeGrammarAccess.XImportDeclarationElements getXImportDeclarationAccess() {
		return gaXbase.getXImportDeclarationAccess();
	}
	
	public ParserRule getXImportDeclarationRule() {
		return getXImportDeclarationAccess().getRule();
	}

	//QualifiedNameInStaticImport:
	//	(ValidID ".")+;
	public XtypeGrammarAccess.QualifiedNameInStaticImportElements getQualifiedNameInStaticImportAccess() {
		return gaXbase.getQualifiedNameInStaticImportAccess();
	}
	
	public ParserRule getQualifiedNameInStaticImportRule() {
		return getQualifiedNameInStaticImportAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "$" | "_") ("a".."z" | "A".."Z" | "$" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaXbase.getIDRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') * / | !("\\" | "\""))* "\""? | "\'" ("\\" .
	//	/ * ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') * / | !("\\" | "\'"))* "\'"?;
	public TerminalRule getSTRINGRule() {
		return gaXbase.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaXbase.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXbase.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaXbase.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaXbase.getANY_OTHERRule();
	} 
}
