/*
 * Copyright 2014 Sebastian RODRIGUEZ, Nicolas GAUD, St√©phane GALLAND.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
module io.sarl.lang.GenerateSARL

import org.eclipse.emf.mwe.utils.*
import org.eclipse.xtext.generator.*
import org.eclipse.xtext.ui.generator.*
import org.eclipse.xtend.core.*
import org.eclipse.xtext.resource.XtextResourceSet 

var fileExtensions = "sarl"
var projectName = "io.sarl.lang"
var grammarURI = "platform:/resource/${projectName}/src/io/sarl/lang/SARL.xtext"
var runtimeProject = "../${projectName}"
var testPluginPath = "../../tests/io.sarl.lang.tests"
var encoding = "UTF-8"

Workflow {
    bean = StandaloneSetup {
    	ignoreBrokenProjectFiles = true
    	scanClassPath = true
		// use an XtextResourceset throughout the process, which is able to resolve classpath:/ URIs.
    	resourceSet = XtextResourceSet:theResourceSet {}
    	
    	// add mappings from platform:/resource to classpath:/
    	uriMap = {
    		from = "platform:/resource/org.eclipse.xtext.xbase/"
    		to = "classpath:/"
    	}
    	uriMap = {
    		from = "platform:/resource/org.eclipse.xtext.common.types/"
    		to = "classpath:/"
    	}
    	uriMap = {
    		from = "platform:/resource/org.eclipse.xtend.core/"
    		to = "classpath:/"
    	}
    	uriMap = {
    		from = "platform:/resource/org.eclipse.xtend.ide/"
    		to = "classpath:/"
    	}
    	
    	// register current projects and its siblings for platform URI map, as they are not on the classpath.
    	platformUri = "${runtimeProject}/.."
    	
    	// register Xtend grammar for inclusion
    	registerGeneratedEPackage = "org.eclipse.xtend.core.xtend.XtendPackage"
    	registerGenModelFile = "platform:/resource/org.eclipse.xtend.core/model/Xtend.genmodel"
    }
    
    component = DirectoryCleaner {
    	directory = "${runtimeProject}/src-gen"
    }
    
    component = DirectoryCleaner {
    	directory = "${runtimeProject}/model"
    }
    
    component = DirectoryCleaner {
    	directory = "${runtimeProject}.ui/src-gen"
    }
    
    component = DirectoryCleaner {
    	directory = "${testPluginPath}/src-gen"
    }
    
    component = Generator {
    	pathRtProject = runtimeProject
    	pathUiProject = "${runtimeProject}.ui"
    	pathTestProject = testPluginPath
    	projectNameRt = projectName
    	projectNameUi = "${projectName}.ui"
    	encoding = encoding
    	language = auto-inject {
    		// make sure we use the resourceSet created during standalone setup.
    		forcedResourceSet = theResourceSet
    		
    		uri = grammarURI
    
    		// Java API to access grammar elements (required by several other fragments)
    		fragment = grammarAccess.GrammarAccessFragment auto-inject {}
    
    		// generates Java API for the generated EPackages
    		fragment = ecore.EMFGeneratorFragment auto-inject {
    			
    		}
    		
    		// serializer 2.0
    		fragment = serializer.SerializerFragment auto-inject {
    			generateStub = false
    			generateXtendStub = false
    			//generateDebugData = true
    		}
    
    		// a custom ResourceFactory for use with EMF
    		fragment = resourceFactory.ResourceFactoryFragment auto-inject {}
    
    		// The antlr parser generator fragment.
			fragment = parser.antlr.XtextAntlrGeneratorFragment auto-inject {
    		  options = {
    		      backtrack = true
    		  }
    		}
    
    		// API for validation
    		fragment = validation.JavaValidatorFragment auto-inject {
    		//    composedCheck = "org.eclipse.xtext.validation.ImportUriValidator"
    		//    composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
    		}
    
    		// scoping and exporting API
    		fragment = scoping.ImportNamespacesScopingFragment auto-inject {
    			generateXtendStub = false
    		}
    		fragment = exporting.QualifiedNamesFragment auto-inject {}
    		fragment = builder.BuilderIntegrationFragment auto-inject {}
    
    		// generator API
    		fragment = generator.GeneratorFragment auto-inject {
    			generateXtendMain = false
    		}
    
    		// formatter API
    		fragment = formatting.FormatterFragment auto-inject {
    			generateXtendStub = false
    		}
    		
//    		// New formatter API
//    		fragment = formatting2.Formatter2Fragment auto-inject {}
    
    		// labeling API
    		fragment = labeling.LabelProviderFragment auto-inject {
    			generateXtendStub = false
    		}
    
    		// outline API
    		fragment = outline.OutlineTreeProviderFragment auto-inject {
    			generateXtendStub = false
    		}
    		fragment = outline.QuickOutlineFragment auto-inject {}
    
    		// quickfix API
    		fragment = quickfix.QuickfixProviderFragment auto-inject {
    			generateXtendStub = false
    		}
    
    		// content assist API
    		fragment = contentAssist.JavaBasedContentAssistFragment auto-inject {}
    
    		// generates a more lightweight Antlr parser and lexer tailored for content assist
    		fragment = parser.ContentAssistParserGenerator auto-inject {
				removeBacktrackingGuards = true
				lookaheadThreshold = '5'
				options = auto-inject {
					classSplitting = true
				}
				partialParsing = true
			}
    
    		// generates junit test support classes into Generator#pathTestProject
    		fragment = junit.Junit4Fragment auto-inject {}
    
    		// rename refactoring
    		fragment = refactoring.RefactorElementNameFragment auto-inject {
    			useJdtRefactoring = true
    		}
    
    		// provides the necessary bindings for java types integration
    		fragment = types.TypesGeneratorFragment auto-inject {}
    
    		// generates the required bindings only if the grammar inherits from Xbase
    		fragment = xbase.XbaseGeneratorFragment auto-inject {
    			generateXtendInferrer = false
    		}
    
    		// provides a preference page for template proposals
    		fragment = templates.CodetemplatesGeneratorFragment auto-inject {
    			suppressRestriction = false
    		}
    
    		// provides a compare view
    		fragment = compare.CompareFragment auto-inject {}
    	}
    }
}

