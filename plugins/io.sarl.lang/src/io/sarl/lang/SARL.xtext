/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2015 Sebastian RODRIGUEZ, Nicolas GAUD, StÃ©phane GALLAND.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
grammar io.sarl.lang.SARL with org.eclipse.xtend.core.Xtend

generate sarl "http://www.sarl.io/lang/SARL"

import "http://www.eclipse.org/xtext/common/JavaVMTypes" as jvm
import "http://www.eclipse.org/xtext/xbase/Xbase" as xbase
import "http://www.eclipse.org/xtext/xbase/Xtype" as xtype
import "http://www.eclipse.org/xtend" as xtend

SarlScript returns xtend::XtendFile:
	{xtend::XtendFile}
	('package' package=QualifiedName ';'?)?
	importSection=XImportSection?
	xtendTypes+=Type*
;

VarArgToken:
	'*'
;

Type returns xtend::XtendTypeDeclaration:
	Event | Capacity | Agent | Behavior | Skill | Class | Interface | Enum | AnnotationType 
;

Member returns xtend::XtendMember:
	Field | Constructor | Action | Class | Interface | Enum | AnnotationType 
; 

Field returns xtend::XtendMember:
	{xtend::XtendField}
	annotations+=XAnnotation*
	{xtend::XtendField.annotationInfo = current} modifiers+=CommonModifier*
	(
		modifiers+=FieldModifier modifiers+=CommonModifier* 
	|
		modifiers+='extension' (modifiers+=FieldModifier | modifiers+=CommonModifier)* 
	| 
		modifiers+=FieldModifier (modifiers+=CommonModifier)* modifiers+='extension' (modifiers+=CommonModifier)*  
	)
    (=>(name=ValidID ':' type=JvmTypeReference) | name=ValidID) 
	('=' initialValue=XExpression)? ';'?
;

Action returns xtend::XtendFunction:
	{SarlAction}
	annotations+=XAnnotation*
	{SarlAction.annotationInfo = current} modifiers+=CommonModifier*
	modifiers+=MethodModifier (modifiers+=CommonModifier | modifiers+=MethodModifier)* 
	('<' typeParameters+=JvmTypeParameter (',' typeParameters+=JvmTypeParameter)* '>')?
	name=FunctionID
	(
		=> '('
		(	parameters+=Parameter
			(=>',' parameters+=Parameter)* 
		)?
		')'
	)?
	(	':'
		=>(returnType=JvmTypeReference createExtensionInfo=CreateExtensionInfo)
	  | =>(returnType=TypeReferenceWithTypeArgs)
	  | =>(returnType=TypeReferenceNoTypeArgs)
	  | =>(createExtensionInfo=CreateExtensionInfo)
	)?
	(	('throws' exceptions+=JvmTypeReference (',' exceptions+=JvmTypeReference)*)?
		&
		('fires' firedEvents+=JvmTypeReference (',' firedEvents+=JvmTypeReference)*)?
	)
	(expression=XBlockExpression | expression=RichString | ';')?
;

Constructor returns xtend::XtendConstructor:
	{xtend::XtendConstructor}
	annotations+=XAnnotation*
	{xtend::XtendConstructor.annotationInfo = current}
	modifiers+=CommonModifier*
	'new'
	('<' typeParameters+=JvmTypeParameter (',' typeParameters+=JvmTypeParameter)* '>')?
	(=> '(' (parameters+=Parameter (',' parameters+=Parameter)*)?
	  ')'
	)?
	('throws' exceptions+=JvmTypeReference (',' exceptions+=JvmTypeReference)*)?
	expression=XBlockExpression
;

BehaviorUnit returns xtend::XtendMember:
	{SarlBehaviorUnit}
	annotations+=XAnnotation*
	{SarlBehaviorUnit.annotationInfo = current} 
	'on' name=JvmParameterizedTypeReference (=> '[' guard=XExpression ']')?
	(expression=XBlockExpression | expression=RichString | ';')
;

CapacityUses returns xtend::XtendMember:
	{SarlCapacityUses}
	'uses' capacities+=JvmParameterizedTypeReference
	(',' capacities+=JvmParameterizedTypeReference)* ';'?
;

RequiredCapacity returns xtend::XtendMember:
	{SarlRequiredCapacity}
	'requires' capacities+=JvmParameterizedTypeReference
	(',' capacities+=JvmParameterizedTypeReference)* ';'?
;

Class returns xtend::XtendTypeDeclaration:
	{xtend::XtendClass}
	annotations+=XAnnotation*
	{xtend::XtendClass.annotationInfo = current}
	modifiers+=CommonModifier*
	'class' name=ValidID ('<' typeParameters+=JvmTypeParameter (',' typeParameters+=JvmTypeParameter)* '>')?  
	("extends" extends=JvmParameterizedTypeReference)? 
   	('implements' implements+=JvmParameterizedTypeReference (',' implements+=JvmParameterizedTypeReference)*)?'{'
	   (members+=Member)*
	'}'
;

Interface returns xtend::XtendTypeDeclaration:
	{xtend::XtendInterface}
	annotations+=XAnnotation*
	{xtend::XtendInterface.annotationInfo = current}
	modifiers+=CommonModifier*
  	'interface' name=ValidID ('<' typeParameters+=JvmTypeParameter (',' typeParameters+=JvmTypeParameter)* '>')?  
   	('extends' extends+=JvmParameterizedTypeReference (',' extends+=JvmParameterizedTypeReference)*)?'{'
	   (members+=Member)*
   	'}'
;

Enum returns xtend::XtendTypeDeclaration:
	{xtend::XtendEnum}
	annotations+=XAnnotation*
	{xtend::XtendEnum.annotationInfo = current}
	modifiers+=CommonModifier*
  	'enum' name=ValidID '{'   
	   (members+=XtendEnumLiteral (',' members+=XtendEnumLiteral)*)? ';'?
   	'}'
;

AnnotationType returns xtend::XtendTypeDeclaration:
	{xtend::XtendAnnotationType}
	annotations+=XAnnotation*
 	{xtend::XtendAnnotationType.annotationInfo = current}
 	modifiers+=CommonModifier*
	'annotation' name=ValidID
	'{' (members+=AnnotationField)* '}'
;

Event returns xtend::XtendTypeDeclaration:
	{SarlEvent}
	annotations+=XAnnotation*
	{SarlEvent.annotationInfo = current}
	modifiers+=CommonModifier*
	'event' name=ValidID ('extends' extends=JvmParameterizedTypeReference)? 
	('{' (members+=EventMember)* '}')?
;

EventMember returns xtend::XtendMember:
	Field | Constructor 
;

Agent returns xtend::XtendTypeDeclaration:
	{SarlAgent}
	annotations+=XAnnotation*
	{SarlAgent.annotationInfo = current}
	modifiers+=CommonModifier*
	'agent' name=ValidID 
	('extends' extends=JvmParameterizedTypeReference)?
	'{' (members+=AgentMember)* '}'
;

AgentMember returns xtend::XtendMember:
	Member | BehaviorUnit | CapacityUses | RequiredCapacity
;

Capacity returns xtend::XtendTypeDeclaration:
	{SarlCapacity}
	annotations+=XAnnotation*
	{SarlCapacity.annotationInfo = current}
	modifiers+=CommonModifier*
	'capacity' name=ValidID
	('extends' extends+=JvmParameterizedTypeReference
		( ',' extends+=JvmParameterizedTypeReference )* )? 
	'{' (members+=CapacityMember)* '}'
;

CapacityMember returns xtend::XtendMember:
	Action
;

Behavior returns xtend::XtendTypeDeclaration:
	{SarlBehavior}
	annotations+=XAnnotation*
	{SarlBehavior.annotationInfo = current}
	modifiers+=CommonModifier*
	'behavior' name=ValidID ('extends' extends=JvmParameterizedTypeReference)?
	'{' (members+=BehaviorMember)* '}'
;

BehaviorMember returns xtend::XtendMember:
	Member | BehaviorUnit | CapacityUses | RequiredCapacity
;

Skill returns xtend::XtendTypeDeclaration:
	{SarlSkill}
	annotations+=XAnnotation*
	{SarlSkill.annotationInfo = current}
	modifiers+=CommonModifier*
	'skill' name=ValidID 
	(	('extends' extends=JvmParameterizedTypeReference)?
		&
		(	'implements' 
				(	implements+=JvmParameterizedTypeReference
					(',' implements+=JvmParameterizedTypeReference)*
				)
		)?
	)
	'{' (members+=SkillMember)* '}'
;

SkillMember returns xtend::XtendMember:
	Member | BehaviorUnit | CapacityUses | RequiredCapacity
;

Parameter returns xtend::XtendParameter:
	{SarlFormalParameter}
	annotations+=XAnnotation*
	(extension?='extension' annotations+=XAnnotation*)?  
	name=InnerVarID ':' parameterType=JvmTypeReference 
	(	  ('=' defaultValue=DefaultParameterValue)
		| (varArg?=VarArgToken)
	)?
;

DefaultParameterValue returns xbase::XExpression:
	XLiteral
;

//-----------------------------------------------
// BELOW THIS POINT, THE RULES FROM XBASE ARE OVERLOADED

// Variable declaration according to the SARL syntax (not the Xtext/Xtend)
XVariableDeclaration returns xbase::XExpression:
	=>({xtend::XtendVariableDeclaration}
	(((writeable?='var'|'val') extension?='extension'?) | (extension?='extension' (writeable?='var'|'val'))))
	(=>name=InnerVarID)
	(':' type=JvmTypeReference)?
	('=' right=XExpression)?
;

// Formal parameter declaration according to the SARL syntax (not the Xtext/Xtend)
JvmFormalParameter returns xtend::XtendFormalParameter:
	extension?='extension'? name=InnerVarID (=> ':' (parameterType=JvmTypeReference))?
;
	
// Formal parameter declaration according to the SARL syntax (not the Xtext/Xtend)
FullJvmFormalParameter returns xtend::XtendFormalParameter:
	extension?='extension'? name=InnerVarID ':' parameterType=JvmTypeReference
;

// The type of the for-loop's variable is following the SARL syntax (not the Xtext/Xtend)
XForLoopExpression returns xbase::XExpression:
	=>({xbase::XForLoopExpression}
	'for' '(' declaredParam=SarlXLoopFormalParameter ':') forExpression=XExpression ')'
	( eachExpression=XExpression | ';' )
;
// The following rule is not provided by Xbase, but we use it
// in the overloaded version of XForLoopExpression
SarlXLoopFormalParameter returns jvm::JvmFormalParameter:
	{jvm::JvmFormalParameter}
	name=ValidID
	( 'as' parameterType=JvmTypeReference )?
;

// The type of the switch's variable is following the SARL syntax (not the Xtext/Xtend)
XSwitchExpression returns xbase::XExpression:
	{xbase::XSwitchExpression}
	'switch' (=>('(' declaredParam=JvmFormalParameter '=') switch=XExpression ')'
		| =>(declaredParam=JvmFormalParameter '=')? switch=XExpressionOrSimpleConstructorCall) '{'
	(cases+=XCasePart)*
	('default' ':' default=XExpression )?
	'}'
;
